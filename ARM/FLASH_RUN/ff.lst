   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"ff.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "source\\fatfs\\ff.c"
  20              		.section	.text.mem_cpy,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	mem_cpy:
  27              	.LVL0:
  28              	.LFB123:
   1:source\fatfs/ff.c **** /*----------------------------------------------------------------------------/
   2:source\fatfs/ff.c **** /  FatFs - FAT file system module  R0.11                 (C)ChaN, 2015
   3:source\fatfs/ff.c **** /-----------------------------------------------------------------------------/
   4:source\fatfs/ff.c **** / FatFs module is a free software that opened under license policy of
   5:source\fatfs/ff.c **** / following conditions.
   6:source\fatfs/ff.c **** /
   7:source\fatfs/ff.c **** / Copyright (C) 2015, ChaN, all right reserved.
   8:source\fatfs/ff.c **** /
   9:source\fatfs/ff.c **** / 1. Redistributions of source code must retain the above copyright notice,
  10:source\fatfs/ff.c **** /    this condition and the following disclaimer.
  11:source\fatfs/ff.c **** /
  12:source\fatfs/ff.c **** / This software is provided by the copyright holder and contributors "AS IS"
  13:source\fatfs/ff.c **** / and any warranties related to this software are DISCLAIMED.
  14:source\fatfs/ff.c **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  15:source\fatfs/ff.c **** / by use of this software.
  16:source\fatfs/ff.c **** /-----------------------------------------------------------------------------/
  17:source\fatfs/ff.c **** / Feb 26,'06 R0.00  Prototype.
  18:source\fatfs/ff.c **** /
  19:source\fatfs/ff.c **** / Apr 29,'06 R0.01  First stable version.
  20:source\fatfs/ff.c **** /
  21:source\fatfs/ff.c **** / Jun 01,'06 R0.02  Added FAT12 support.
  22:source\fatfs/ff.c **** /                   Removed unbuffered mode.
  23:source\fatfs/ff.c **** /                   Fixed a problem on small (<32M) partition.
  24:source\fatfs/ff.c **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  25:source\fatfs/ff.c **** /
  26:source\fatfs/ff.c **** / Sep 22,'06 R0.03  Added f_rename().
  27:source\fatfs/ff.c **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  28:source\fatfs/ff.c **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  29:source\fatfs/ff.c **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  30:source\fatfs/ff.c **** /
  31:source\fatfs/ff.c **** / Feb 04,'07 R0.04  Supported multiple drive system.
  32:source\fatfs/ff.c **** /                   Changed some interfaces for multiple drive system.
  33:source\fatfs/ff.c **** /                   Changed f_mountdrv() to f_mount().
  34:source\fatfs/ff.c **** /                   Added f_mkfs().
  35:source\fatfs/ff.c **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  36:source\fatfs/ff.c **** /                   Added a capability of extending file size to f_lseek().
  37:source\fatfs/ff.c **** /                   Added minimization level 3.
  38:source\fatfs/ff.c **** /                   Fixed an endian sensitive code in f_mkfs().
  39:source\fatfs/ff.c **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  40:source\fatfs/ff.c **** /                   Added FSINFO support.
  41:source\fatfs/ff.c **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  42:source\fatfs/ff.c **** /                   Fixed short seek (<= csize) collapses the file object.
  43:source\fatfs/ff.c **** /
  44:source\fatfs/ff.c **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  45:source\fatfs/ff.c **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSINFO.
  46:source\fatfs/ff.c **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  47:source\fatfs/ff.c **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  48:source\fatfs/ff.c **** /                   Fixed off by one error at FAT sub-type determination.
  49:source\fatfs/ff.c **** /                   Fixed btr in f_read() can be mistruncated.
  50:source\fatfs/ff.c **** /                   Fixed cached sector is not flushed when create and close without write.
  51:source\fatfs/ff.c **** /
  52:source\fatfs/ff.c **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  53:source\fatfs/ff.c **** /                   Improved performance of f_lseek() on moving to the same or following cluster.
  54:source\fatfs/ff.c **** /
  55:source\fatfs/ff.c **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
  56:source\fatfs/ff.c **** /                   Added long file name feature.
  57:source\fatfs/ff.c **** /                   Added multiple code page feature.
  58:source\fatfs/ff.c **** /                   Added re-entrancy for multitask operation.
  59:source\fatfs/ff.c **** /                   Added auto cluster size selection to f_mkfs().
  60:source\fatfs/ff.c **** /                   Added rewind option to f_readdir().
  61:source\fatfs/ff.c **** /                   Changed result code of critical errors.
  62:source\fatfs/ff.c **** /                   Renamed string functions to avoid name collision.
  63:source\fatfs/ff.c **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  64:source\fatfs/ff.c **** /                   Added multiple sector size feature.
  65:source\fatfs/ff.c **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  66:source\fatfs/ff.c **** /                   Fixed wrong cache control in f_lseek().
  67:source\fatfs/ff.c **** /                   Added relative path feature.
  68:source\fatfs/ff.c **** /                   Added f_chdir() and f_chdrive().
  69:source\fatfs/ff.c **** /                   Added proper case conversion to extended character.
  70:source\fatfs/ff.c **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  71:source\fatfs/ff.c **** /                   Fixed f_unlink() fails to remove a sub-directory on _FS_RPATH.
  72:source\fatfs/ff.c **** /                   Fixed name matching error on the 13 character boundary.
  73:source\fatfs/ff.c **** /                   Added a configuration option, _LFN_UNICODE.
  74:source\fatfs/ff.c **** /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
  75:source\fatfs/ff.c **** /
  76:source\fatfs/ff.c **** / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
  77:source\fatfs/ff.c **** /                   Added file lock feature. (_FS_SHARE)
  78:source\fatfs/ff.c **** /                   Added fast seek feature. (_USE_FASTSEEK)
  79:source\fatfs/ff.c **** /                   Changed some types on the API, XCHAR->TCHAR.
  80:source\fatfs/ff.c **** /                   Changed .fname in the FILINFO structure on Unicode cfg.
  81:source\fatfs/ff.c **** /                   String functions support UTF-8 encoding files on Unicode cfg.
  82:source\fatfs/ff.c **** / Aug 16,'10 R0.08a Added f_getcwd().
  83:source\fatfs/ff.c **** /                   Added sector erase feature. (_USE_ERASE)
  84:source\fatfs/ff.c **** /                   Moved file lock semaphore table from fs object to the bss.
  85:source\fatfs/ff.c **** /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name con
  86:source\fatfs/ff.c **** /                   Fixed f_mkfs() creates wrong FAT32 volume.
  87:source\fatfs/ff.c **** / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
  88:source\fatfs/ff.c **** /                   f_lseek() reports required table size on creating CLMP.
  89:source\fatfs/ff.c **** /                   Extended format syntax of f_printf().
  90:source\fatfs/ff.c **** /                   Ignores duplicated directory separators in given path name.
  91:source\fatfs/ff.c **** /
  92:source\fatfs/ff.c **** / Sep 06,'11 R0.09  f_mkfs() supports multiple partition to complete the multiple partition feature
  93:source\fatfs/ff.c **** /                   Added f_fdisk().
  94:source\fatfs/ff.c **** / Aug 27,'12 R0.09a Changed f_open() and f_opendir() reject null object pointer to avoid crash.
  95:source\fatfs/ff.c **** /                   Changed option name _FS_SHARE to _FS_LOCK.
  96:source\fatfs/ff.c **** /                   Fixed assertion failure due to OS/2 EA on FAT12/16 volume.
  97:source\fatfs/ff.c **** / Jan 24,'13 R0.09b Added f_setlabel() and f_getlabel().
  98:source\fatfs/ff.c **** /
  99:source\fatfs/ff.c **** / Oct 02,'13 R0.10  Added selection of character encoding on the file. (_STRF_ENCODE)
 100:source\fatfs/ff.c **** /                   Added f_closedir().
 101:source\fatfs/ff.c **** /                   Added forced full FAT scan for f_getfree(). (_FS_NOFSINFO)
 102:source\fatfs/ff.c **** /                   Added forced mount feature with changes of f_mount().
 103:source\fatfs/ff.c **** /                   Improved behavior of volume auto detection.
 104:source\fatfs/ff.c **** /                   Improved write throughput of f_puts() and f_printf().
 105:source\fatfs/ff.c **** /                   Changed argument of f_chdrive(), f_mkfs(), disk_read() and disk_write().
 106:source\fatfs/ff.c **** /                   Fixed f_write() can be truncated when the file size is close to 4GB.
 107:source\fatfs/ff.c **** /                   Fixed f_open(), f_mkdir() and f_setlabel() can return incorrect error code.
 108:source\fatfs/ff.c **** / Jan 15,'14 R0.10a Added arbitrary strings as drive number in the path name. (_STR_VOLUME_ID)
 109:source\fatfs/ff.c **** /                   Added a configuration option of minimum sector size. (_MIN_SS)
 110:source\fatfs/ff.c **** /                   2nd argument of f_rename() can have a drive number and it will be ignored.
 111:source\fatfs/ff.c **** /                   Fixed f_mount() with forced mount fails when drive number is >= 1.
 112:source\fatfs/ff.c **** /                   Fixed f_close() invalidates the file object without volume lock.
 113:source\fatfs/ff.c **** /                   Fixed f_closedir() returns but the volume lock is left acquired.
 114:source\fatfs/ff.c **** /                   Fixed creation of an entry with LFN fails on too many SFN collisions.
 115:source\fatfs/ff.c **** / May 19,'14 R0.10b Fixed a hard error in the disk I/O layer can collapse the directory entry.
 116:source\fatfs/ff.c **** /                   Fixed LFN entry is not deleted on delete/rename an object with lossy converted 
 117:source\fatfs/ff.c **** / Nov  9,'14 R0.10c Added a configuration option for the platforms without RTC. (_FS_NORTC)
 118:source\fatfs/ff.c **** /                   Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel(). (
 119:source\fatfs/ff.c **** /                   Fixed a potential problem of FAT access that can appear on disk error.
 120:source\fatfs/ff.c **** /                   Fixed null pointer dereference on attempting to delete the root direcotry. (app
 121:source\fatfs/ff.c **** / Feb 02,'15 R0.11  Added f_findfirst() and f_findnext(). (_USE_FIND)
 122:source\fatfs/ff.c **** /                   Fixed f_unlink() does not remove cluster chain of the file. (appeared at R0.10c
 123:source\fatfs/ff.c **** /                   Fixed _FS_NORTC option does not work properly. (appeared at R0.10c)
 124:source\fatfs/ff.c **** /---------------------------------------------------------------------------*/
 125:source\fatfs/ff.c **** 
 126:source\fatfs/ff.c **** #include "ff.h"			/* Declarations of FatFs API */
 127:source\fatfs/ff.c **** #include "diskio.h"		/* Declarations of disk I/O functions */
 128:source\fatfs/ff.c **** 
 129:source\fatfs/ff.c **** 
 130:source\fatfs/ff.c **** /*--------------------------------------------------------------------------
 131:source\fatfs/ff.c **** 
 132:source\fatfs/ff.c ****    Module Private Definitions
 133:source\fatfs/ff.c **** 
 134:source\fatfs/ff.c **** ---------------------------------------------------------------------------*/
 135:source\fatfs/ff.c **** 
 136:source\fatfs/ff.c **** #if _FATFS != 32020	/* Revision ID */
 137:source\fatfs/ff.c **** #error Wrong include file (ff.h).
 138:source\fatfs/ff.c **** #endif
 139:source\fatfs/ff.c **** 
 140:source\fatfs/ff.c **** 
 141:source\fatfs/ff.c **** /* Reentrancy related */
 142:source\fatfs/ff.c **** #if _FS_REENTRANT
 143:source\fatfs/ff.c **** #if _USE_LFN == 1
 144:source\fatfs/ff.c **** #error Static LFN work area cannot be used at thread-safe configuration
 145:source\fatfs/ff.c **** #endif
 146:source\fatfs/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 147:source\fatfs/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 148:source\fatfs/ff.c **** #else
 149:source\fatfs/ff.c **** #define	ENTER_FF(fs)
 150:source\fatfs/ff.c **** #define LEAVE_FF(fs, res)	return res
 151:source\fatfs/ff.c **** #endif
 152:source\fatfs/ff.c **** 
 153:source\fatfs/ff.c **** #define	ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 154:source\fatfs/ff.c **** 
 155:source\fatfs/ff.c **** 
 156:source\fatfs/ff.c **** /* Definitions of sector size */
 157:source\fatfs/ff.c **** #if (_MAX_SS < _MIN_SS) || (_MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 158:source\fatfs/ff.c **** #error Wrong sector size configuration
 159:source\fatfs/ff.c **** #endif
 160:source\fatfs/ff.c **** #if _MAX_SS == _MIN_SS
 161:source\fatfs/ff.c **** #define	SS(fs)	((UINT)_MAX_SS)	/* Fixed sector size */
 162:source\fatfs/ff.c **** #else
 163:source\fatfs/ff.c **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
 164:source\fatfs/ff.c **** #endif
 165:source\fatfs/ff.c **** 
 166:source\fatfs/ff.c **** 
 167:source\fatfs/ff.c **** /* Timestamp feature */
 168:source\fatfs/ff.c **** #if _FS_NORTC == 1
 169:source\fatfs/ff.c **** #if _NORTC_YEAR < 1980 || _NORTC_YEAR > 2107 || _NORTC_MON < 1 || _NORTC_MON > 12 || _NORTC_MDAY < 
 170:source\fatfs/ff.c **** #error Invalid _FS_NORTC settings
 171:source\fatfs/ff.c **** #endif
 172:source\fatfs/ff.c **** #define GET_FATTIME()	((DWORD)(_NORTC_YEAR - 1980) << 25 | (DWORD)_NORTC_MON << 21 | (DWORD)_NORTC_
 173:source\fatfs/ff.c **** #else
 174:source\fatfs/ff.c **** #define GET_FATTIME()	get_fattime()
 175:source\fatfs/ff.c **** #endif
 176:source\fatfs/ff.c **** 
 177:source\fatfs/ff.c **** 
 178:source\fatfs/ff.c **** /* File access control feature */
 179:source\fatfs/ff.c **** #if _FS_LOCK
 180:source\fatfs/ff.c **** #if _FS_READONLY
 181:source\fatfs/ff.c **** #error _FS_LOCK must be 0 at read-only configuration
 182:source\fatfs/ff.c **** #endif
 183:source\fatfs/ff.c **** typedef struct {
 184:source\fatfs/ff.c **** 	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
 185:source\fatfs/ff.c **** 	DWORD clu;		/* Object ID 2, directory (0:root) */
 186:source\fatfs/ff.c **** 	WORD idx;		/* Object ID 3, directory index */
 187:source\fatfs/ff.c **** 	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
 188:source\fatfs/ff.c **** } FILESEM;
 189:source\fatfs/ff.c **** #endif
 190:source\fatfs/ff.c **** 
 191:source\fatfs/ff.c **** 
 192:source\fatfs/ff.c **** 
 193:source\fatfs/ff.c **** /* DBCS code ranges and SBCS extend character conversion table */
 194:source\fatfs/ff.c **** 
 195:source\fatfs/ff.c **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
 196:source\fatfs/ff.c **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
 197:source\fatfs/ff.c **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
 198:source\fatfs/ff.c **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
 199:source\fatfs/ff.c **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
 200:source\fatfs/ff.c **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
 201:source\fatfs/ff.c **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
 202:source\fatfs/ff.c **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
 203:source\fatfs/ff.c **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
 204:source\fatfs/ff.c **** 
 205:source\fatfs/ff.c **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
 206:source\fatfs/ff.c **** #define _DF1S	0x81
 207:source\fatfs/ff.c **** #define _DF1E	0xFE
 208:source\fatfs/ff.c **** #define _DS1S	0x40
 209:source\fatfs/ff.c **** #define _DS1E	0x7E
 210:source\fatfs/ff.c **** #define _DS2S	0x80
 211:source\fatfs/ff.c **** #define _DS2E	0xFE
 212:source\fatfs/ff.c **** 
 213:source\fatfs/ff.c **** #elif _CODE_PAGE == 949	/* Korean */
 214:source\fatfs/ff.c **** #define _DF1S	0x81
 215:source\fatfs/ff.c **** #define _DF1E	0xFE
 216:source\fatfs/ff.c **** #define _DS1S	0x41
 217:source\fatfs/ff.c **** #define _DS1E	0x5A
 218:source\fatfs/ff.c **** #define _DS2S	0x61
 219:source\fatfs/ff.c **** #define _DS2E	0x7A
 220:source\fatfs/ff.c **** #define _DS3S	0x81
 221:source\fatfs/ff.c **** #define _DS3E	0xFE
 222:source\fatfs/ff.c **** 
 223:source\fatfs/ff.c **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
 224:source\fatfs/ff.c **** #define _DF1S	0x81
 225:source\fatfs/ff.c **** #define _DF1E	0xFE
 226:source\fatfs/ff.c **** #define _DS1S	0x40
 227:source\fatfs/ff.c **** #define _DS1E	0x7E
 228:source\fatfs/ff.c **** #define _DS2S	0xA1
 229:source\fatfs/ff.c **** #define _DS2E	0xFE
 230:source\fatfs/ff.c **** 
 231:source\fatfs/ff.c **** #elif _CODE_PAGE == 437	/* U.S. (OEM) */
 232:source\fatfs/ff.c **** #define _DF1S	0
 233:source\fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x9
 234:source\fatfs/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 235:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 236:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 237:source\fatfs/ff.c **** 
 238:source\fatfs/ff.c **** #elif _CODE_PAGE == 720	/* Arabic (OEM) */
 239:source\fatfs/ff.c **** #define _DF1S	0
 240:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x9
 241:source\fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 242:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 243:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 244:source\fatfs/ff.c **** 
 245:source\fatfs/ff.c **** #elif _CODE_PAGE == 737	/* Greek (OEM) */
 246:source\fatfs/ff.c **** #define _DF1S	0
 247:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 248:source\fatfs/ff.c **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,
 249:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 250:source\fatfs/ff.c **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 251:source\fatfs/ff.c **** 
 252:source\fatfs/ff.c **** #elif _CODE_PAGE == 775	/* Baltic (OEM) */
 253:source\fatfs/ff.c **** #define _DF1S	0
 254:source\fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x9
 255:source\fatfs/ff.c **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 256:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,
 257:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 258:source\fatfs/ff.c **** 
 259:source\fatfs/ff.c **** #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
 260:source\fatfs/ff.c **** #define _DF1S	0
 261:source\fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 262:source\fatfs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 263:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 264:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 265:source\fatfs/ff.c **** 
 266:source\fatfs/ff.c **** #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
 267:source\fatfs/ff.c **** #define _DF1S	0
 268:source\fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x9
 269:source\fatfs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,
 270:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 271:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,
 272:source\fatfs/ff.c **** 
 273:source\fatfs/ff.c **** #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
 274:source\fatfs/ff.c **** #define _DF1S	0
 275:source\fatfs/ff.c **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x9
 276:source\fatfs/ff.c **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 277:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,
 278:source\fatfs/ff.c **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,
 279:source\fatfs/ff.c **** 
 280:source\fatfs/ff.c **** #elif _CODE_PAGE == 857	/* Turkish (OEM) */
 281:source\fatfs/ff.c **** #define _DF1S	0
 282:source\fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x9
 283:source\fatfs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 284:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 285:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,
 286:source\fatfs/ff.c **** 
 287:source\fatfs/ff.c **** #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
 288:source\fatfs/ff.c **** #define _DF1S	0
 289:source\fatfs/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 290:source\fatfs/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 291:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 292:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 293:source\fatfs/ff.c **** 
 294:source\fatfs/ff.c **** #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
 295:source\fatfs/ff.c **** #define _DF1S	0
 296:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 297:source\fatfs/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 298:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 299:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 300:source\fatfs/ff.c **** 
 301:source\fatfs/ff.c **** #elif _CODE_PAGE == 866	/* Russian (OEM) */
 302:source\fatfs/ff.c **** #define _DF1S	0
 303:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 304:source\fatfs/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,
 305:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 306:source\fatfs/ff.c **** 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,
 307:source\fatfs/ff.c **** 
 308:source\fatfs/ff.c **** #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
 309:source\fatfs/ff.c **** #define _DF1S	0
 310:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 311:source\fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 312:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 313:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 314:source\fatfs/ff.c **** 
 315:source\fatfs/ff.c **** #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
 316:source\fatfs/ff.c **** #define _DF1S	0
 317:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 318:source\fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 319:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 320:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 321:source\fatfs/ff.c **** 
 322:source\fatfs/ff.c **** #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
 323:source\fatfs/ff.c **** #define _DF1S	0
 324:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x8
 325:source\fatfs/ff.c **** 				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 326:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 327:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 328:source\fatfs/ff.c **** 
 329:source\fatfs/ff.c **** #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
 330:source\fatfs/ff.c **** #define _DF1S	0
 331:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 332:source\fatfs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 333:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 334:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 335:source\fatfs/ff.c **** 
 336:source\fatfs/ff.c **** #elif _CODE_PAGE == 1253 /* Greek (Windows) */
 337:source\fatfs/ff.c **** #define _DF1S	0
 338:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 339:source\fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 340:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 341:source\fatfs/ff.c **** 				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 342:source\fatfs/ff.c **** 
 343:source\fatfs/ff.c **** #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
 344:source\fatfs/ff.c **** #define _DF1S	0
 345:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 346:source\fatfs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 347:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 348:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 349:source\fatfs/ff.c **** 
 350:source\fatfs/ff.c **** #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
 351:source\fatfs/ff.c **** #define _DF1S	0
 352:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 353:source\fatfs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 354:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 355:source\fatfs/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 356:source\fatfs/ff.c **** 
 357:source\fatfs/ff.c **** #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
 358:source\fatfs/ff.c **** #define _DF1S	0
 359:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 360:source\fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 361:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 362:source\fatfs/ff.c **** 				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,
 363:source\fatfs/ff.c **** 
 364:source\fatfs/ff.c **** #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
 365:source\fatfs/ff.c **** #define _DF1S	0
 366:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 367:source\fatfs/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 368:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 369:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 370:source\fatfs/ff.c **** 
 371:source\fatfs/ff.c **** #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
 372:source\fatfs/ff.c **** #define _DF1S	0
 373:source\fatfs/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 374:source\fatfs/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 375:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 376:source\fatfs/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 377:source\fatfs/ff.c **** 
 378:source\fatfs/ff.c **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 379:source\fatfs/ff.c **** #if _USE_LFN
 380:source\fatfs/ff.c **** #error Cannot use LFN feature without valid code page.
 381:source\fatfs/ff.c **** #endif
 382:source\fatfs/ff.c **** #define _DF1S	0
 383:source\fatfs/ff.c **** 
 384:source\fatfs/ff.c **** #else
 385:source\fatfs/ff.c **** #error Unknown code page
 386:source\fatfs/ff.c **** 
 387:source\fatfs/ff.c **** #endif
 388:source\fatfs/ff.c **** 
 389:source\fatfs/ff.c **** 
 390:source\fatfs/ff.c **** /* Character code support macros */
 391:source\fatfs/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 392:source\fatfs/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 393:source\fatfs/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 394:source\fatfs/ff.c **** 
 395:source\fatfs/ff.c **** #if _DF1S		/* Code page is DBCS */
 396:source\fatfs/ff.c **** 
 397:source\fatfs/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 398:source\fatfs/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 399:source\fatfs/ff.c **** #else			/* One 1st byte area */
 400:source\fatfs/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 401:source\fatfs/ff.c **** #endif
 402:source\fatfs/ff.c **** 
 403:source\fatfs/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 404:source\fatfs/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 405:source\fatfs/ff.c **** #else			/* Two 2nd byte areas */
 406:source\fatfs/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 407:source\fatfs/ff.c **** #endif
 408:source\fatfs/ff.c **** 
 409:source\fatfs/ff.c **** #else			/* Code page is SBCS */
 410:source\fatfs/ff.c **** 
 411:source\fatfs/ff.c **** #define IsDBCS1(c)	0
 412:source\fatfs/ff.c **** #define IsDBCS2(c)	0
 413:source\fatfs/ff.c **** 
 414:source\fatfs/ff.c **** #endif /* _DF1S */
 415:source\fatfs/ff.c **** 
 416:source\fatfs/ff.c **** 
 417:source\fatfs/ff.c **** /* Name status flags */
 418:source\fatfs/ff.c **** #define NSFLAG		11		/* Index of name status byte in fn[] */
 419:source\fatfs/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 420:source\fatfs/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 421:source\fatfs/ff.c **** #define NS_LAST		0x04	/* Last segment */
 422:source\fatfs/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 423:source\fatfs/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 424:source\fatfs/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 425:source\fatfs/ff.c **** 
 426:source\fatfs/ff.c **** 
 427:source\fatfs/ff.c **** /* FAT sub-type boundaries (Differ from specs but correct for real DOS/Windows) */
 428:source\fatfs/ff.c **** #define MIN_FAT16	4086U	/* Minimum number of clusters as FAT16 */
 429:source\fatfs/ff.c **** #define	MIN_FAT32	65526U	/* Minimum number of clusters as FAT32 */
 430:source\fatfs/ff.c **** 
 431:source\fatfs/ff.c **** 
 432:source\fatfs/ff.c **** /* FatFs refers the members in the FAT structures as byte array instead of
 433:source\fatfs/ff.c **** / structure member because the structure is not binary compatible between
 434:source\fatfs/ff.c **** / different platforms */
 435:source\fatfs/ff.c **** 
 436:source\fatfs/ff.c **** #define BS_jmpBoot			0		/* x86 jump instruction (3) */
 437:source\fatfs/ff.c **** #define BS_OEMName			3		/* OEM name (8) */
 438:source\fatfs/ff.c **** #define BPB_BytsPerSec		11		/* Sector size [byte] (2) */
 439:source\fatfs/ff.c **** #define BPB_SecPerClus		13		/* Cluster size [sector] (1) */
 440:source\fatfs/ff.c **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (2) */
 441:source\fatfs/ff.c **** #define BPB_NumFATs			16		/* Number of FAT copies (1) */
 442:source\fatfs/ff.c **** #define BPB_RootEntCnt		17		/* Number of root directory entries for FAT12/16 (2) */
 443:source\fatfs/ff.c **** #define BPB_TotSec16		19		/* Volume size [sector] (2) */
 444:source\fatfs/ff.c **** #define BPB_Media			21		/* Media descriptor (1) */
 445:source\fatfs/ff.c **** #define BPB_FATSz16			22		/* FAT size [sector] (2) */
 446:source\fatfs/ff.c **** #define BPB_SecPerTrk		24		/* Track size [sector] (2) */
 447:source\fatfs/ff.c **** #define BPB_NumHeads		26		/* Number of heads (2) */
 448:source\fatfs/ff.c **** #define BPB_HiddSec			28		/* Number of special hidden sectors (4) */
 449:source\fatfs/ff.c **** #define BPB_TotSec32		32		/* Volume size [sector] (4) */
 450:source\fatfs/ff.c **** #define BS_DrvNum			36		/* Physical drive number (2) */
 451:source\fatfs/ff.c **** #define BS_BootSig			38		/* Extended boot signature (1) */
 452:source\fatfs/ff.c **** #define BS_VolID			39		/* Volume serial number (4) */
 453:source\fatfs/ff.c **** #define BS_VolLab			43		/* Volume label (8) */
 454:source\fatfs/ff.c **** #define BS_FilSysType		54		/* File system type (1) */
 455:source\fatfs/ff.c **** #define BPB_FATSz32			36		/* FAT size [sector] (4) */
 456:source\fatfs/ff.c **** #define BPB_ExtFlags		40		/* Extended flags (2) */
 457:source\fatfs/ff.c **** #define BPB_FSVer			42		/* File system version (2) */
 458:source\fatfs/ff.c **** #define BPB_RootClus		44		/* Root directory first cluster (4) */
 459:source\fatfs/ff.c **** #define BPB_FSInfo			48		/* Offset of FSINFO sector (2) */
 460:source\fatfs/ff.c **** #define BPB_BkBootSec		50		/* Offset of backup boot sector (2) */
 461:source\fatfs/ff.c **** #define BS_DrvNum32			64		/* Physical drive number (2) */
 462:source\fatfs/ff.c **** #define BS_BootSig32		66		/* Extended boot signature (1) */
 463:source\fatfs/ff.c **** #define BS_VolID32			67		/* Volume serial number (4) */
 464:source\fatfs/ff.c **** #define BS_VolLab32			71		/* Volume label (8) */
 465:source\fatfs/ff.c **** #define BS_FilSysType32		82		/* File system type (1) */
 466:source\fatfs/ff.c **** #define	FSI_LeadSig			0		/* FSI: Leading signature (4) */
 467:source\fatfs/ff.c **** #define	FSI_StrucSig		484		/* FSI: Structure signature (4) */
 468:source\fatfs/ff.c **** #define	FSI_Free_Count		488		/* FSI: Number of free clusters (4) */
 469:source\fatfs/ff.c **** #define	FSI_Nxt_Free		492		/* FSI: Last allocated cluster (4) */
 470:source\fatfs/ff.c **** #define MBR_Table			446		/* MBR: Partition table offset (2) */
 471:source\fatfs/ff.c **** #define	SZ_PTE				16		/* MBR: Size of a partition table entry */
 472:source\fatfs/ff.c **** #define BS_55AA				510		/* Signature word (2) */
 473:source\fatfs/ff.c **** 
 474:source\fatfs/ff.c **** #define	DIR_Name			0		/* Short file name (11) */
 475:source\fatfs/ff.c **** #define	DIR_Attr			11		/* Attribute (1) */
 476:source\fatfs/ff.c **** #define	DIR_NTres			12		/* Lower case flag (1) */
 477:source\fatfs/ff.c **** #define DIR_CrtTimeTenth	13		/* Created time sub-second (1) */
 478:source\fatfs/ff.c **** #define	DIR_CrtTime			14		/* Created time (2) */
 479:source\fatfs/ff.c **** #define	DIR_CrtDate			16		/* Created date (2) */
 480:source\fatfs/ff.c **** #define DIR_LstAccDate		18		/* Last accessed date (2) */
 481:source\fatfs/ff.c **** #define	DIR_FstClusHI		20		/* Higher 16-bit of first cluster (2) */
 482:source\fatfs/ff.c **** #define	DIR_WrtTime			22		/* Modified time (2) */
 483:source\fatfs/ff.c **** #define	DIR_WrtDate			24		/* Modified date (2) */
 484:source\fatfs/ff.c **** #define	DIR_FstClusLO		26		/* Lower 16-bit of first cluster (2) */
 485:source\fatfs/ff.c **** #define	DIR_FileSize		28		/* File size (4) */
 486:source\fatfs/ff.c **** #define	LDIR_Ord			0		/* LFN entry order and LLE flag (1) */
 487:source\fatfs/ff.c **** #define	LDIR_Attr			11		/* LFN attribute (1) */
 488:source\fatfs/ff.c **** #define	LDIR_Type			12		/* LFN type (1) */
 489:source\fatfs/ff.c **** #define	LDIR_Chksum			13		/* Sum of corresponding SFN entry */
 490:source\fatfs/ff.c **** #define	LDIR_FstClusLO		26		/* Must be zero (0) */
 491:source\fatfs/ff.c **** #define	SZ_DIRE				32		/* Size of a directory entry */
 492:source\fatfs/ff.c **** #define	LLEF				0x40	/* Last long entry flag in LDIR_Ord */
 493:source\fatfs/ff.c **** #define	DDEM				0xE5	/* Deleted directory entry mark at DIR_Name[0] */
 494:source\fatfs/ff.c **** #define	RDDEM				0x05	/* Replacement of the character collides with DDEM */
 495:source\fatfs/ff.c **** 
 496:source\fatfs/ff.c **** 
 497:source\fatfs/ff.c **** 
 498:source\fatfs/ff.c **** 
 499:source\fatfs/ff.c **** /*------------------------------------------------------------*/
 500:source\fatfs/ff.c **** /* Module private work area                                   */
 501:source\fatfs/ff.c **** /*------------------------------------------------------------*/
 502:source\fatfs/ff.c **** /* Remark: Uninitialized variables with static duration are
 503:source\fatfs/ff.c **** /  guaranteed zero/null at start-up. If not, either the linker
 504:source\fatfs/ff.c **** /  or start-up routine being used is out of ANSI-C standard.
 505:source\fatfs/ff.c **** */
 506:source\fatfs/ff.c **** 
 507:source\fatfs/ff.c **** #if _VOLUMES < 1 || _VOLUMES > 9
 508:source\fatfs/ff.c **** #error Wrong _VOLUMES setting
 509:source\fatfs/ff.c **** #endif
 510:source\fatfs/ff.c **** static FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 511:source\fatfs/ff.c **** static WORD Fsid;				/* File system mount ID */
 512:source\fatfs/ff.c **** 
 513:source\fatfs/ff.c **** #if _FS_RPATH && _VOLUMES >= 2
 514:source\fatfs/ff.c **** static BYTE CurrVol;			/* Current drive */
 515:source\fatfs/ff.c **** #endif
 516:source\fatfs/ff.c **** 
 517:source\fatfs/ff.c **** #if _FS_LOCK
 518:source\fatfs/ff.c **** static FILESEM Files[_FS_LOCK];	/* Open object lock semaphores */
 519:source\fatfs/ff.c **** #endif
 520:source\fatfs/ff.c **** 
 521:source\fatfs/ff.c **** #if _USE_LFN == 0			/* Non LFN feature */
 522:source\fatfs/ff.c **** #define	DEFINE_NAMEBUF		BYTE sfn[12]
 523:source\fatfs/ff.c **** #define INIT_BUF(dobj)		(dobj).fn = sfn
 524:source\fatfs/ff.c **** #define	FREE_BUF()
 525:source\fatfs/ff.c **** #else
 526:source\fatfs/ff.c **** #if _MAX_LFN < 12 || _MAX_LFN > 255
 527:source\fatfs/ff.c **** #error Wrong _MAX_LFN setting
 528:source\fatfs/ff.c **** #endif
 529:source\fatfs/ff.c **** #if _USE_LFN == 1			/* LFN feature with static working buffer */
 530:source\fatfs/ff.c **** static WCHAR LfnBuf[_MAX_LFN + 1];
 531:source\fatfs/ff.c **** #define	DEFINE_NAMEBUF		BYTE sfn[12]
 532:source\fatfs/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
 533:source\fatfs/ff.c **** #define	FREE_BUF()
 534:source\fatfs/ff.c **** #elif _USE_LFN == 2 		/* LFN feature with dynamic working buffer on the stack */
 535:source\fatfs/ff.c **** #define	DEFINE_NAMEBUF		BYTE sfn[12]; WCHAR lbuf[_MAX_LFN + 1]
 536:source\fatfs/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
 537:source\fatfs/ff.c **** #define	FREE_BUF()
 538:source\fatfs/ff.c **** #elif _USE_LFN == 3 		/* LFN feature with dynamic working buffer on the heap */
 539:source\fatfs/ff.c **** #define	DEFINE_NAMEBUF		BYTE sfn[12]; WCHAR *lfn
 540:source\fatfs/ff.c **** #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); if (!lfn) LEAVE_FF((dobj).fs, FR_N
 541:source\fatfs/ff.c **** #define	FREE_BUF()			ff_memfree(lfn)
 542:source\fatfs/ff.c **** #else
 543:source\fatfs/ff.c **** #error Wrong _USE_LFN setting
 544:source\fatfs/ff.c **** #endif
 545:source\fatfs/ff.c **** #endif
 546:source\fatfs/ff.c **** 
 547:source\fatfs/ff.c **** #ifdef _EXCVT
 548:source\fatfs/ff.c **** static const BYTE ExCvt[] = _EXCVT;	/* Upper conversion table for extended characters */
 549:source\fatfs/ff.c **** #endif
 550:source\fatfs/ff.c **** 
 551:source\fatfs/ff.c **** 
 552:source\fatfs/ff.c **** 
 553:source\fatfs/ff.c **** 
 554:source\fatfs/ff.c **** 
 555:source\fatfs/ff.c **** 
 556:source\fatfs/ff.c **** /*--------------------------------------------------------------------------
 557:source\fatfs/ff.c **** 
 558:source\fatfs/ff.c ****    Module Private Functions
 559:source\fatfs/ff.c **** 
 560:source\fatfs/ff.c **** ---------------------------------------------------------------------------*/
 561:source\fatfs/ff.c **** DWORD clust2sect (FATFS* fs, DWORD clst);
 562:source\fatfs/ff.c **** DWORD get_fat (FATFS* fs,	DWORD clst);
 563:source\fatfs/ff.c **** 
 564:source\fatfs/ff.c **** #if !_FS_READONLY
 565:source\fatfs/ff.c **** FRESULT put_fat (FATFS* fs,	DWORD clst,	DWORD val);
 566:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
 567:source\fatfs/ff.c **** 
 568:source\fatfs/ff.c **** #if _USE_LFN
 569:source\fatfs/ff.c **** static void gen_numname (BYTE* dst, const BYTE* src, const WCHAR* lfn, UINT seq);
 570:source\fatfs/ff.c **** #endif /* !_USE_LFN */
 571:source\fatfs/ff.c **** 
 572:source\fatfs/ff.c **** 
 573:source\fatfs/ff.c **** 
 574:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 575:source\fatfs/ff.c **** /* String functions                                                      */
 576:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 577:source\fatfs/ff.c **** 
 578:source\fatfs/ff.c **** /* Copy memory to memory */
 579:source\fatfs/ff.c **** static
 580:source\fatfs/ff.c **** void mem_cpy (void* dst, const void* src, UINT cnt) {
  29              		.loc 1 580 53 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 581:source\fatfs/ff.c **** 	BYTE *d = (BYTE*)dst;
  34              		.loc 1 581 2 view .LVU1
 582:source\fatfs/ff.c **** 	const BYTE *s = (const BYTE*)src;
  35              		.loc 1 582 2 view .LVU2
 583:source\fatfs/ff.c **** 
 584:source\fatfs/ff.c **** #if _WORD_ACCESS == 1
 585:source\fatfs/ff.c **** 	while (cnt >= sizeof (int)) {
 586:source\fatfs/ff.c **** 		*(int*)d = *(int*)s;
 587:source\fatfs/ff.c **** 		d += sizeof (int); s += sizeof (int);
 588:source\fatfs/ff.c **** 		cnt -= sizeof (int);
 589:source\fatfs/ff.c **** 	}
 590:source\fatfs/ff.c **** #endif
 591:source\fatfs/ff.c **** 	while (cnt--)
  36              		.loc 1 591 2 view .LVU3
  37              		.loc 1 591 9 view .LVU4
  38              		.loc 1 591 9 is_stmt 0 view .LVU5
  39 0000 0138     		subs	r0, r0, #1
  40              	.LVL1:
  41              		.loc 1 591 9 view .LVU6
  42 0002 0A44     		add	r2, r2, r1
  43              	.LVL2:
  44              	.L2:
 592:source\fatfs/ff.c **** 		*d++ = *s++;
  45              		.loc 1 592 3 is_stmt 1 view .LVU7
  46              		.loc 1 592 10 is_stmt 0 view .LVU8
  47 0004 11F8013B 		ldrb	r3, [r1], #1	@ zero_extendqisi2
  48              	.LVL3:
  49              		.loc 1 592 8 view .LVU9
  50 0008 00F8013F 		strb	r3, [r0, #1]!
 591:source\fatfs/ff.c **** 		*d++ = *s++;
  51              		.loc 1 591 9 is_stmt 1 view .LVU10
 591:source\fatfs/ff.c **** 		*d++ = *s++;
  52              		.loc 1 591 9 is_stmt 0 view .LVU11
  53 000c 9142     		cmp	r1, r2
  54 000e F9D1     		bne	.L2
 593:source\fatfs/ff.c **** }
  55              		.loc 1 593 1 view .LVU12
  56 0010 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE123:
  60              		.section	.text.mem_set,"ax",%progbits
  61              		.align	1
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  66              	mem_set:
  67              	.LVL4:
  68              	.LFB124:
 594:source\fatfs/ff.c **** 
 595:source\fatfs/ff.c **** /* Fill memory */
 596:source\fatfs/ff.c **** static
 597:source\fatfs/ff.c **** void mem_set (void* dst, int val, UINT cnt) {
  69              		.loc 1 597 45 is_stmt 1 view -0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              		@ link register save eliminated.
 598:source\fatfs/ff.c **** 	BYTE *d = (BYTE*)dst;
  74              		.loc 1 598 2 view .LVU14
 599:source\fatfs/ff.c **** 
 600:source\fatfs/ff.c **** 	while (cnt--)
  75              		.loc 1 600 2 view .LVU15
  76              		.loc 1 600 9 view .LVU16
  77              		.loc 1 600 9 is_stmt 0 view .LVU17
  78 0000 0244     		add	r2, r2, r0
  79              	.LVL5:
  80              	.L5:
 601:source\fatfs/ff.c **** 		*d++ = (BYTE)val;
  81              		.loc 1 601 3 is_stmt 1 view .LVU18
  82              		.loc 1 601 10 is_stmt 0 view .LVU19
  83 0002 00F8011B 		strb	r1, [r0], #1
  84              	.LVL6:
 600:source\fatfs/ff.c **** 		*d++ = (BYTE)val;
  85              		.loc 1 600 9 is_stmt 1 view .LVU20
 600:source\fatfs/ff.c **** 		*d++ = (BYTE)val;
  86              		.loc 1 600 9 is_stmt 0 view .LVU21
  87 0006 9042     		cmp	r0, r2
  88 0008 FBD1     		bne	.L5
 602:source\fatfs/ff.c **** }
  89              		.loc 1 602 1 view .LVU22
  90 000a 7047     		bx	lr
  91              		.cfi_endproc
  92              	.LFE124:
  94              		.section	.text.chk_lock,"ax",%progbits
  95              		.align	1
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
 100              	chk_lock:
 101              	.LVL7:
 102              	.LFB127:
 603:source\fatfs/ff.c **** 
 604:source\fatfs/ff.c **** /* Compare memory to memory */
 605:source\fatfs/ff.c **** static
 606:source\fatfs/ff.c **** int mem_cmp (const void* dst, const void* src, UINT cnt) {
 607:source\fatfs/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 608:source\fatfs/ff.c **** 	int r = 0;
 609:source\fatfs/ff.c **** 
 610:source\fatfs/ff.c **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 611:source\fatfs/ff.c **** 	return r;
 612:source\fatfs/ff.c **** }
 613:source\fatfs/ff.c **** 
 614:source\fatfs/ff.c **** /* Check if chr is contained in the string */
 615:source\fatfs/ff.c **** static
 616:source\fatfs/ff.c **** int chk_chr (const char* str, int chr) {
 617:source\fatfs/ff.c **** 	while (*str && *str != chr) str++;
 618:source\fatfs/ff.c **** 	return *str;
 619:source\fatfs/ff.c **** }
 620:source\fatfs/ff.c **** 
 621:source\fatfs/ff.c **** 
 622:source\fatfs/ff.c **** 
 623:source\fatfs/ff.c **** 
 624:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 625:source\fatfs/ff.c **** /* Request/Release grant to access the volume                            */
 626:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 627:source\fatfs/ff.c **** #if _FS_REENTRANT
 628:source\fatfs/ff.c **** static
 629:source\fatfs/ff.c **** int lock_fs (
 630:source\fatfs/ff.c **** 	FATFS* fs		/* File system object */
 631:source\fatfs/ff.c **** )
 632:source\fatfs/ff.c **** {
 633:source\fatfs/ff.c **** 	return ff_req_grant(fs->sobj);
 634:source\fatfs/ff.c **** }
 635:source\fatfs/ff.c **** 
 636:source\fatfs/ff.c **** 
 637:source\fatfs/ff.c **** static
 638:source\fatfs/ff.c **** void unlock_fs (
 639:source\fatfs/ff.c **** 	FATFS* fs,		/* File system object */
 640:source\fatfs/ff.c **** 	FRESULT res		/* Result code to be returned */
 641:source\fatfs/ff.c **** )
 642:source\fatfs/ff.c **** {
 643:source\fatfs/ff.c **** 	if (fs &&
 644:source\fatfs/ff.c **** 		res != FR_NOT_ENABLED &&
 645:source\fatfs/ff.c **** 		res != FR_INVALID_DRIVE &&
 646:source\fatfs/ff.c **** 		res != FR_INVALID_OBJECT &&
 647:source\fatfs/ff.c **** 		res != FR_TIMEOUT) {
 648:source\fatfs/ff.c **** 		ff_rel_grant(fs->sobj);
 649:source\fatfs/ff.c **** 	}
 650:source\fatfs/ff.c **** }
 651:source\fatfs/ff.c **** #endif
 652:source\fatfs/ff.c **** 
 653:source\fatfs/ff.c **** 
 654:source\fatfs/ff.c **** 
 655:source\fatfs/ff.c **** 
 656:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 657:source\fatfs/ff.c **** /* File lock control functions                                           */
 658:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 659:source\fatfs/ff.c **** #if _FS_LOCK
 660:source\fatfs/ff.c **** 
 661:source\fatfs/ff.c **** static
 662:source\fatfs/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 663:source\fatfs/ff.c **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 664:source\fatfs/ff.c **** 	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
 665:source\fatfs/ff.c **** )
 666:source\fatfs/ff.c **** {
 103              		.loc 1 666 1 is_stmt 1 view -0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 667:source\fatfs/ff.c **** 	UINT i, be;
 107              		.loc 1 667 2 view .LVU24
 668:source\fatfs/ff.c **** 
 669:source\fatfs/ff.c **** 	/* Search file semaphore table */
 670:source\fatfs/ff.c **** 	for (i = be = 0; i < _FS_LOCK; i++) {
 108              		.loc 1 670 2 view .LVU25
 109              		.loc 1 670 21 view .LVU26
 671:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 110              		.loc 1 671 3 view .LVU27
 111              		.loc 1 671 15 is_stmt 0 view .LVU28
 112 0000 254B     		ldr	r3, .L33
 666:source\fatfs/ff.c **** 	UINT i, be;
 113              		.loc 1 666 1 view .LVU29
 114 0002 30B5     		push	{r4, r5, lr}
 115              		.cfi_def_cfa_offset 12
 116              		.cfi_offset 4, -12
 117              		.cfi_offset 5, -8
 118              		.cfi_offset 14, -4
 119              		.loc 1 671 15 view .LVU30
 120 0004 1C68     		ldr	r4, [r3]
 666:source\fatfs/ff.c **** 	UINT i, be;
 121              		.loc 1 666 1 view .LVU31
 122 0006 0246     		mov	r2, r0
 123              		.loc 1 671 6 view .LVU32
 124 0008 3CB9     		cbnz	r4, .L8
 125              	.LVL8:
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 126              		.loc 1 670 34 is_stmt 1 view .LVU33
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 127              		.loc 1 670 21 view .LVU34
 128              		.loc 1 671 3 view .LVU35
 129              		.loc 1 671 15 is_stmt 0 view .LVU36
 130 000a D868     		ldr	r0, [r3, #12]
 131              	.LVL9:
 132              		.loc 1 671 6 view .LVU37
 133 000c 90B3     		cbz	r0, .L9
 672:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 134              		.loc 1 672 4 is_stmt 1 view .LVU38
 135              		.loc 1 672 7 is_stmt 0 view .LVU39
 136 000e D2F80052 		ldr	r5, [r2, #512]
 137 0012 A842     		cmp	r0, r5
 138 0014 1DD0     		beq	.L18
 139              	.LVL10:
 140              	.L26:
 673:source\fatfs/ff.c **** 				Files[i].clu == dp->sclust &&
 674:source\fatfs/ff.c **** 				Files[i].idx == dp->index) break;
 675:source\fatfs/ff.c **** 		} else {			/* Blank entry */
 676:source\fatfs/ff.c **** 			be = 1;
 677:source\fatfs/ff.c **** 		}
 678:source\fatfs/ff.c **** 	}
 679:source\fatfs/ff.c **** 	if (i == _FS_LOCK)	/* The object is not opened */
 680:source\fatfs/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 141              		.loc 1 680 35 view .LVU40
 142 0016 0020     		movs	r0, #0
 143 0018 2CE0     		b	.L9
 144              	.LVL11:
 145              	.L8:
 672:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 146              		.loc 1 672 4 is_stmt 1 view .LVU41
 672:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 147              		.loc 1 672 7 is_stmt 0 view .LVU42
 148 001a D0F80052 		ldr	r5, [r0, #512]
 149 001e AC42     		cmp	r4, r5
 150 0020 13D1     		bne	.L11
 672:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 151              		.loc 1 672 30 view .LVU43
 152 0022 5D68     		ldr	r5, [r3, #4]
 153 0024 D0F80802 		ldr	r0, [r0, #520]
 154              	.LVL12:
 672:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 155              		.loc 1 672 30 view .LVU44
 156 0028 8542     		cmp	r5, r0
 157 002a 0AD1     		bne	.L12
 673:source\fatfs/ff.c **** 				Files[i].clu == dp->sclust &&
 158              		.loc 1 673 32 view .LVU45
 159 002c 1D89     		ldrh	r5, [r3, #8]
 160 002e B2F80602 		ldrh	r0, [r2, #518]
 161 0032 8542     		cmp	r5, r0
 162 0034 1FD0     		beq	.L19
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 163              		.loc 1 670 34 is_stmt 1 view .LVU46
 164              	.LVL13:
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 165              		.loc 1 670 21 view .LVU47
 671:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 166              		.loc 1 671 3 view .LVU48
 671:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 167              		.loc 1 671 15 is_stmt 0 view .LVU49
 168 0036 D868     		ldr	r0, [r3, #12]
 671:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 169              		.loc 1 671 6 view .LVU50
 170 0038 E0B1     		cbz	r0, .L9
 672:source\fatfs/ff.c **** 				Files[i].clu == dp->sclust &&
 171              		.loc 1 672 4 is_stmt 1 view .LVU51
 672:source\fatfs/ff.c **** 				Files[i].clu == dp->sclust &&
 172              		.loc 1 672 7 is_stmt 0 view .LVU52
 173 003a A042     		cmp	r0, r4
 174              	.L31:
 672:source\fatfs/ff.c **** 				Files[i].clu == dp->sclust &&
 175              		.loc 1 672 7 view .LVU53
 176 003c 16D1     		bne	.L14
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 177              		.loc 1 670 14 view .LVU54
 178 003e 0020     		movs	r0, #0
 179 0040 08E0     		b	.L10
 180              	.LVL14:
 181              	.L12:
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 182              		.loc 1 670 34 is_stmt 1 view .LVU55
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 183              		.loc 1 670 21 view .LVU56
 671:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 184              		.loc 1 671 3 view .LVU57
 671:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 185              		.loc 1 671 15 is_stmt 0 view .LVU58
 186 0042 D868     		ldr	r0, [r3, #12]
 671:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 187              		.loc 1 671 6 view .LVU59
 188 0044 B0B1     		cbz	r0, .L9
 672:source\fatfs/ff.c **** 				Files[i].clu == dp->sclust &&
 189              		.loc 1 672 4 is_stmt 1 view .LVU60
 672:source\fatfs/ff.c **** 				Files[i].clu == dp->sclust &&
 190              		.loc 1 672 7 is_stmt 0 view .LVU61
 191 0046 8442     		cmp	r4, r0
 192 0048 F8E7     		b	.L31
 193              	.LVL15:
 194              	.L11:
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 195              		.loc 1 670 34 is_stmt 1 view .LVU62
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 196              		.loc 1 670 21 view .LVU63
 671:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 197              		.loc 1 671 3 view .LVU64
 671:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 198              		.loc 1 671 15 is_stmt 0 view .LVU65
 199 004a D868     		ldr	r0, [r3, #12]
 200              	.LVL16:
 671:source\fatfs/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 201              		.loc 1 671 6 view .LVU66
 202 004c 90B1     		cbz	r0, .L9
 672:source\fatfs/ff.c **** 				Files[i].clu == dp->sclust &&
 203              		.loc 1 672 4 is_stmt 1 view .LVU67
 672:source\fatfs/ff.c **** 				Files[i].clu == dp->sclust &&
 204              		.loc 1 672 7 is_stmt 0 view .LVU68
 205 004e A842     		cmp	r0, r5
 206 0050 F4E7     		b	.L31
 207              	.LVL17:
 208              	.L18:
 676:source\fatfs/ff.c **** 		}
 209              		.loc 1 676 7 view .LVU69
 210 0052 0120     		movs	r0, #1
 211              	.LVL18:
 212              	.L10:
 672:source\fatfs/ff.c **** 				Files[i].clu == dp->sclust &&
 213              		.loc 1 672 30 discriminator 1 view .LVU70
 214 0054 1D69     		ldr	r5, [r3, #16]
 215 0056 D2F80842 		ldr	r4, [r2, #520]
 216 005a A542     		cmp	r5, r4
 217 005c 04D1     		bne	.L15
 673:source\fatfs/ff.c **** 				Files[i].idx == dp->index) break;
 218              		.loc 1 673 32 view .LVU71
 219 005e 9C8A     		ldrh	r4, [r3, #20]
 220 0060 B2F80622 		ldrh	r2, [r2, #518]
 221              	.LVL19:
 673:source\fatfs/ff.c **** 				Files[i].idx == dp->index) break;
 222              		.loc 1 673 32 view .LVU72
 223 0064 9442     		cmp	r4, r2
 224 0066 0AD0     		beq	.L25
 225              	.L15:
 226              	.LVL20:
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 227              		.loc 1 670 34 is_stmt 1 discriminator 2 view .LVU73
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 228              		.loc 1 670 21 discriminator 2 view .LVU74
 679:source\fatfs/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 229              		.loc 1 679 2 discriminator 2 view .LVU75
 230              		.loc 1 680 3 discriminator 2 view .LVU76
 231              		.loc 1 680 35 is_stmt 0 discriminator 2 view .LVU77
 232 0068 0028     		cmp	r0, #0
 233 006a D4D1     		bne	.L26
 234              	.LVL21:
 235              	.L14:
 236              		.loc 1 680 35 discriminator 2 view .LVU78
 237 006c 0229     		cmp	r1, #2
 238 006e 14BF     		ite	ne
 239 0070 1220     		movne	r0, #18
 240 0072 0020     		moveq	r0, #0
 241              	.LVL22:
 242              	.L9:
 681:source\fatfs/ff.c **** 
 682:source\fatfs/ff.c **** 	/* The object has been opened. Reject any open against writing file and all write mode open */
 683:source\fatfs/ff.c **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 684:source\fatfs/ff.c **** }
 243              		.loc 1 684 1 view .LVU79
 244 0074 30BD     		pop	{r4, r5, pc}
 245              	.LVL23:
 246              	.L19:
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 247              		.loc 1 670 9 view .LVU80
 248 0076 0022     		movs	r2, #0
 249              	.LVL24:
 250              	.L13:
 679:source\fatfs/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 251              		.loc 1 679 2 is_stmt 1 view .LVU81
 683:source\fatfs/ff.c **** }
 252              		.loc 1 683 2 view .LVU82
 683:source\fatfs/ff.c **** }
 253              		.loc 1 683 52 is_stmt 0 view .LVU83
 254 0078 19B1     		cbz	r1, .L29
 255 007a 1020     		movs	r0, #16
 256 007c FAE7     		b	.L9
 257              	.LVL25:
 258              	.L25:
 670:source\fatfs/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 259              		.loc 1 670 34 view .LVU84
 260 007e 0122     		movs	r2, #1
 261 0080 FAE7     		b	.L13
 262              	.LVL26:
 263              	.L29:
 683:source\fatfs/ff.c **** }
 264              		.loc 1 683 25 discriminator 2 view .LVU85
 265 0082 0C21     		movs	r1, #12
 266              	.LVL27:
 683:source\fatfs/ff.c **** }
 267              		.loc 1 683 25 discriminator 2 view .LVU86
 268 0084 01FB0233 		mla	r3, r1, r2, r3
 683:source\fatfs/ff.c **** }
 269              		.loc 1 683 14 discriminator 2 view .LVU87
 270 0088 5889     		ldrh	r0, [r3, #10]
 271 008a A0F58073 		sub	r3, r0, #256
 272 008e 5842     		rsbs	r0, r3, #0
 273 0090 5841     		adcs	r0, r0, r3
 274 0092 0001     		lsls	r0, r0, #4
 275 0094 EEE7     		b	.L9
 276              	.L34:
 277 0096 00BF     		.align	2
 278              	.L33:
 279 0098 00000000 		.word	Files
 280              		.cfi_endproc
 281              	.LFE127:
 283              		.section	.text.inc_lock,"ax",%progbits
 284              		.align	1
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 289              	inc_lock:
 290              	.LVL28:
 291              	.LFB129:
 685:source\fatfs/ff.c **** 
 686:source\fatfs/ff.c **** 
 687:source\fatfs/ff.c **** static
 688:source\fatfs/ff.c **** int enq_lock (void)	/* Check if an entry is available for a new object */
 689:source\fatfs/ff.c **** {
 690:source\fatfs/ff.c **** 	UINT i;
 691:source\fatfs/ff.c **** 
 692:source\fatfs/ff.c **** 	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 693:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 694:source\fatfs/ff.c **** }
 695:source\fatfs/ff.c **** 
 696:source\fatfs/ff.c **** 
 697:source\fatfs/ff.c **** static
 698:source\fatfs/ff.c **** UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
 699:source\fatfs/ff.c **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
 700:source\fatfs/ff.c **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 701:source\fatfs/ff.c **** )
 702:source\fatfs/ff.c **** {
 292              		.loc 1 702 1 is_stmt 1 view -0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 703:source\fatfs/ff.c **** 	UINT i;
 296              		.loc 1 703 2 view .LVU89
 704:source\fatfs/ff.c **** 
 705:source\fatfs/ff.c **** 
 706:source\fatfs/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 297              		.loc 1 706 2 view .LVU90
 298              		.loc 1 706 16 view .LVU91
 707:source\fatfs/ff.c **** 		if (Files[i].fs == dp->fs &&
 299              		.loc 1 707 15 is_stmt 0 view .LVU92
 300 0000 244A     		ldr	r2, .L49
 702:source\fatfs/ff.c **** 	UINT i;
 301              		.loc 1 702 1 view .LVU93
 302 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 303              		.cfi_def_cfa_offset 20
 304              		.cfi_offset 4, -20
 305              		.cfi_offset 5, -16
 306              		.cfi_offset 6, -12
 307              		.cfi_offset 7, -8
 308              		.cfi_offset 14, -4
 309              		.loc 1 707 15 view .LVU94
 310 0004 1368     		ldr	r3, [r2]
 311              		.loc 1 707 24 view .LVU95
 312 0006 D0F80062 		ldr	r6, [r0, #512]
 313              		.loc 1 707 3 is_stmt 1 view .LVU96
 314              		.loc 1 707 6 is_stmt 0 view .LVU97
 315 000a 9E42     		cmp	r6, r3
 316 000c 09D1     		bne	.L36
 317              		.loc 1 707 29 view .LVU98
 318 000e D0F80852 		ldr	r5, [r0, #520]
 319 0012 5468     		ldr	r4, [r2, #4]
 320 0014 A542     		cmp	r5, r4
 321 0016 04D1     		bne	.L36
 708:source\fatfs/ff.c **** 			Files[i].clu == dp->sclust &&
 322              		.loc 1 708 31 view .LVU99
 323 0018 1589     		ldrh	r5, [r2, #8]
 324 001a B0F80642 		ldrh	r4, [r0, #518]
 325 001e A542     		cmp	r5, r4
 326 0020 1ED0     		beq	.L44
 327              	.L36:
 706:source\fatfs/ff.c **** 		if (Files[i].fs == dp->fs &&
 328              		.loc 1 706 29 is_stmt 1 view .LVU100
 329              	.LVL29:
 706:source\fatfs/ff.c **** 		if (Files[i].fs == dp->fs &&
 330              		.loc 1 706 16 view .LVU101
 707:source\fatfs/ff.c **** 			Files[i].clu == dp->sclust &&
 331              		.loc 1 707 3 view .LVU102
 707:source\fatfs/ff.c **** 			Files[i].clu == dp->sclust &&
 332              		.loc 1 707 15 is_stmt 0 view .LVU103
 333 0022 D468     		ldr	r4, [r2, #12]
 707:source\fatfs/ff.c **** 			Files[i].clu == dp->sclust &&
 334              		.loc 1 707 6 view .LVU104
 335 0024 B442     		cmp	r4, r6
 336 0026 1DD1     		bne	.L38
 707:source\fatfs/ff.c **** 			Files[i].clu == dp->sclust &&
 337              		.loc 1 707 29 discriminator 1 view .LVU105
 338 0028 1769     		ldr	r7, [r2, #16]
 339 002a D0F80852 		ldr	r5, [r0, #520]
 340 002e AF42     		cmp	r7, r5
 341 0030 18D1     		bne	.L38
 342              		.loc 1 708 31 view .LVU106
 343 0032 978A     		ldrh	r7, [r2, #20]
 344 0034 B0F80652 		ldrh	r5, [r0, #518]
 345 0038 AF42     		cmp	r7, r5
 346 003a 13D1     		bne	.L38
 706:source\fatfs/ff.c **** 		if (Files[i].fs == dp->fs &&
 347              		.loc 1 706 29 view .LVU107
 348 003c 0123     		movs	r3, #1
 349              	.LVL30:
 350              	.L37:
 709:source\fatfs/ff.c **** 			Files[i].idx == dp->index) break;
 710:source\fatfs/ff.c **** 	}
 711:source\fatfs/ff.c **** 
 712:source\fatfs/ff.c **** 	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 351              		.loc 1 712 2 is_stmt 1 view .LVU108
 713:source\fatfs/ff.c **** 		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 714:source\fatfs/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 715:source\fatfs/ff.c **** 		Files[i].fs = dp->fs;
 716:source\fatfs/ff.c **** 		Files[i].clu = dp->sclust;
 717:source\fatfs/ff.c **** 		Files[i].idx = dp->index;
 718:source\fatfs/ff.c **** 		Files[i].ctr = 0;
 719:source\fatfs/ff.c **** 	}
 720:source\fatfs/ff.c **** 
 721:source\fatfs/ff.c **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 352              		.loc 1 721 2 view .LVU109
 353              		.loc 1 721 21 is_stmt 0 view .LVU110
 354 003e 0C20     		movs	r0, #12
 355              	.LVL31:
 356              		.loc 1 721 21 view .LVU111
 357 0040 00FB0320 		mla	r0, r0, r3, r2
 358 0044 4089     		ldrh	r0, [r0, #10]
 359              		.loc 1 721 5 view .LVU112
 360 0046 09BB     		cbnz	r1, .L39
 361              	.L40:
 722:source\fatfs/ff.c **** 
 723:source\fatfs/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 362              		.loc 1 723 39 discriminator 1 view .LVU113
 363 0048 0C21     		movs	r1, #12
 364              	.LVL32:
 365              		.loc 1 723 39 discriminator 1 view .LVU114
 366 004a 01FB0321 		mla	r1, r1, r3, r2
 367              		.loc 1 723 15 discriminator 1 view .LVU115
 368 004e 4989     		ldrh	r1, [r1, #10]
 369 0050 0131     		adds	r1, r1, #1
 370 0052 89B2     		uxth	r1, r1
 371              	.L43:
 372              		.loc 1 723 15 discriminator 4 view .LVU116
 373 0054 0C20     		movs	r0, #12
 374 0056 00FB0322 		mla	r2, r0, r3, r2
 724:source\fatfs/ff.c **** 
 725:source\fatfs/ff.c **** 	return i + 1;
 375              		.loc 1 725 11 discriminator 4 view .LVU117
 376 005a 581C     		adds	r0, r3, #1
 723:source\fatfs/ff.c **** 
 377              		.loc 1 723 15 discriminator 4 view .LVU118
 378 005c 5181     		strh	r1, [r2, #10]	@ movhi
 379              		.loc 1 725 2 is_stmt 1 discriminator 4 view .LVU119
 380              	.LVL33:
 381              	.L35:
 726:source\fatfs/ff.c **** }
 382              		.loc 1 726 1 is_stmt 0 view .LVU120
 383 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 384              	.LVL34:
 385              	.L44:
 706:source\fatfs/ff.c **** 		if (Files[i].fs == dp->fs &&
 386              		.loc 1 706 9 view .LVU121
 387 0060 0023     		movs	r3, #0
 388 0062 ECE7     		b	.L37
 389              	.LVL35:
 390              	.L38:
 713:source\fatfs/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 391              		.loc 1 713 28 is_stmt 1 view .LVU122
 392 0064 0BB1     		cbz	r3, .L41
 713:source\fatfs/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 393              		.loc 1 713 45 view .LVU123
 394              	.LVL36:
 713:source\fatfs/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 395              		.loc 1 713 28 view .LVU124
 396 0066 9CB9     		cbnz	r4, .L48
 713:source\fatfs/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 397              		.loc 1 713 45 is_stmt 0 view .LVU125
 398 0068 0123     		movs	r3, #1
 399              	.LVL37:
 400              	.L41:
 715:source\fatfs/ff.c **** 		Files[i].clu = dp->sclust;
 401              		.loc 1 715 3 is_stmt 1 view .LVU126
 715:source\fatfs/ff.c **** 		Files[i].clu = dp->sclust;
 402              		.loc 1 715 15 is_stmt 0 view .LVU127
 403 006a 0C24     		movs	r4, #12
 404 006c 5C43     		muls	r4, r3, r4
 405 006e 1519     		adds	r5, r2, r4
 406 0070 1651     		str	r6, [r2, r4]
 716:source\fatfs/ff.c **** 		Files[i].idx = dp->index;
 407              		.loc 1 716 3 is_stmt 1 view .LVU128
 716:source\fatfs/ff.c **** 		Files[i].idx = dp->index;
 408              		.loc 1 716 16 is_stmt 0 view .LVU129
 409 0072 D0F80842 		ldr	r4, [r0, #520]
 717:source\fatfs/ff.c **** 		Files[i].ctr = 0;
 410              		.loc 1 717 16 view .LVU130
 411 0076 B0F80602 		ldrh	r0, [r0, #518]
 412              	.LVL38:
 717:source\fatfs/ff.c **** 		Files[i].ctr = 0;
 413              		.loc 1 717 16 view .LVU131
 414 007a 2881     		strh	r0, [r5, #8]	@ movhi
 718:source\fatfs/ff.c **** 	}
 415              		.loc 1 718 16 view .LVU132
 416 007c 0020     		movs	r0, #0
 716:source\fatfs/ff.c **** 		Files[i].idx = dp->index;
 417              		.loc 1 716 16 view .LVU133
 418 007e 6C60     		str	r4, [r5, #4]
 717:source\fatfs/ff.c **** 		Files[i].ctr = 0;
 419              		.loc 1 717 3 is_stmt 1 view .LVU134
 718:source\fatfs/ff.c **** 	}
 420              		.loc 1 718 3 view .LVU135
 718:source\fatfs/ff.c **** 	}
 421              		.loc 1 718 16 is_stmt 0 view .LVU136
 422 0080 6881     		strh	r0, [r5, #10]	@ movhi
 423              	.LVL39:
 721:source\fatfs/ff.c **** 
 424              		.loc 1 721 2 is_stmt 1 view .LVU137
 721:source\fatfs/ff.c **** 
 425              		.loc 1 721 5 is_stmt 0 view .LVU138
 426 0082 0029     		cmp	r1, #0
 427 0084 E0D0     		beq	.L40
 428              	.L47:
 723:source\fatfs/ff.c **** 
 429              		.loc 1 723 15 view .LVU139
 430 0086 4FF48071 		mov	r1, #256
 431              	.LVL40:
 723:source\fatfs/ff.c **** 
 432              		.loc 1 723 15 view .LVU140
 433 008a E3E7     		b	.L43
 434              	.LVL41:
 435              	.L39:
 721:source\fatfs/ff.c **** 
 436              		.loc 1 721 10 discriminator 1 view .LVU141
 437 008c 0028     		cmp	r0, #0
 438 008e FAD0     		beq	.L47
 439              	.LVL42:
 440              	.L48:
 714:source\fatfs/ff.c **** 		Files[i].fs = dp->fs;
 441              		.loc 1 714 29 view .LVU142
 442 0090 0020     		movs	r0, #0
 443 0092 E4E7     		b	.L35
 444              	.L50:
 445              		.align	2
 446              	.L49:
 447 0094 00000000 		.word	Files
 448              		.cfi_endproc
 449              	.LFE129:
 451              		.section	.text.dec_lock,"ax",%progbits
 452              		.align	1
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 457              	dec_lock:
 458              	.LVL43:
 459              	.LFB130:
 727:source\fatfs/ff.c **** 
 728:source\fatfs/ff.c **** 
 729:source\fatfs/ff.c **** static
 730:source\fatfs/ff.c **** FRESULT dec_lock (	/* Decrement object open counter */
 731:source\fatfs/ff.c **** 	UINT i			/* Semaphore index (1..) */
 732:source\fatfs/ff.c **** )
 733:source\fatfs/ff.c **** {
 460              		.loc 1 733 1 is_stmt 1 view -0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 0
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464              		@ link register save eliminated.
 734:source\fatfs/ff.c **** 	WORD n;
 465              		.loc 1 734 2 view .LVU144
 735:source\fatfs/ff.c **** 	FRESULT res;
 466              		.loc 1 735 2 view .LVU145
 736:source\fatfs/ff.c **** 
 737:source\fatfs/ff.c **** 
 738:source\fatfs/ff.c **** 	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 467              		.loc 1 738 2 view .LVU146
 468              		.loc 1 738 5 is_stmt 0 view .LVU147
 469 0000 0138     		subs	r0, r0, #1
 470              	.LVL44:
 471              		.loc 1 738 5 view .LVU148
 472 0002 0128     		cmp	r0, #1
 473 0004 17D8     		bhi	.L58
 739:source\fatfs/ff.c **** 		n = Files[i].ctr;
 474              		.loc 1 739 3 is_stmt 1 view .LVU149
 475              		.loc 1 739 5 is_stmt 0 view .LVU150
 476 0006 0D49     		ldr	r1, .L62
 477 0008 0C22     		movs	r2, #12
 478 000a 02FB0012 		mla	r2, r2, r0, r1
 479 000e 5389     		ldrh	r3, [r2, #10]
 480              	.LVL45:
 740:source\fatfs/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 481              		.loc 1 740 3 is_stmt 1 view .LVU151
 482              		.loc 1 740 6 is_stmt 0 view .LVU152
 483 0010 B3F5807F 		cmp	r3, #256
 484 0014 06D1     		bne	.L53
 485              	.LVL46:
 741:source\fatfs/ff.c **** 		if (n) n--;					/* Decrement read mode open count */
 742:source\fatfs/ff.c **** 		Files[i].ctr = n;
 486              		.loc 1 742 3 is_stmt 1 view .LVU153
 487              		.loc 1 742 16 is_stmt 0 view .LVU154
 488 0016 0023     		movs	r3, #0
 489 0018 5381     		strh	r3, [r2, #10]	@ movhi
 743:source\fatfs/ff.c **** 		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 490              		.loc 1 743 3 is_stmt 1 view .LVU155
 491              	.LVL47:
 492              	.L54:
 493              		.loc 1 743 11 discriminator 1 view .LVU156
 494              		.loc 1 743 23 is_stmt 0 discriminator 1 view .LVU157
 495 001a 0C23     		movs	r3, #12
 496 001c 5843     		muls	r0, r3, r0
 497              	.LVL48:
 498              		.loc 1 743 23 discriminator 1 view .LVU158
 499 001e 0023     		movs	r3, #0
 500 0020 0B50     		str	r3, [r1, r0]
 501 0022 06E0     		b	.L57
 502              	.LVL49:
 503              	.L53:
 741:source\fatfs/ff.c **** 		if (n) n--;					/* Decrement read mode open count */
 504              		.loc 1 741 3 is_stmt 1 view .LVU159
 741:source\fatfs/ff.c **** 		if (n) n--;					/* Decrement read mode open count */
 505              		.loc 1 741 6 is_stmt 0 view .LVU160
 506 0024 002B     		cmp	r3, #0
 507 0026 F8D0     		beq	.L54
 741:source\fatfs/ff.c **** 		if (n) n--;					/* Decrement read mode open count */
 508              		.loc 1 741 10 is_stmt 1 discriminator 1 view .LVU161
 741:source\fatfs/ff.c **** 		if (n) n--;					/* Decrement read mode open count */
 509              		.loc 1 741 11 is_stmt 0 discriminator 1 view .LVU162
 510 0028 013B     		subs	r3, r3, #1
 511              	.LVL50:
 741:source\fatfs/ff.c **** 		if (n) n--;					/* Decrement read mode open count */
 512              		.loc 1 741 11 discriminator 1 view .LVU163
 513 002a 9BB2     		uxth	r3, r3
 514              	.LVL51:
 742:source\fatfs/ff.c **** 		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 515              		.loc 1 742 3 is_stmt 1 discriminator 1 view .LVU164
 742:source\fatfs/ff.c **** 		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 516              		.loc 1 742 16 is_stmt 0 discriminator 1 view .LVU165
 517 002c 5381     		strh	r3, [r2, #10]	@ movhi
 518              		.loc 1 743 3 is_stmt 1 discriminator 1 view .LVU166
 519              		.loc 1 743 6 is_stmt 0 discriminator 1 view .LVU167
 520 002e 002B     		cmp	r3, #0
 521 0030 F3D0     		beq	.L54
 522              	.LVL52:
 523              	.L57:
 744:source\fatfs/ff.c **** 		res = FR_OK;
 524              		.loc 1 744 7 view .LVU168
 525 0032 0020     		movs	r0, #0
 526 0034 7047     		bx	lr
 527              	.LVL53:
 528              	.L58:
 745:source\fatfs/ff.c **** 	} else {
 746:source\fatfs/ff.c **** 		res = FR_INT_ERR;			/* Invalid index nunber */
 529              		.loc 1 746 7 view .LVU169
 530 0036 0220     		movs	r0, #2
 531              	.LVL54:
 747:source\fatfs/ff.c **** 	}
 748:source\fatfs/ff.c **** 	return res;
 532              		.loc 1 748 2 is_stmt 1 view .LVU170
 749:source\fatfs/ff.c **** }
 533              		.loc 1 749 1 is_stmt 0 view .LVU171
 534 0038 7047     		bx	lr
 535              	.L63:
 536 003a 00BF     		.align	2
 537              	.L62:
 538 003c 00000000 		.word	Files
 539              		.cfi_endproc
 540              	.LFE130:
 542              		.section	.text.clear_lock,"ax",%progbits
 543              		.align	1
 544              		.syntax unified
 545              		.thumb
 546              		.thumb_func
 548              	clear_lock:
 549              	.LVL55:
 550              	.LFB131:
 750:source\fatfs/ff.c **** 
 751:source\fatfs/ff.c **** 
 752:source\fatfs/ff.c **** static
 753:source\fatfs/ff.c **** void clear_lock (	/* Clear lock entries of the volume */
 754:source\fatfs/ff.c **** 	FATFS *fs
 755:source\fatfs/ff.c **** )
 756:source\fatfs/ff.c **** {
 551              		.loc 1 756 1 is_stmt 1 view -0
 552              		.cfi_startproc
 553              		@ args = 0, pretend = 0, frame = 0
 554              		@ frame_needed = 0, uses_anonymous_args = 0
 555              		@ link register save eliminated.
 757:source\fatfs/ff.c **** 	UINT i;
 556              		.loc 1 757 2 view .LVU173
 758:source\fatfs/ff.c **** 
 759:source\fatfs/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {
 557              		.loc 1 759 2 view .LVU174
 558              		.loc 1 759 16 view .LVU175
 760:source\fatfs/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 559              		.loc 1 760 3 view .LVU176
 560              		.loc 1 760 15 is_stmt 0 view .LVU177
 561 0000 054B     		ldr	r3, .L67
 562              		.loc 1 760 6 view .LVU178
 563 0002 1A68     		ldr	r2, [r3]
 564 0004 9042     		cmp	r0, r2
 565              		.loc 1 760 26 is_stmt 1 view .LVU179
 566              		.loc 1 760 38 is_stmt 0 view .LVU180
 567 0006 04BF     		itt	eq
 568 0008 0022     		moveq	r2, #0
 569 000a 1A60     		streq	r2, [r3]
 759:source\fatfs/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 570              		.loc 1 759 29 is_stmt 1 view .LVU181
 571              	.LVL56:
 759:source\fatfs/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 572              		.loc 1 759 16 view .LVU182
 573              		.loc 1 760 3 view .LVU183
 574              		.loc 1 760 6 is_stmt 0 view .LVU184
 575 000c DA68     		ldr	r2, [r3, #12]
 576 000e 9042     		cmp	r0, r2
 577              		.loc 1 760 26 is_stmt 1 view .LVU185
 578              		.loc 1 760 38 is_stmt 0 view .LVU186
 579 0010 04BF     		itt	eq
 580 0012 0022     		moveq	r2, #0
 581 0014 DA60     		streq	r2, [r3, #12]
 759:source\fatfs/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 582              		.loc 1 759 29 is_stmt 1 view .LVU187
 583              	.LVL57:
 759:source\fatfs/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 584              		.loc 1 759 16 view .LVU188
 761:source\fatfs/ff.c **** 	}
 762:source\fatfs/ff.c **** }
 585              		.loc 1 762 1 is_stmt 0 view .LVU189
 586 0016 7047     		bx	lr
 587              	.L68:
 588              		.align	2
 589              	.L67:
 590 0018 00000000 		.word	Files
 591              		.cfi_endproc
 592              	.LFE131:
 594              		.section	.text.clmt_clust,"ax",%progbits
 595              		.align	1
 596              		.syntax unified
 597              		.thumb
 598              		.thumb_func
 600              	clmt_clust:
 601              	.LVL58:
 602              	.LFB140:
 763:source\fatfs/ff.c **** #endif
 764:source\fatfs/ff.c **** 
 765:source\fatfs/ff.c **** 
 766:source\fatfs/ff.c **** 
 767:source\fatfs/ff.c **** 
 768:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 769:source\fatfs/ff.c **** /* Move/Flush disk access window in the file system object               */
 770:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 771:source\fatfs/ff.c **** #if !_FS_READONLY
 772:source\fatfs/ff.c **** static
 773:source\fatfs/ff.c **** FRESULT sync_window (
 774:source\fatfs/ff.c **** 	FATFS* fs		/* File system object */
 775:source\fatfs/ff.c **** )
 776:source\fatfs/ff.c **** {
 777:source\fatfs/ff.c **** 	DWORD wsect;
 778:source\fatfs/ff.c **** 	UINT nf;
 779:source\fatfs/ff.c **** 	FRESULT res = FR_OK;
 780:source\fatfs/ff.c **** 
 781:source\fatfs/ff.c **** 
 782:source\fatfs/ff.c **** 	if (fs->wflag) {	/* Write back the sector if it is dirty */
 783:source\fatfs/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 784:source\fatfs/ff.c **** 		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 785:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 786:source\fatfs/ff.c **** 		} else {
 787:source\fatfs/ff.c **** 			fs->wflag = 0;
 788:source\fatfs/ff.c **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 789:source\fatfs/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 790:source\fatfs/ff.c **** 					wsect += fs->fsize;
 791:source\fatfs/ff.c **** 					disk_write(fs->drv, fs->win.d8, wsect, 1);
 792:source\fatfs/ff.c **** 				}
 793:source\fatfs/ff.c **** 			}
 794:source\fatfs/ff.c **** 		}
 795:source\fatfs/ff.c **** 	}
 796:source\fatfs/ff.c **** 	return res;
 797:source\fatfs/ff.c **** }
 798:source\fatfs/ff.c **** #endif
 799:source\fatfs/ff.c **** 
 800:source\fatfs/ff.c **** 
 801:source\fatfs/ff.c **** static
 802:source\fatfs/ff.c **** FRESULT move_window (
 803:source\fatfs/ff.c **** 	FATFS* fs,		/* File system object */
 804:source\fatfs/ff.c **** 	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
 805:source\fatfs/ff.c **** )
 806:source\fatfs/ff.c **** {
 807:source\fatfs/ff.c **** 	FRESULT res = FR_OK;
 808:source\fatfs/ff.c **** 
 809:source\fatfs/ff.c **** 
 810:source\fatfs/ff.c **** 	if (sector != fs->winsect) {	/* Window offset changed? */
 811:source\fatfs/ff.c **** #if !_FS_READONLY
 812:source\fatfs/ff.c **** 		res = sync_window(fs);		/* Write-back changes */
 813:source\fatfs/ff.c **** #endif
 814:source\fatfs/ff.c **** 		if (res == FR_OK) {			/* Fill sector window with new data */
 815:source\fatfs/ff.c **** 			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 816:source\fatfs/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 817:source\fatfs/ff.c **** 				res = FR_DISK_ERR;
 818:source\fatfs/ff.c **** 			}
 819:source\fatfs/ff.c **** 			fs->winsect = sector;
 820:source\fatfs/ff.c **** 		}
 821:source\fatfs/ff.c **** 	}
 822:source\fatfs/ff.c **** 	return res;
 823:source\fatfs/ff.c **** }
 824:source\fatfs/ff.c **** 
 825:source\fatfs/ff.c **** 
 826:source\fatfs/ff.c **** 
 827:source\fatfs/ff.c **** 
 828:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 829:source\fatfs/ff.c **** /* Synchronize file system and strage device                             */
 830:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 831:source\fatfs/ff.c **** #if !_FS_READONLY
 832:source\fatfs/ff.c **** static
 833:source\fatfs/ff.c **** FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
 834:source\fatfs/ff.c **** 	FATFS* fs		/* File system object */
 835:source\fatfs/ff.c **** )
 836:source\fatfs/ff.c **** {
 837:source\fatfs/ff.c **** 	FRESULT res;
 838:source\fatfs/ff.c **** 
 839:source\fatfs/ff.c **** 
 840:source\fatfs/ff.c **** 	res = sync_window(fs);
 841:source\fatfs/ff.c **** 	if (res == FR_OK) {
 842:source\fatfs/ff.c **** 		/* Update FSINFO sector if needed */
 843:source\fatfs/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 844:source\fatfs/ff.c **** 			/* Create FSINFO structure */
 845:source\fatfs/ff.c **** 			mem_set(fs->win.d8, 0, SS(fs));
 846:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 847:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 848:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 849:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 850:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 851:source\fatfs/ff.c **** 			/* Write it into the FSINFO sector */
 852:source\fatfs/ff.c **** 			fs->winsect = fs->volbase + 1;
 853:source\fatfs/ff.c **** 			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 854:source\fatfs/ff.c **** 			fs->fsi_flag = 0;
 855:source\fatfs/ff.c **** 		}
 856:source\fatfs/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 857:source\fatfs/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 858:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 859:source\fatfs/ff.c **** 	}
 860:source\fatfs/ff.c **** 
 861:source\fatfs/ff.c **** 	return res;
 862:source\fatfs/ff.c **** }
 863:source\fatfs/ff.c **** #endif
 864:source\fatfs/ff.c **** 
 865:source\fatfs/ff.c **** 
 866:source\fatfs/ff.c **** 
 867:source\fatfs/ff.c **** 
 868:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 869:source\fatfs/ff.c **** /* Get sector# from cluster#                                             */
 870:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 871:source\fatfs/ff.c **** /* Hidden API for hacks and disk tools */
 872:source\fatfs/ff.c **** 
 873:source\fatfs/ff.c **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 874:source\fatfs/ff.c **** 	FATFS* fs,		/* File system object */
 875:source\fatfs/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 876:source\fatfs/ff.c **** )
 877:source\fatfs/ff.c **** {
 878:source\fatfs/ff.c **** 	clst -= 2;
 879:source\fatfs/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 880:source\fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 881:source\fatfs/ff.c **** }
 882:source\fatfs/ff.c **** 
 883:source\fatfs/ff.c **** 
 884:source\fatfs/ff.c **** 
 885:source\fatfs/ff.c **** 
 886:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 887:source\fatfs/ff.c **** /* FAT access - Read value of a FAT entry                                */
 888:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 889:source\fatfs/ff.c **** /* Hidden API for hacks and disk tools */
 890:source\fatfs/ff.c **** 
 891:source\fatfs/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 892:source\fatfs/ff.c **** 	FATFS* fs,	/* File system object */
 893:source\fatfs/ff.c **** 	DWORD clst	/* FAT index number (cluster number) to get the value */
 894:source\fatfs/ff.c **** )
 895:source\fatfs/ff.c **** {
 896:source\fatfs/ff.c **** 	UINT wc, bc;
 897:source\fatfs/ff.c **** 	BYTE *p;
 898:source\fatfs/ff.c **** 	DWORD val;
 899:source\fatfs/ff.c **** 
 900:source\fatfs/ff.c **** 
 901:source\fatfs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 902:source\fatfs/ff.c **** 		val = 1;	/* Internal error */
 903:source\fatfs/ff.c **** 
 904:source\fatfs/ff.c **** 	} else {
 905:source\fatfs/ff.c **** 		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 906:source\fatfs/ff.c **** 
 907:source\fatfs/ff.c **** 		switch (fs->fs_type) {
 908:source\fatfs/ff.c **** 		case FS_FAT12 :
 909:source\fatfs/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
 910:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 911:source\fatfs/ff.c **** 			wc = fs->win.d8[bc++ % SS(fs)];
 912:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 913:source\fatfs/ff.c **** 			wc |= fs->win.d8[bc % SS(fs)] << 8;
 914:source\fatfs/ff.c **** 			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 915:source\fatfs/ff.c **** 			break;
 916:source\fatfs/ff.c **** 
 917:source\fatfs/ff.c **** 		case FS_FAT16 :
 918:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 919:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 920:source\fatfs/ff.c **** 			val = LD_WORD(p);
 921:source\fatfs/ff.c **** 			break;
 922:source\fatfs/ff.c **** 
 923:source\fatfs/ff.c **** 		case FS_FAT32 :
 924:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 925:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 926:source\fatfs/ff.c **** 			val = LD_DWORD(p) & 0x0FFFFFFF;
 927:source\fatfs/ff.c **** 			break;
 928:source\fatfs/ff.c **** 
 929:source\fatfs/ff.c **** 		default:
 930:source\fatfs/ff.c **** 			val = 1;	/* Internal error */
 931:source\fatfs/ff.c **** 		}
 932:source\fatfs/ff.c **** 	}
 933:source\fatfs/ff.c **** 
 934:source\fatfs/ff.c **** 	return val;
 935:source\fatfs/ff.c **** }
 936:source\fatfs/ff.c **** 
 937:source\fatfs/ff.c **** 
 938:source\fatfs/ff.c **** 
 939:source\fatfs/ff.c **** 
 940:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 941:source\fatfs/ff.c **** /* FAT access - Change value of a FAT entry                              */
 942:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 943:source\fatfs/ff.c **** /* Hidden API for hacks and disk tools */
 944:source\fatfs/ff.c **** 
 945:source\fatfs/ff.c **** #if !_FS_READONLY
 946:source\fatfs/ff.c **** FRESULT put_fat (
 947:source\fatfs/ff.c **** 	FATFS* fs,	/* File system object */
 948:source\fatfs/ff.c **** 	DWORD clst,	/* FAT index number (cluster number) to be changed */
 949:source\fatfs/ff.c **** 	DWORD val	/* New value to be set to the entry */
 950:source\fatfs/ff.c **** )
 951:source\fatfs/ff.c **** {
 952:source\fatfs/ff.c **** 	UINT bc;
 953:source\fatfs/ff.c **** 	BYTE *p;
 954:source\fatfs/ff.c **** 	FRESULT res;
 955:source\fatfs/ff.c **** 
 956:source\fatfs/ff.c **** 
 957:source\fatfs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 958:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 959:source\fatfs/ff.c **** 
 960:source\fatfs/ff.c **** 	} else {
 961:source\fatfs/ff.c **** 		switch (fs->fs_type) {
 962:source\fatfs/ff.c **** 		case FS_FAT12 :
 963:source\fatfs/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
 964:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 965:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 966:source\fatfs/ff.c **** 			p = &fs->win.d8[bc++ % SS(fs)];
 967:source\fatfs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 968:source\fatfs/ff.c **** 			fs->wflag = 1;
 969:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 970:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 971:source\fatfs/ff.c **** 			p = &fs->win.d8[bc % SS(fs)];
 972:source\fatfs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 973:source\fatfs/ff.c **** 			fs->wflag = 1;
 974:source\fatfs/ff.c **** 			break;
 975:source\fatfs/ff.c **** 
 976:source\fatfs/ff.c **** 		case FS_FAT16 :
 977:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 978:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 979:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 980:source\fatfs/ff.c **** 			ST_WORD(p, (WORD)val);
 981:source\fatfs/ff.c **** 			fs->wflag = 1;
 982:source\fatfs/ff.c **** 			break;
 983:source\fatfs/ff.c **** 
 984:source\fatfs/ff.c **** 		case FS_FAT32 :
 985:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 986:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 987:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 988:source\fatfs/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 989:source\fatfs/ff.c **** 			ST_DWORD(p, val);
 990:source\fatfs/ff.c **** 			fs->wflag = 1;
 991:source\fatfs/ff.c **** 			break;
 992:source\fatfs/ff.c **** 
 993:source\fatfs/ff.c **** 		default :
 994:source\fatfs/ff.c **** 			res = FR_INT_ERR;
 995:source\fatfs/ff.c **** 		}
 996:source\fatfs/ff.c **** 	}
 997:source\fatfs/ff.c **** 
 998:source\fatfs/ff.c **** 	return res;
 999:source\fatfs/ff.c **** }
1000:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
1001:source\fatfs/ff.c **** 
1002:source\fatfs/ff.c **** 
1003:source\fatfs/ff.c **** 
1004:source\fatfs/ff.c **** 
1005:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1006:source\fatfs/ff.c **** /* FAT handling - Remove a cluster chain                                 */
1007:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1008:source\fatfs/ff.c **** #if !_FS_READONLY
1009:source\fatfs/ff.c **** static
1010:source\fatfs/ff.c **** FRESULT remove_chain (
1011:source\fatfs/ff.c **** 	FATFS* fs,			/* File system object */
1012:source\fatfs/ff.c **** 	DWORD clst			/* Cluster# to remove a chain from */
1013:source\fatfs/ff.c **** )
1014:source\fatfs/ff.c **** {
1015:source\fatfs/ff.c **** 	FRESULT res;
1016:source\fatfs/ff.c **** 	DWORD nxt;
1017:source\fatfs/ff.c **** #if _USE_TRIM
1018:source\fatfs/ff.c **** 	DWORD scl = clst, ecl = clst, rt[2];
1019:source\fatfs/ff.c **** #endif
1020:source\fatfs/ff.c **** 
1021:source\fatfs/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
1022:source\fatfs/ff.c **** 		res = FR_INT_ERR;
1023:source\fatfs/ff.c **** 
1024:source\fatfs/ff.c **** 	} else {
1025:source\fatfs/ff.c **** 		res = FR_OK;
1026:source\fatfs/ff.c **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
1027:source\fatfs/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
1028:source\fatfs/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
1029:source\fatfs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
1030:source\fatfs/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
1031:source\fatfs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
1032:source\fatfs/ff.c **** 			if (res != FR_OK) break;
1033:source\fatfs/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
1034:source\fatfs/ff.c **** 				fs->free_clust++;
1035:source\fatfs/ff.c **** 				fs->fsi_flag |= 1;
1036:source\fatfs/ff.c **** 			}
1037:source\fatfs/ff.c **** #if _USE_TRIM
1038:source\fatfs/ff.c **** 			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1039:source\fatfs/ff.c **** 				ecl = nxt;
1040:source\fatfs/ff.c **** 			} else {				/* End of contiguous clusters */ 
1041:source\fatfs/ff.c **** 				rt[0] = clust2sect(fs, scl);					/* Start sector */
1042:source\fatfs/ff.c **** 				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
1043:source\fatfs/ff.c **** 				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
1044:source\fatfs/ff.c **** 				scl = ecl = nxt;
1045:source\fatfs/ff.c **** 			}
1046:source\fatfs/ff.c **** #endif
1047:source\fatfs/ff.c **** 			clst = nxt;	/* Next cluster */
1048:source\fatfs/ff.c **** 		}
1049:source\fatfs/ff.c **** 	}
1050:source\fatfs/ff.c **** 
1051:source\fatfs/ff.c **** 	return res;
1052:source\fatfs/ff.c **** }
1053:source\fatfs/ff.c **** #endif
1054:source\fatfs/ff.c **** 
1055:source\fatfs/ff.c **** 
1056:source\fatfs/ff.c **** 
1057:source\fatfs/ff.c **** 
1058:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1059:source\fatfs/ff.c **** /* FAT handling - Stretch or Create a cluster chain                      */
1060:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1061:source\fatfs/ff.c **** #if !_FS_READONLY
1062:source\fatfs/ff.c **** static
1063:source\fatfs/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
1064:source\fatfs/ff.c **** 	FATFS* fs,			/* File system object */
1065:source\fatfs/ff.c **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
1066:source\fatfs/ff.c **** )
1067:source\fatfs/ff.c **** {
1068:source\fatfs/ff.c **** 	DWORD cs, ncl, scl;
1069:source\fatfs/ff.c **** 	FRESULT res;
1070:source\fatfs/ff.c **** 
1071:source\fatfs/ff.c **** 
1072:source\fatfs/ff.c **** 	if (clst == 0) {		/* Create a new chain */
1073:source\fatfs/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
1074:source\fatfs/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
1075:source\fatfs/ff.c **** 	}
1076:source\fatfs/ff.c **** 	else {					/* Stretch the current chain */
1077:source\fatfs/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
1078:source\fatfs/ff.c **** 		if (cs < 2) return 1;			/* Invalid value */
1079:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
1080:source\fatfs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1081:source\fatfs/ff.c **** 		scl = clst;
1082:source\fatfs/ff.c **** 	}
1083:source\fatfs/ff.c **** 
1084:source\fatfs/ff.c **** 	ncl = scl;				/* Start cluster */
1085:source\fatfs/ff.c **** 	for (;;) {
1086:source\fatfs/ff.c **** 		ncl++;							/* Next cluster */
1087:source\fatfs/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Check wrap around */
1088:source\fatfs/ff.c **** 			ncl = 2;
1089:source\fatfs/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
1090:source\fatfs/ff.c **** 		}
1091:source\fatfs/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
1092:source\fatfs/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
1093:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
1094:source\fatfs/ff.c **** 			return cs;
1095:source\fatfs/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
1096:source\fatfs/ff.c **** 	}
1097:source\fatfs/ff.c **** 
1098:source\fatfs/ff.c **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
1099:source\fatfs/ff.c **** 	if (res == FR_OK && clst != 0) {
1100:source\fatfs/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
1101:source\fatfs/ff.c **** 	}
1102:source\fatfs/ff.c **** 	if (res == FR_OK) {
1103:source\fatfs/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
1104:source\fatfs/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
1105:source\fatfs/ff.c **** 			fs->free_clust--;
1106:source\fatfs/ff.c **** 			fs->fsi_flag |= 1;
1107:source\fatfs/ff.c **** 		}
1108:source\fatfs/ff.c **** 	} else {
1109:source\fatfs/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1110:source\fatfs/ff.c **** 	}
1111:source\fatfs/ff.c **** 
1112:source\fatfs/ff.c **** 	return ncl;		/* Return new cluster number or error code */
1113:source\fatfs/ff.c **** }
1114:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
1115:source\fatfs/ff.c **** 
1116:source\fatfs/ff.c **** 
1117:source\fatfs/ff.c **** 
1118:source\fatfs/ff.c **** 
1119:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1120:source\fatfs/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1121:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1122:source\fatfs/ff.c **** 
1123:source\fatfs/ff.c **** #if _USE_FASTSEEK
1124:source\fatfs/ff.c **** static
1125:source\fatfs/ff.c **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1126:source\fatfs/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1127:source\fatfs/ff.c **** 	DWORD ofs		/* File offset to be converted to cluster# */
1128:source\fatfs/ff.c **** )
1129:source\fatfs/ff.c **** {
 603              		.loc 1 1129 1 is_stmt 1 view -0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              		@ link register save eliminated.
1130:source\fatfs/ff.c **** 	DWORD cl, ncl, *tbl;
 608              		.loc 1 1130 2 view .LVU191
1131:source\fatfs/ff.c **** 
1132:source\fatfs/ff.c **** 
1133:source\fatfs/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
 609              		.loc 1 1133 2 view .LVU192
 610              		.loc 1 1133 6 is_stmt 0 view .LVU193
 611 0000 D0F82432 		ldr	r3, [r0, #548]
1134:source\fatfs/ff.c **** 	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 612              		.loc 1 1134 32 view .LVU194
 613 0004 D0F80022 		ldr	r2, [r0, #512]
1133:source\fatfs/ff.c **** 	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 614              		.loc 1 1133 6 view .LVU195
 615 0008 0433     		adds	r3, r3, #4
 616              	.LVL59:
 617              		.loc 1 1134 2 is_stmt 1 view .LVU196
 618              		.loc 1 1134 32 is_stmt 0 view .LVU197
 619 000a 92F80222 		ldrb	r2, [r2, #514]	@ zero_extendqisi2
 620              		.loc 1 1134 11 view .LVU198
 621 000e 490A     		lsrs	r1, r1, #9
 622              	.LVL60:
 623              		.loc 1 1134 5 view .LVU199
 624 0010 B1FBF2F1 		udiv	r1, r1, r2
 625              	.LVL61:
 626              	.L72:
1135:source\fatfs/ff.c **** 	for (;;) {
 627              		.loc 1 1135 2 is_stmt 1 view .LVU200
1136:source\fatfs/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
 628              		.loc 1 1136 3 view .LVU201
 629              		.loc 1 1136 7 is_stmt 0 view .LVU202
 630 0014 1868     		ldr	r0, [r3]
 631              	.LVL62:
1137:source\fatfs/ff.c **** 		if (!ncl) return 0;		/* End of table? (error) */
 632              		.loc 1 1137 3 is_stmt 1 view .LVU203
 633              		.loc 1 1137 6 is_stmt 0 view .LVU204
 634 0016 30B1     		cbz	r0, .L69
1138:source\fatfs/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
 635              		.loc 1 1138 3 is_stmt 1 view .LVU205
 636              		.loc 1 1138 6 is_stmt 0 view .LVU206
 637 0018 8142     		cmp	r1, r0
 638 001a 02D3     		bcc	.L71
1139:source\fatfs/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
 639              		.loc 1 1139 3 is_stmt 1 view .LVU207
 640              		.loc 1 1139 6 is_stmt 0 view .LVU208
 641 001c 091A     		subs	r1, r1, r0
 642              	.LVL63:
 643              		.loc 1 1139 14 is_stmt 1 view .LVU209
 644              		.loc 1 1139 17 is_stmt 0 view .LVU210
 645 001e 0833     		adds	r3, r3, #8
 646              	.LVL64:
1135:source\fatfs/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
 647              		.loc 1 1135 2 is_stmt 1 view .LVU211
1136:source\fatfs/ff.c **** 		if (!ncl) return 0;		/* End of table? (error) */
 648              		.loc 1 1136 7 is_stmt 0 view .LVU212
 649 0020 F8E7     		b	.L72
 650              	.LVL65:
 651              	.L71:
1140:source\fatfs/ff.c **** 	}
1141:source\fatfs/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
 652              		.loc 1 1141 2 is_stmt 1 view .LVU213
 653              		.loc 1 1141 12 is_stmt 0 view .LVU214
 654 0022 5868     		ldr	r0, [r3, #4]
 655              	.LVL66:
 656              		.loc 1 1141 12 view .LVU215
 657 0024 0844     		add	r0, r0, r1
 658              	.L69:
1142:source\fatfs/ff.c **** }
 659              		.loc 1 1142 1 view .LVU216
 660 0026 7047     		bx	lr
 661              		.cfi_endproc
 662              	.LFE140:
 664              		.section	.text.sum_sfn,"ax",%progbits
 665              		.align	1
 666              		.syntax unified
 667              		.thumb
 668              		.thumb_func
 670              	sum_sfn:
 671              	.LVL67:
 672              	.LFB150:
1143:source\fatfs/ff.c **** #endif	/* _USE_FASTSEEK */
1144:source\fatfs/ff.c **** 
1145:source\fatfs/ff.c **** 
1146:source\fatfs/ff.c **** 
1147:source\fatfs/ff.c **** 
1148:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1149:source\fatfs/ff.c **** /* Directory handling - Set directory index                              */
1150:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1151:source\fatfs/ff.c **** 
1152:source\fatfs/ff.c **** static
1153:source\fatfs/ff.c **** FRESULT dir_sdi (
1154:source\fatfs/ff.c **** 	DIR* dp,		/* Pointer to directory object */
1155:source\fatfs/ff.c **** 	UINT idx		/* Index of directory table */
1156:source\fatfs/ff.c **** )
1157:source\fatfs/ff.c **** {
1158:source\fatfs/ff.c **** 	DWORD clst, sect;
1159:source\fatfs/ff.c **** 	UINT ic;
1160:source\fatfs/ff.c **** 
1161:source\fatfs/ff.c **** 
1162:source\fatfs/ff.c **** 	dp->index = (WORD)idx;	/* Current index */
1163:source\fatfs/ff.c **** 	clst = dp->sclust;		/* Table start cluster (0:root) */
1164:source\fatfs/ff.c **** 	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
1165:source\fatfs/ff.c **** 		return FR_INT_ERR;
1166:source\fatfs/ff.c **** 	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
1167:source\fatfs/ff.c **** 		clst = dp->fs->dirbase;
1168:source\fatfs/ff.c **** 
1169:source\fatfs/ff.c **** 	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
1170:source\fatfs/ff.c **** 		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
1171:source\fatfs/ff.c **** 			return FR_INT_ERR;
1172:source\fatfs/ff.c **** 		sect = dp->fs->dirbase;
1173:source\fatfs/ff.c **** 	}
1174:source\fatfs/ff.c **** 	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
1175:source\fatfs/ff.c **** 		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
1176:source\fatfs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
1177:source\fatfs/ff.c **** 			clst = get_fat(dp->fs, clst);				/* Get next cluster */
1178:source\fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1179:source\fatfs/ff.c **** 			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
1180:source\fatfs/ff.c **** 				return FR_INT_ERR;
1181:source\fatfs/ff.c **** 			idx -= ic;
1182:source\fatfs/ff.c **** 		}
1183:source\fatfs/ff.c **** 		sect = clust2sect(dp->fs, clst);
1184:source\fatfs/ff.c **** 	}
1185:source\fatfs/ff.c **** 	dp->clust = clst;	/* Current cluster# */
1186:source\fatfs/ff.c **** 	if (!sect) return FR_INT_ERR;
1187:source\fatfs/ff.c **** 	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
1188:source\fatfs/ff.c **** 	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the se
1189:source\fatfs/ff.c **** 
1190:source\fatfs/ff.c **** 	return FR_OK;
1191:source\fatfs/ff.c **** }
1192:source\fatfs/ff.c **** 
1193:source\fatfs/ff.c **** 
1194:source\fatfs/ff.c **** 
1195:source\fatfs/ff.c **** 
1196:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1197:source\fatfs/ff.c **** /* Directory handling - Move directory table index next                  */
1198:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1199:source\fatfs/ff.c **** 
1200:source\fatfs/ff.c **** static
1201:source\fatfs/ff.c **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
1202:source\fatfs/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1203:source\fatfs/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1204:source\fatfs/ff.c **** )
1205:source\fatfs/ff.c **** {
1206:source\fatfs/ff.c **** 	DWORD clst;
1207:source\fatfs/ff.c **** 	UINT i;
1208:source\fatfs/ff.c **** #if !_FS_READONLY
1209:source\fatfs/ff.c **** 	UINT c;
1210:source\fatfs/ff.c **** #endif
1211:source\fatfs/ff.c **** 
1212:source\fatfs/ff.c **** 
1213:source\fatfs/ff.c **** 	i = dp->index + 1;
1214:source\fatfs/ff.c **** 	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
1215:source\fatfs/ff.c **** 		return FR_NO_FILE;
1216:source\fatfs/ff.c **** 
1217:source\fatfs/ff.c **** 	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
1218:source\fatfs/ff.c **** 		dp->sect++;					/* Next sector */
1219:source\fatfs/ff.c **** 
1220:source\fatfs/ff.c **** 		if (!dp->clust) {		/* Static table */
1221:source\fatfs/ff.c **** 			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
1222:source\fatfs/ff.c **** 				return FR_NO_FILE;
1223:source\fatfs/ff.c **** 		}
1224:source\fatfs/ff.c **** 		else {					/* Dynamic table */
1225:source\fatfs/ff.c **** 			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
1226:source\fatfs/ff.c **** 				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
1227:source\fatfs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
1228:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1229:source\fatfs/ff.c **** 				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
1230:source\fatfs/ff.c **** #if !_FS_READONLY
1231:source\fatfs/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
1232:source\fatfs/ff.c **** 					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
1233:source\fatfs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1234:source\fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
1235:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1236:source\fatfs/ff.c **** 					/* Clean-up stretched table */
1237:source\fatfs/ff.c **** 					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
1238:source\fatfs/ff.c **** 					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
1239:source\fatfs/ff.c **** 					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
1240:source\fatfs/ff.c **** 					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
1241:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
1242:source\fatfs/ff.c **** 						if (sync_window(dp->fs)) return FR_DISK_ERR;
1243:source\fatfs/ff.c **** 						dp->fs->winsect++;
1244:source\fatfs/ff.c **** 					}
1245:source\fatfs/ff.c **** 					dp->fs->winsect -= c;						/* Rewind window offset */
1246:source\fatfs/ff.c **** #else
1247:source\fatfs/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warni
1248:source\fatfs/ff.c **** 					return FR_NO_FILE;							/* Report EOT */
1249:source\fatfs/ff.c **** #endif
1250:source\fatfs/ff.c **** 				}
1251:source\fatfs/ff.c **** 				dp->clust = clst;				/* Initialize data for new cluster */
1252:source\fatfs/ff.c **** 				dp->sect = clust2sect(dp->fs, clst);
1253:source\fatfs/ff.c **** 			}
1254:source\fatfs/ff.c **** 		}
1255:source\fatfs/ff.c **** 	}
1256:source\fatfs/ff.c **** 
1257:source\fatfs/ff.c **** 	dp->index = (WORD)i;	/* Current index */
1258:source\fatfs/ff.c **** 	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window 
1259:source\fatfs/ff.c **** 
1260:source\fatfs/ff.c **** 	return FR_OK;
1261:source\fatfs/ff.c **** }
1262:source\fatfs/ff.c **** 
1263:source\fatfs/ff.c **** 
1264:source\fatfs/ff.c **** 
1265:source\fatfs/ff.c **** 
1266:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1267:source\fatfs/ff.c **** /* Directory handling - Reserve directory entry                          */
1268:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1269:source\fatfs/ff.c **** 
1270:source\fatfs/ff.c **** #if !_FS_READONLY
1271:source\fatfs/ff.c **** static
1272:source\fatfs/ff.c **** FRESULT dir_alloc (
1273:source\fatfs/ff.c **** 	DIR* dp,	/* Pointer to the directory object */
1274:source\fatfs/ff.c **** 	UINT nent	/* Number of contiguous entries to allocate (1-21) */
1275:source\fatfs/ff.c **** )
1276:source\fatfs/ff.c **** {
1277:source\fatfs/ff.c **** 	FRESULT res;
1278:source\fatfs/ff.c **** 	UINT n;
1279:source\fatfs/ff.c **** 
1280:source\fatfs/ff.c **** 
1281:source\fatfs/ff.c **** 	res = dir_sdi(dp, 0);
1282:source\fatfs/ff.c **** 	if (res == FR_OK) {
1283:source\fatfs/ff.c **** 		n = 0;
1284:source\fatfs/ff.c **** 		do {
1285:source\fatfs/ff.c **** 			res = move_window(dp->fs, dp->sect);
1286:source\fatfs/ff.c **** 			if (res != FR_OK) break;
1287:source\fatfs/ff.c **** 			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
1288:source\fatfs/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
1289:source\fatfs/ff.c **** 			} else {
1290:source\fatfs/ff.c **** 				n = 0;					/* Not a blank entry. Restart to search */
1291:source\fatfs/ff.c **** 			}
1292:source\fatfs/ff.c **** 			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
1293:source\fatfs/ff.c **** 		} while (res == FR_OK);
1294:source\fatfs/ff.c **** 	}
1295:source\fatfs/ff.c **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1296:source\fatfs/ff.c **** 	return res;
1297:source\fatfs/ff.c **** }
1298:source\fatfs/ff.c **** #endif
1299:source\fatfs/ff.c **** 
1300:source\fatfs/ff.c **** 
1301:source\fatfs/ff.c **** 
1302:source\fatfs/ff.c **** 
1303:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1304:source\fatfs/ff.c **** /* Directory handling - Load/Store start cluster number                  */
1305:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1306:source\fatfs/ff.c **** 
1307:source\fatfs/ff.c **** static
1308:source\fatfs/ff.c **** DWORD ld_clust (
1309:source\fatfs/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
1310:source\fatfs/ff.c **** 	BYTE* dir	/* Pointer to the directory entry */
1311:source\fatfs/ff.c **** )
1312:source\fatfs/ff.c **** {
1313:source\fatfs/ff.c **** 	DWORD cl;
1314:source\fatfs/ff.c **** 
1315:source\fatfs/ff.c **** 	cl = LD_WORD(dir + DIR_FstClusLO);
1316:source\fatfs/ff.c **** 	if (fs->fs_type == FS_FAT32)
1317:source\fatfs/ff.c **** 		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
1318:source\fatfs/ff.c **** 
1319:source\fatfs/ff.c **** 	return cl;
1320:source\fatfs/ff.c **** }
1321:source\fatfs/ff.c **** 
1322:source\fatfs/ff.c **** 
1323:source\fatfs/ff.c **** #if !_FS_READONLY
1324:source\fatfs/ff.c **** static
1325:source\fatfs/ff.c **** void st_clust (
1326:source\fatfs/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
1327:source\fatfs/ff.c **** 	DWORD cl	/* Value to be set */
1328:source\fatfs/ff.c **** )
1329:source\fatfs/ff.c **** {
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusLO, cl);
1331:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
1332:source\fatfs/ff.c **** }
1333:source\fatfs/ff.c **** #endif
1334:source\fatfs/ff.c **** 
1335:source\fatfs/ff.c **** 
1336:source\fatfs/ff.c **** 
1337:source\fatfs/ff.c **** 
1338:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1339:source\fatfs/ff.c **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
1340:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1341:source\fatfs/ff.c **** #if _USE_LFN
1342:source\fatfs/ff.c **** static
1343:source\fatfs/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN characters in the direc
1344:source\fatfs/ff.c **** 
1345:source\fatfs/ff.c **** 
1346:source\fatfs/ff.c **** static
1347:source\fatfs/ff.c **** int cmp_lfn (			/* 1:Matched, 0:Not matched */
1348:source\fatfs/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
1349:source\fatfs/ff.c **** 	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
1350:source\fatfs/ff.c **** )
1351:source\fatfs/ff.c **** {
1352:source\fatfs/ff.c **** 	UINT i, s;
1353:source\fatfs/ff.c **** 	WCHAR wc, uc;
1354:source\fatfs/ff.c **** 
1355:source\fatfs/ff.c **** 
1356:source\fatfs/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
1357:source\fatfs/ff.c **** 	s = 0; wc = 1;
1358:source\fatfs/ff.c **** 	do {
1359:source\fatfs/ff.c **** 		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
1360:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
1361:source\fatfs/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
1362:source\fatfs/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
1363:source\fatfs/ff.c **** 				return 0;				/* Not matched */
1364:source\fatfs/ff.c **** 		} else {
1365:source\fatfs/ff.c **** 			if (uc != 0xFFFF) return 0;	/* Check filler */
1366:source\fatfs/ff.c **** 		}
1367:source\fatfs/ff.c **** 	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
1368:source\fatfs/ff.c **** 
1369:source\fatfs/ff.c **** 	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
1370:source\fatfs/ff.c **** 		return 0;
1371:source\fatfs/ff.c **** 
1372:source\fatfs/ff.c **** 	return 1;						/* The part of LFN matched */
1373:source\fatfs/ff.c **** }
1374:source\fatfs/ff.c **** 
1375:source\fatfs/ff.c **** 
1376:source\fatfs/ff.c **** 
1377:source\fatfs/ff.c **** static
1378:source\fatfs/ff.c **** int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
1379:source\fatfs/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
1380:source\fatfs/ff.c **** 	BYTE* dir			/* Pointer to the directory entry */
1381:source\fatfs/ff.c **** )
1382:source\fatfs/ff.c **** {
1383:source\fatfs/ff.c **** 	UINT i, s;
1384:source\fatfs/ff.c **** 	WCHAR wc, uc;
1385:source\fatfs/ff.c **** 
1386:source\fatfs/ff.c **** 
1387:source\fatfs/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1388:source\fatfs/ff.c **** 
1389:source\fatfs/ff.c **** 	s = 0; wc = 1;
1390:source\fatfs/ff.c **** 	do {
1391:source\fatfs/ff.c **** 		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
1392:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
1393:source\fatfs/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1394:source\fatfs/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1395:source\fatfs/ff.c **** 		} else {
1396:source\fatfs/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1397:source\fatfs/ff.c **** 		}
1398:source\fatfs/ff.c **** 	} while (++s < 13);						/* Read all character in the entry */
1399:source\fatfs/ff.c **** 
1400:source\fatfs/ff.c **** 	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
1401:source\fatfs/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1402:source\fatfs/ff.c **** 		lfnbuf[i] = 0;
1403:source\fatfs/ff.c **** 	}
1404:source\fatfs/ff.c **** 
1405:source\fatfs/ff.c **** 	return 1;
1406:source\fatfs/ff.c **** }
1407:source\fatfs/ff.c **** 
1408:source\fatfs/ff.c **** 
1409:source\fatfs/ff.c **** #if !_FS_READONLY
1410:source\fatfs/ff.c **** static
1411:source\fatfs/ff.c **** void fit_lfn (
1412:source\fatfs/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
1413:source\fatfs/ff.c **** 	BYTE* dir,				/* Pointer to the directory entry */
1414:source\fatfs/ff.c **** 	BYTE ord,				/* LFN order (1-20) */
1415:source\fatfs/ff.c **** 	BYTE sum				/* SFN sum */
1416:source\fatfs/ff.c **** )
1417:source\fatfs/ff.c **** {
1418:source\fatfs/ff.c **** 	UINT i, s;
1419:source\fatfs/ff.c **** 	WCHAR wc;
1420:source\fatfs/ff.c **** 
1421:source\fatfs/ff.c **** 
1422:source\fatfs/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
1423:source\fatfs/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1424:source\fatfs/ff.c **** 	dir[LDIR_Type] = 0;
1425:source\fatfs/ff.c **** 	ST_WORD(dir + LDIR_FstClusLO, 0);
1426:source\fatfs/ff.c **** 
1427:source\fatfs/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
1428:source\fatfs/ff.c **** 	s = wc = 0;
1429:source\fatfs/ff.c **** 	do {
1430:source\fatfs/ff.c **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
1431:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
1432:source\fatfs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
1433:source\fatfs/ff.c **** 	} while (++s < 13);
1434:source\fatfs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
1435:source\fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1436:source\fatfs/ff.c **** }
1437:source\fatfs/ff.c **** 
1438:source\fatfs/ff.c **** #endif
1439:source\fatfs/ff.c **** #endif
1440:source\fatfs/ff.c **** 
1441:source\fatfs/ff.c **** 
1442:source\fatfs/ff.c **** 
1443:source\fatfs/ff.c **** 
1444:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1445:source\fatfs/ff.c **** /* Create numbered name                                                  */
1446:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1447:source\fatfs/ff.c **** #if _USE_LFN
1448:source\fatfs/ff.c **** static
1449:source\fatfs/ff.c **** void gen_numname (
1450:source\fatfs/ff.c **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
1451:source\fatfs/ff.c **** 	const BYTE* src,	/* Pointer to SFN */
1452:source\fatfs/ff.c **** 	const WCHAR* lfn,	/* Pointer to LFN */
1453:source\fatfs/ff.c **** 	UINT seq			/* Sequence number */
1454:source\fatfs/ff.c **** )
1455:source\fatfs/ff.c **** {
1456:source\fatfs/ff.c **** 	BYTE ns[8], c;
1457:source\fatfs/ff.c **** 	UINT i, j;
1458:source\fatfs/ff.c **** 	WCHAR wc;
1459:source\fatfs/ff.c **** 	DWORD sr;
1460:source\fatfs/ff.c **** 
1461:source\fatfs/ff.c **** 
1462:source\fatfs/ff.c **** 	mem_cpy(dst, src, 11);
1463:source\fatfs/ff.c **** 
1464:source\fatfs/ff.c **** 	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
1465:source\fatfs/ff.c **** 		sr = seq;
1466:source\fatfs/ff.c **** 		while (*lfn) {	/* Create a CRC */
1467:source\fatfs/ff.c **** 			wc = *lfn++;
1468:source\fatfs/ff.c **** 			for (i = 0; i < 16; i++) {
1469:source\fatfs/ff.c **** 				sr = (sr << 1) + (wc & 1);
1470:source\fatfs/ff.c **** 				wc >>= 1;
1471:source\fatfs/ff.c **** 				if (sr & 0x10000) sr ^= 0x11021;
1472:source\fatfs/ff.c **** 			}
1473:source\fatfs/ff.c **** 		}
1474:source\fatfs/ff.c **** 		seq = (UINT)sr;
1475:source\fatfs/ff.c **** 	}
1476:source\fatfs/ff.c **** 
1477:source\fatfs/ff.c **** 	/* itoa (hexdecimal) */
1478:source\fatfs/ff.c **** 	i = 7;
1479:source\fatfs/ff.c **** 	do {
1480:source\fatfs/ff.c **** 		c = (seq % 16) + '0';
1481:source\fatfs/ff.c **** 		if (c > '9') c += 7;
1482:source\fatfs/ff.c **** 		ns[i--] = c;
1483:source\fatfs/ff.c **** 		seq /= 16;
1484:source\fatfs/ff.c **** 	} while (seq);
1485:source\fatfs/ff.c **** 	ns[i] = '~';
1486:source\fatfs/ff.c **** 
1487:source\fatfs/ff.c **** 	/* Append the number */
1488:source\fatfs/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1489:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
1490:source\fatfs/ff.c **** 			if (j == i - 1) break;
1491:source\fatfs/ff.c **** 			j++;
1492:source\fatfs/ff.c **** 		}
1493:source\fatfs/ff.c **** 	}
1494:source\fatfs/ff.c **** 	do {
1495:source\fatfs/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1496:source\fatfs/ff.c **** 	} while (j < 8);
1497:source\fatfs/ff.c **** }
1498:source\fatfs/ff.c **** #endif
1499:source\fatfs/ff.c **** 
1500:source\fatfs/ff.c **** 
1501:source\fatfs/ff.c **** 
1502:source\fatfs/ff.c **** 
1503:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1504:source\fatfs/ff.c **** /* Calculate sum of an SFN                                               */
1505:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1506:source\fatfs/ff.c **** #if _USE_LFN
1507:source\fatfs/ff.c **** static
1508:source\fatfs/ff.c **** BYTE sum_sfn (
1509:source\fatfs/ff.c **** 	const BYTE* dir		/* Pointer to the SFN entry */
1510:source\fatfs/ff.c **** )
1511:source\fatfs/ff.c **** {
 673              		.loc 1 1511 1 is_stmt 1 view -0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 677              		@ link register save eliminated.
1512:source\fatfs/ff.c **** 	BYTE sum = 0;
 678              		.loc 1 1512 2 view .LVU218
1513:source\fatfs/ff.c **** 	UINT n = 11;
 679              		.loc 1 1513 2 view .LVU219
1511:source\fatfs/ff.c **** 	BYTE sum = 0;
 680              		.loc 1 1511 1 is_stmt 0 view .LVU220
 681 0000 0346     		mov	r3, r0
 682 0002 00F10B01 		add	r1, r0, #11
1512:source\fatfs/ff.c **** 	BYTE sum = 0;
 683              		.loc 1 1512 7 view .LVU221
 684 0006 0020     		movs	r0, #0
 685              	.LVL68:
 686              	.L77:
1514:source\fatfs/ff.c **** 
1515:source\fatfs/ff.c **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 687              		.loc 1 1515 2 is_stmt 1 discriminator 1 view .LVU222
 688              		.loc 1 1515 5 discriminator 1 view .LVU223
 689              		.loc 1 1515 22 is_stmt 0 discriminator 1 view .LVU224
 690 0008 C201     		lsls	r2, r0, #7
 691 000a 42EA5002 		orr	r2, r2, r0, lsr #1
 692              		.loc 1 1515 9 discriminator 1 view .LVU225
 693 000e 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 694              	.LVL69:
 695              		.loc 1 1515 9 discriminator 1 view .LVU226
 696 0012 50FA82F2 		uxtab	r2, r0, r2
 697              		.loc 1 1515 52 discriminator 1 view .LVU227
 698 0016 8B42     		cmp	r3, r1
 699              		.loc 1 1515 9 discriminator 1 view .LVU228
 700 0018 D0B2     		uxtb	r0, r2
 701              	.LVL70:
 702              		.loc 1 1515 52 is_stmt 1 discriminator 1 view .LVU229
 703              		.loc 1 1515 52 is_stmt 0 discriminator 1 view .LVU230
 704 001a F5D1     		bne	.L77
1516:source\fatfs/ff.c **** 	return sum;
 705              		.loc 1 1516 2 is_stmt 1 view .LVU231
1517:source\fatfs/ff.c **** }
 706              		.loc 1 1517 1 is_stmt 0 view .LVU232
 707 001c 7047     		bx	lr
 708              		.cfi_endproc
 709              	.LFE150:
 711              		.section	.text.get_ldnumber,"ax",%progbits
 712              		.align	1
 713              		.syntax unified
 714              		.thumb
 715              		.thumb_func
 717              	get_ldnumber:
 718              	.LVL71:
 719              	.LFB158:
1518:source\fatfs/ff.c **** #endif
1519:source\fatfs/ff.c **** 
1520:source\fatfs/ff.c **** 
1521:source\fatfs/ff.c **** 
1522:source\fatfs/ff.c **** 
1523:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1524:source\fatfs/ff.c **** /* Directory handling - Find an object in the directory                  */
1525:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1526:source\fatfs/ff.c **** 
1527:source\fatfs/ff.c **** static
1528:source\fatfs/ff.c **** FRESULT dir_find (
1529:source\fatfs/ff.c **** 	DIR* dp			/* Pointer to the directory object linked to the file name */
1530:source\fatfs/ff.c **** )
1531:source\fatfs/ff.c **** {
1532:source\fatfs/ff.c **** 	FRESULT res;
1533:source\fatfs/ff.c **** 	BYTE c, *dir;
1534:source\fatfs/ff.c **** #if _USE_LFN
1535:source\fatfs/ff.c **** 	BYTE a, ord, sum;
1536:source\fatfs/ff.c **** #endif
1537:source\fatfs/ff.c **** 
1538:source\fatfs/ff.c **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
1539:source\fatfs/ff.c **** 	if (res != FR_OK) return res;
1540:source\fatfs/ff.c **** 
1541:source\fatfs/ff.c **** #if _USE_LFN
1542:source\fatfs/ff.c **** 	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1543:source\fatfs/ff.c **** #endif
1544:source\fatfs/ff.c **** 	do {
1545:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
1546:source\fatfs/ff.c **** 		if (res != FR_OK) break;
1547:source\fatfs/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
1548:source\fatfs/ff.c **** 		c = dir[DIR_Name];
1549:source\fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1550:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1551:source\fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1552:source\fatfs/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1553:source\fatfs/ff.c **** 			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1554:source\fatfs/ff.c **** 		} else {
1555:source\fatfs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1556:source\fatfs/ff.c **** 				if (dp->lfn) {
1557:source\fatfs/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
1558:source\fatfs/ff.c **** 						sum = dir[LDIR_Chksum];
1559:source\fatfs/ff.c **** 						c &= ~LLEF; ord = c;	/* LFN start order */
1560:source\fatfs/ff.c **** 						dp->lfn_idx = dp->index;	/* Start index of LFN */
1561:source\fatfs/ff.c **** 					}
1562:source\fatfs/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
1563:source\fatfs/ff.c **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
1564:source\fatfs/ff.c **** 				}
1565:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
1566:source\fatfs/ff.c **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
1567:source\fatfs/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
1568:source\fatfs/ff.c **** 				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1569:source\fatfs/ff.c **** 			}
1570:source\fatfs/ff.c **** 		}
1571:source\fatfs/ff.c **** #else		/* Non LFN configuration */
1572:source\fatfs/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
1573:source\fatfs/ff.c **** 			break;
1574:source\fatfs/ff.c **** #endif
1575:source\fatfs/ff.c **** 		res = dir_next(dp, 0);		/* Next entry */
1576:source\fatfs/ff.c **** 	} while (res == FR_OK);
1577:source\fatfs/ff.c **** 
1578:source\fatfs/ff.c **** 	return res;
1579:source\fatfs/ff.c **** }
1580:source\fatfs/ff.c **** 
1581:source\fatfs/ff.c **** 
1582:source\fatfs/ff.c **** 
1583:source\fatfs/ff.c **** 
1584:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1585:source\fatfs/ff.c **** /* Read an object from the directory                                     */
1586:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1587:source\fatfs/ff.c **** #if _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2
1588:source\fatfs/ff.c **** static
1589:source\fatfs/ff.c **** FRESULT dir_read (
1590:source\fatfs/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1591:source\fatfs/ff.c **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
1592:source\fatfs/ff.c **** )
1593:source\fatfs/ff.c **** {
1594:source\fatfs/ff.c **** 	FRESULT res;
1595:source\fatfs/ff.c **** 	BYTE a, c, *dir;
1596:source\fatfs/ff.c **** #if _USE_LFN
1597:source\fatfs/ff.c **** 	BYTE ord = 0xFF, sum = 0xFF;
1598:source\fatfs/ff.c **** #endif
1599:source\fatfs/ff.c **** 
1600:source\fatfs/ff.c **** 	res = FR_NO_FILE;
1601:source\fatfs/ff.c **** 	while (dp->sect) {
1602:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
1603:source\fatfs/ff.c **** 		if (res != FR_OK) break;
1604:source\fatfs/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
1605:source\fatfs/ff.c **** 		c = dir[DIR_Name];
1606:source\fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1607:source\fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1608:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1609:source\fatfs/ff.c **** 		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry
1610:source\fatfs/ff.c **** 			ord = 0xFF;
1611:source\fatfs/ff.c **** 		} else {
1612:source\fatfs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1613:source\fatfs/ff.c **** 				if (c & LLEF) {			/* Is it start of LFN sequence? */
1614:source\fatfs/ff.c **** 					sum = dir[LDIR_Chksum];
1615:source\fatfs/ff.c **** 					c &= ~LLEF; ord = c;
1616:source\fatfs/ff.c **** 					dp->lfn_idx = dp->index;
1617:source\fatfs/ff.c **** 				}
1618:source\fatfs/ff.c **** 				/* Check LFN validity and capture it */
1619:source\fatfs/ff.c **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
1620:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
1621:source\fatfs/ff.c **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
1622:source\fatfs/ff.c **** 					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
1623:source\fatfs/ff.c **** 				break;
1624:source\fatfs/ff.c **** 			}
1625:source\fatfs/ff.c **** 		}
1626:source\fatfs/ff.c **** #else		/* Non LFN configuration */
1627:source\fatfs/ff.c **** 		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)
1628:source\fatfs/ff.c **** 			break;
1629:source\fatfs/ff.c **** #endif
1630:source\fatfs/ff.c **** 		res = dir_next(dp, 0);				/* Next entry */
1631:source\fatfs/ff.c **** 		if (res != FR_OK) break;
1632:source\fatfs/ff.c **** 	}
1633:source\fatfs/ff.c **** 
1634:source\fatfs/ff.c **** 	if (res != FR_OK) dp->sect = 0;
1635:source\fatfs/ff.c **** 
1636:source\fatfs/ff.c **** 	return res;
1637:source\fatfs/ff.c **** }
1638:source\fatfs/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
1639:source\fatfs/ff.c **** 
1640:source\fatfs/ff.c **** 
1641:source\fatfs/ff.c **** 
1642:source\fatfs/ff.c **** 
1643:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1644:source\fatfs/ff.c **** /* Register an object to the directory                                   */
1645:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1646:source\fatfs/ff.c **** #if !_FS_READONLY
1647:source\fatfs/ff.c **** static
1648:source\fatfs/ff.c **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
1649:source\fatfs/ff.c **** 	DIR* dp				/* Target directory with object name to be created */
1650:source\fatfs/ff.c **** )
1651:source\fatfs/ff.c **** {
1652:source\fatfs/ff.c **** 	FRESULT res;
1653:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1654:source\fatfs/ff.c **** 	UINT n, nent;
1655:source\fatfs/ff.c **** 	BYTE sn[12], *fn, sum;
1656:source\fatfs/ff.c **** 	WCHAR *lfn;
1657:source\fatfs/ff.c **** 
1658:source\fatfs/ff.c **** 
1659:source\fatfs/ff.c **** 	fn = dp->fn; lfn = dp->lfn;
1660:source\fatfs/ff.c **** 	mem_cpy(sn, fn, 12);
1661:source\fatfs/ff.c **** 
1662:source\fatfs/ff.c **** 	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
1663:source\fatfs/ff.c **** 		return FR_INVALID_NAME;
1664:source\fatfs/ff.c **** 
1665:source\fatfs/ff.c **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1666:source\fatfs/ff.c **** 		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
1667:source\fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
1668:source\fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
1669:source\fatfs/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
1670:source\fatfs/ff.c **** 			if (res != FR_OK) break;
1671:source\fatfs/ff.c **** 		}
1672:source\fatfs/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1673:source\fatfs/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1674:source\fatfs/ff.c **** 		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
1675:source\fatfs/ff.c **** 	}
1676:source\fatfs/ff.c **** 
1677:source\fatfs/ff.c **** 	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
1678:source\fatfs/ff.c **** 		for (n = 0; lfn[n]; n++) ;
1679:source\fatfs/ff.c **** 		nent = (n + 25) / 13;
1680:source\fatfs/ff.c **** 	} else {						/* Otherwise allocate an entry for an SFN  */
1681:source\fatfs/ff.c **** 		nent = 1;
1682:source\fatfs/ff.c **** 	}
1683:source\fatfs/ff.c **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
1684:source\fatfs/ff.c **** 
1685:source\fatfs/ff.c **** 	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
1686:source\fatfs/ff.c **** 		res = dir_sdi(dp, dp->index - nent);
1687:source\fatfs/ff.c **** 		if (res == FR_OK) {
1688:source\fatfs/ff.c **** 			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
1689:source\fatfs/ff.c **** 			do {					/* Store LFN entries in bottom first */
1690:source\fatfs/ff.c **** 				res = move_window(dp->fs, dp->sect);
1691:source\fatfs/ff.c **** 				if (res != FR_OK) break;
1692:source\fatfs/ff.c **** 				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
1693:source\fatfs/ff.c **** 				dp->fs->wflag = 1;
1694:source\fatfs/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
1695:source\fatfs/ff.c **** 			} while (res == FR_OK && --nent);
1696:source\fatfs/ff.c **** 		}
1697:source\fatfs/ff.c **** 	}
1698:source\fatfs/ff.c **** #else	/* Non LFN configuration */
1699:source\fatfs/ff.c **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
1700:source\fatfs/ff.c **** #endif
1701:source\fatfs/ff.c **** 
1702:source\fatfs/ff.c **** 	if (res == FR_OK) {				/* Set SFN entry */
1703:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
1704:source\fatfs/ff.c **** 		if (res == FR_OK) {
1705:source\fatfs/ff.c **** 			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
1706:source\fatfs/ff.c **** 			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
1707:source\fatfs/ff.c **** #if _USE_LFN
1708:source\fatfs/ff.c **** 			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
1709:source\fatfs/ff.c **** #endif
1710:source\fatfs/ff.c **** 			dp->fs->wflag = 1;
1711:source\fatfs/ff.c **** 		}
1712:source\fatfs/ff.c **** 	}
1713:source\fatfs/ff.c **** 
1714:source\fatfs/ff.c **** 	return res;
1715:source\fatfs/ff.c **** }
1716:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
1717:source\fatfs/ff.c **** 
1718:source\fatfs/ff.c **** 
1719:source\fatfs/ff.c **** 
1720:source\fatfs/ff.c **** 
1721:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1722:source\fatfs/ff.c **** /* Remove an object from the directory                                   */
1723:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1724:source\fatfs/ff.c **** #if !_FS_READONLY && !_FS_MINIMIZE
1725:source\fatfs/ff.c **** static
1726:source\fatfs/ff.c **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1727:source\fatfs/ff.c **** 	DIR* dp				/* Directory object pointing the entry to be removed */
1728:source\fatfs/ff.c **** )
1729:source\fatfs/ff.c **** {
1730:source\fatfs/ff.c **** 	FRESULT res;
1731:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1732:source\fatfs/ff.c **** 	UINT i;
1733:source\fatfs/ff.c **** 
1734:source\fatfs/ff.c **** 	i = dp->index;	/* SFN index */
1735:source\fatfs/ff.c **** 	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN en
1736:source\fatfs/ff.c **** 	if (res == FR_OK) {
1737:source\fatfs/ff.c **** 		do {
1738:source\fatfs/ff.c **** 			res = move_window(dp->fs, dp->sect);
1739:source\fatfs/ff.c **** 			if (res != FR_OK) break;
1740:source\fatfs/ff.c **** 			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
1741:source\fatfs/ff.c **** 			*dp->dir = DDEM;
1742:source\fatfs/ff.c **** 			dp->fs->wflag = 1;
1743:source\fatfs/ff.c **** 			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1744:source\fatfs/ff.c **** 			res = dir_next(dp, 0);		/* Next entry */
1745:source\fatfs/ff.c **** 		} while (res == FR_OK);
1746:source\fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1747:source\fatfs/ff.c **** 	}
1748:source\fatfs/ff.c **** 
1749:source\fatfs/ff.c **** #else			/* Non LFN configuration */
1750:source\fatfs/ff.c **** 	res = dir_sdi(dp, dp->index);
1751:source\fatfs/ff.c **** 	if (res == FR_OK) {
1752:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
1753:source\fatfs/ff.c **** 		if (res == FR_OK) {
1754:source\fatfs/ff.c **** 			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
1755:source\fatfs/ff.c **** 			*dp->dir = DDEM;
1756:source\fatfs/ff.c **** 			dp->fs->wflag = 1;
1757:source\fatfs/ff.c **** 		}
1758:source\fatfs/ff.c **** 	}
1759:source\fatfs/ff.c **** #endif
1760:source\fatfs/ff.c **** 
1761:source\fatfs/ff.c **** 	return res;
1762:source\fatfs/ff.c **** }
1763:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
1764:source\fatfs/ff.c **** 
1765:source\fatfs/ff.c **** 
1766:source\fatfs/ff.c **** 
1767:source\fatfs/ff.c **** 
1768:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1769:source\fatfs/ff.c **** /* Get file information from directory entry                             */
1770:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1771:source\fatfs/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
1772:source\fatfs/ff.c **** static
1773:source\fatfs/ff.c **** void get_fileinfo (		/* No return code */
1774:source\fatfs/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
1775:source\fatfs/ff.c **** 	FILINFO* fno	 	/* Pointer to the file information to be filled */
1776:source\fatfs/ff.c **** )
1777:source\fatfs/ff.c **** {
1778:source\fatfs/ff.c **** 	UINT i;
1779:source\fatfs/ff.c **** 	TCHAR *p, c;
1780:source\fatfs/ff.c **** 	BYTE *dir;
1781:source\fatfs/ff.c **** #if _USE_LFN
1782:source\fatfs/ff.c **** 	WCHAR w, *lfn;
1783:source\fatfs/ff.c **** #endif
1784:source\fatfs/ff.c **** 
1785:source\fatfs/ff.c **** 	p = fno->fname;
1786:source\fatfs/ff.c **** 	if (dp->sect) {		/* Get SFN */
1787:source\fatfs/ff.c **** 		dir = dp->dir;
1788:source\fatfs/ff.c **** 		i = 0;
1789:source\fatfs/ff.c **** 		while (i < 11) {		/* Copy name body and extension */
1790:source\fatfs/ff.c **** 			c = (TCHAR)dir[i++];
1791:source\fatfs/ff.c **** 			if (c == ' ') continue;				/* Skip padding spaces */
1792:source\fatfs/ff.c **** 			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
1793:source\fatfs/ff.c **** 			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
1794:source\fatfs/ff.c **** #if _USE_LFN
1795:source\fatfs/ff.c **** 			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
1796:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
1797:source\fatfs/ff.c **** #if _LFN_UNICODE
1798:source\fatfs/ff.c **** 			if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dir[i]))
1799:source\fatfs/ff.c **** 				c = c << 8 | dir[i++];
1800:source\fatfs/ff.c **** 			c = ff_convert(c, 1);	/* OEM -> Unicode */
1801:source\fatfs/ff.c **** 			if (!c) c = '?';
1802:source\fatfs/ff.c **** #endif
1803:source\fatfs/ff.c **** #endif
1804:source\fatfs/ff.c **** 			*p++ = c;
1805:source\fatfs/ff.c **** 		}
1806:source\fatfs/ff.c **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
1807:source\fatfs/ff.c **** 		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
1808:source\fatfs/ff.c **** 		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
1809:source\fatfs/ff.c **** 		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
1810:source\fatfs/ff.c **** 	}
1811:source\fatfs/ff.c **** 	*p = 0;		/* Terminate SFN string by a \0 */
1812:source\fatfs/ff.c **** 
1813:source\fatfs/ff.c **** #if _USE_LFN
1814:source\fatfs/ff.c **** 	if (fno->lfname) {
1815:source\fatfs/ff.c **** 		i = 0; p = fno->lfname;
1816:source\fatfs/ff.c **** 		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
1817:source\fatfs/ff.c **** 			lfn = dp->lfn;
1818:source\fatfs/ff.c **** 			while ((w = *lfn++) != 0) {		/* Get an LFN character */
1819:source\fatfs/ff.c **** #if !_LFN_UNICODE
1820:source\fatfs/ff.c **** 				w = ff_convert(w, 0);		/* Unicode -> OEM */
1821:source\fatfs/ff.c **** 				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
1822:source\fatfs/ff.c **** 				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
1823:source\fatfs/ff.c **** 					p[i++] = (TCHAR)(w >> 8);
1824:source\fatfs/ff.c **** #endif
1825:source\fatfs/ff.c **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
1826:source\fatfs/ff.c **** 				p[i++] = (TCHAR)w;
1827:source\fatfs/ff.c **** 			}
1828:source\fatfs/ff.c **** 		}
1829:source\fatfs/ff.c **** 		p[i] = 0;	/* Terminate LFN string by a \0 */
1830:source\fatfs/ff.c **** 	}
1831:source\fatfs/ff.c **** #endif
1832:source\fatfs/ff.c **** }
1833:source\fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
1834:source\fatfs/ff.c **** 
1835:source\fatfs/ff.c **** 
1836:source\fatfs/ff.c **** 
1837:source\fatfs/ff.c **** 
1838:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1839:source\fatfs/ff.c **** /* Pattern matching                                                      */
1840:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1841:source\fatfs/ff.c **** #if _USE_FIND && _FS_MINIMIZE <= 1
1842:source\fatfs/ff.c **** static
1843:source\fatfs/ff.c **** WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
1844:source\fatfs/ff.c **** 	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
1845:source\fatfs/ff.c **** )
1846:source\fatfs/ff.c **** {
1847:source\fatfs/ff.c **** 	WCHAR chr;
1848:source\fatfs/ff.c **** 
1849:source\fatfs/ff.c **** #if !_LFN_UNICODE
1850:source\fatfs/ff.c **** 	chr = (BYTE)*(*ptr)++;					/* Get a byte */
1851:source\fatfs/ff.c **** 	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
1852:source\fatfs/ff.c **** 	if (IsDBCS1(chr) && IsDBCS2(**ptr))		/* Get DBC 2nd byte if needed */
1853:source\fatfs/ff.c **** 		chr = chr << 8 | (BYTE)*(*ptr)++;
1854:source\fatfs/ff.c **** #ifdef _EXCVT
1855:source\fatfs/ff.c **** 	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
1856:source\fatfs/ff.c **** #endif
1857:source\fatfs/ff.c **** #else
1858:source\fatfs/ff.c **** 	chr = ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
1859:source\fatfs/ff.c **** #endif
1860:source\fatfs/ff.c **** 	return chr;
1861:source\fatfs/ff.c **** }
1862:source\fatfs/ff.c **** 
1863:source\fatfs/ff.c **** 
1864:source\fatfs/ff.c **** static
1865:source\fatfs/ff.c **** int pattern_matching (	/* Return value: 0:mismatched, 1:matched */
1866:source\fatfs/ff.c **** 	const TCHAR* pat,	/* Matching pattern */
1867:source\fatfs/ff.c **** 	const TCHAR* nam,	/* String to be tested */
1868:source\fatfs/ff.c **** 	int skip,			/* Number of pre-skip chars (number of ?s) */
1869:source\fatfs/ff.c **** 	int inf				/* Infinite search (* specified) */
1870:source\fatfs/ff.c **** )
1871:source\fatfs/ff.c **** {
1872:source\fatfs/ff.c **** 	const TCHAR *pp, *np;
1873:source\fatfs/ff.c **** 	WCHAR pc, nc;
1874:source\fatfs/ff.c **** 	int nm, nx;
1875:source\fatfs/ff.c **** 
1876:source\fatfs/ff.c **** 
1877:source\fatfs/ff.c **** 	while (skip--) {				/* Pre-skip name chars */
1878:source\fatfs/ff.c **** 		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
1879:source\fatfs/ff.c **** 	}
1880:source\fatfs/ff.c **** 	if (!*pat && inf) return 1;		/* (short circuit) */
1881:source\fatfs/ff.c **** 
1882:source\fatfs/ff.c **** 	do {
1883:source\fatfs/ff.c **** 		pp = pat; np = nam;			/* Top of pattern and name to match */
1884:source\fatfs/ff.c **** 		for (;;) {
1885:source\fatfs/ff.c **** 			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
1886:source\fatfs/ff.c **** 				nm = nx = 0;
1887:source\fatfs/ff.c **** 				do {				/* Analyze the wildcard chars */
1888:source\fatfs/ff.c **** 					if (*pp++ == '?') nm++; else nx = 1;
1889:source\fatfs/ff.c **** 				} while (*pp == '?' || *pp == '*');
1890:source\fatfs/ff.c **** 				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildc
1891:source\fatfs/ff.c **** 				nc = *np; break;	/* Branch mismatched */
1892:source\fatfs/ff.c **** 			}
1893:source\fatfs/ff.c **** 			pc = get_achar(&pp);	/* Get a pattern char */
1894:source\fatfs/ff.c **** 			nc = get_achar(&np);	/* Get a name char */
1895:source\fatfs/ff.c **** 			if (pc != nc) break;	/* Branch mismatched? */
1896:source\fatfs/ff.c **** 			if (!pc) return 1;		/* Branch matched? (matched at end of both strings) */
1897:source\fatfs/ff.c **** 		}
1898:source\fatfs/ff.c **** 		get_achar(&nam);			/* nam++ */
1899:source\fatfs/ff.c **** 	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
1900:source\fatfs/ff.c **** 
1901:source\fatfs/ff.c **** 	return 0;
1902:source\fatfs/ff.c **** }
1903:source\fatfs/ff.c **** #endif /* _USE_FIND && _FS_MINIMIZE <= 1 */
1904:source\fatfs/ff.c **** 
1905:source\fatfs/ff.c **** 
1906:source\fatfs/ff.c **** 
1907:source\fatfs/ff.c **** 
1908:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1909:source\fatfs/ff.c **** /* Pick a segment and create the object name in directory form           */
1910:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1911:source\fatfs/ff.c **** 
1912:source\fatfs/ff.c **** static
1913:source\fatfs/ff.c **** FRESULT create_name (
1914:source\fatfs/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
1915:source\fatfs/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
1916:source\fatfs/ff.c **** )
1917:source\fatfs/ff.c **** {
1918:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1919:source\fatfs/ff.c **** 	BYTE b, cf;
1920:source\fatfs/ff.c **** 	WCHAR w, *lfn;
1921:source\fatfs/ff.c **** 	UINT i, ni, si, di;
1922:source\fatfs/ff.c **** 	const TCHAR *p;
1923:source\fatfs/ff.c **** 
1924:source\fatfs/ff.c **** 	/* Create LFN in Unicode */
1925:source\fatfs/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1926:source\fatfs/ff.c **** 	lfn = dp->lfn;
1927:source\fatfs/ff.c **** 	si = di = 0;
1928:source\fatfs/ff.c **** 	for (;;) {
1929:source\fatfs/ff.c **** 		w = p[si++];					/* Get a character */
1930:source\fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
1931:source\fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
1932:source\fatfs/ff.c **** 			return FR_INVALID_NAME;
1933:source\fatfs/ff.c **** #if !_LFN_UNICODE
1934:source\fatfs/ff.c **** 		w &= 0xFF;
1935:source\fatfs/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1936:source\fatfs/ff.c **** #if _DF1S
1937:source\fatfs/ff.c **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
1938:source\fatfs/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
1939:source\fatfs/ff.c **** 			if (!IsDBCS2(b))
1940:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
1941:source\fatfs/ff.c **** #endif
1942:source\fatfs/ff.c **** 		}
1943:source\fatfs/ff.c **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
1944:source\fatfs/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1945:source\fatfs/ff.c **** #endif
1946:source\fatfs/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
1947:source\fatfs/ff.c **** 			return FR_INVALID_NAME;
1948:source\fatfs/ff.c **** 		lfn[di++] = w;					/* Store the Unicode character */
1949:source\fatfs/ff.c **** 	}
1950:source\fatfs/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1951:source\fatfs/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1952:source\fatfs/ff.c **** #if _FS_RPATH
1953:source\fatfs/ff.c **** 	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
1954:source\fatfs/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
1955:source\fatfs/ff.c **** 		lfn[di] = 0;
1956:source\fatfs/ff.c **** 		for (i = 0; i < 11; i++)
1957:source\fatfs/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
1958:source\fatfs/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1959:source\fatfs/ff.c **** 		return FR_OK;
1960:source\fatfs/ff.c **** 	}
1961:source\fatfs/ff.c **** #endif
1962:source\fatfs/ff.c **** 	while (di) {						/* Strip trailing spaces and dots */
1963:source\fatfs/ff.c **** 		w = lfn[di - 1];
1964:source\fatfs/ff.c **** 		if (w != ' ' && w != '.') break;
1965:source\fatfs/ff.c **** 		di--;
1966:source\fatfs/ff.c **** 	}
1967:source\fatfs/ff.c **** 	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
1968:source\fatfs/ff.c **** 
1969:source\fatfs/ff.c **** 	lfn[di] = 0;						/* LFN is created */
1970:source\fatfs/ff.c **** 
1971:source\fatfs/ff.c **** 	/* Create SFN in directory form */
1972:source\fatfs/ff.c **** 	mem_set(dp->fn, ' ', 11);
1973:source\fatfs/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
1974:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
1975:source\fatfs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1976:source\fatfs/ff.c **** 
1977:source\fatfs/ff.c **** 	b = i = 0; ni = 8;
1978:source\fatfs/ff.c **** 	for (;;) {
1979:source\fatfs/ff.c **** 		w = lfn[si++];					/* Get an LFN character */
1980:source\fatfs/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
1981:source\fatfs/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
1982:source\fatfs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
1983:source\fatfs/ff.c **** 		}
1984:source\fatfs/ff.c **** 
1985:source\fatfs/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1986:source\fatfs/ff.c **** 			if (ni == 11) {				/* Long extension */
1987:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
1988:source\fatfs/ff.c **** 			}
1989:source\fatfs/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
1990:source\fatfs/ff.c **** 			if (si > di) break;			/* No extension */
1991:source\fatfs/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1992:source\fatfs/ff.c **** 			b <<= 2; continue;
1993:source\fatfs/ff.c **** 		}
1994:source\fatfs/ff.c **** 
1995:source\fatfs/ff.c **** 		if (w >= 0x80) {				/* Non ASCII character */
1996:source\fatfs/ff.c **** #ifdef _EXCVT
1997:source\fatfs/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1998:source\fatfs/ff.c **** 			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
1999:source\fatfs/ff.c **** #else
2000:source\fatfs/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
2001:source\fatfs/ff.c **** #endif
2002:source\fatfs/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
2003:source\fatfs/ff.c **** 		}
2004:source\fatfs/ff.c **** 
2005:source\fatfs/ff.c **** 		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
2006:source\fatfs/ff.c **** 			if (i >= ni - 1) {
2007:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
2008:source\fatfs/ff.c **** 			}
2009:source\fatfs/ff.c **** 			dp->fn[i++] = (BYTE)(w >> 8);
2010:source\fatfs/ff.c **** 		} else {						/* SBC */
2011:source\fatfs/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2012:source\fatfs/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2013:source\fatfs/ff.c **** 			} else {
2014:source\fatfs/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
2015:source\fatfs/ff.c **** 					b |= 2;
2016:source\fatfs/ff.c **** 				} else {
2017:source\fatfs/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
2018:source\fatfs/ff.c **** 						b |= 1; w -= 0x20;
2019:source\fatfs/ff.c **** 					}
2020:source\fatfs/ff.c **** 				}
2021:source\fatfs/ff.c **** 			}
2022:source\fatfs/ff.c **** 		}
2023:source\fatfs/ff.c **** 		dp->fn[i++] = (BYTE)w;
2024:source\fatfs/ff.c **** 	}
2025:source\fatfs/ff.c **** 
2026:source\fatfs/ff.c **** 	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, re
2027:source\fatfs/ff.c **** 
2028:source\fatfs/ff.c **** 	if (ni == 8) b <<= 2;
2029:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
2030:source\fatfs/ff.c **** 		cf |= NS_LFN;
2031:source\fatfs/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
2032:source\fatfs/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2033:source\fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2034:source\fatfs/ff.c **** 	}
2035:source\fatfs/ff.c **** 
2036:source\fatfs/ff.c **** 	dp->fn[NSFLAG] = cf;	/* SFN is created */
2037:source\fatfs/ff.c **** 
2038:source\fatfs/ff.c **** 	return FR_OK;
2039:source\fatfs/ff.c **** 
2040:source\fatfs/ff.c **** 
2041:source\fatfs/ff.c **** #else	/* Non-LFN configuration */
2042:source\fatfs/ff.c **** 	BYTE b, c, d, *sfn;
2043:source\fatfs/ff.c **** 	UINT ni, si, i;
2044:source\fatfs/ff.c **** 	const char *p;
2045:source\fatfs/ff.c **** 
2046:source\fatfs/ff.c **** 	/* Create file name in directory form */
2047:source\fatfs/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
2048:source\fatfs/ff.c **** 	sfn = dp->fn;
2049:source\fatfs/ff.c **** 	mem_set(sfn, ' ', 11);
2050:source\fatfs/ff.c **** 	si = i = b = 0; ni = 8;
2051:source\fatfs/ff.c **** #if _FS_RPATH
2052:source\fatfs/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
2053:source\fatfs/ff.c **** 		for (;;) {
2054:source\fatfs/ff.c **** 			c = (BYTE)p[si++];
2055:source\fatfs/ff.c **** 			if (c != '.' || si >= 3) break;
2056:source\fatfs/ff.c **** 			sfn[i++] = c;
2057:source\fatfs/ff.c **** 		}
2058:source\fatfs/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
2059:source\fatfs/ff.c **** 		*path = &p[si];									/* Return pointer to the next segment */
2060:source\fatfs/ff.c **** 		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
2061:source\fatfs/ff.c **** 		return FR_OK;
2062:source\fatfs/ff.c **** 	}
2063:source\fatfs/ff.c **** #endif
2064:source\fatfs/ff.c **** 	for (;;) {
2065:source\fatfs/ff.c **** 		c = (BYTE)p[si++];
2066:source\fatfs/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
2067:source\fatfs/ff.c **** 		if (c == '.' || i >= ni) {
2068:source\fatfs/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
2069:source\fatfs/ff.c **** 			i = 8; ni = 11;
2070:source\fatfs/ff.c **** 			b <<= 2; continue;
2071:source\fatfs/ff.c **** 		}
2072:source\fatfs/ff.c **** 		if (c >= 0x80) {				/* Extended character? */
2073:source\fatfs/ff.c **** 			b |= 3;						/* Eliminate NT flag */
2074:source\fatfs/ff.c **** #ifdef _EXCVT
2075:source\fatfs/ff.c **** 			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
2076:source\fatfs/ff.c **** #else
2077:source\fatfs/ff.c **** #if !_DF1S
2078:source\fatfs/ff.c **** 			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
2079:source\fatfs/ff.c **** #endif
2080:source\fatfs/ff.c **** #endif
2081:source\fatfs/ff.c **** 		}
2082:source\fatfs/ff.c **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
2083:source\fatfs/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
2084:source\fatfs/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
2085:source\fatfs/ff.c **** 				return FR_INVALID_NAME;
2086:source\fatfs/ff.c **** 			sfn[i++] = c;
2087:source\fatfs/ff.c **** 			sfn[i++] = d;
2088:source\fatfs/ff.c **** 		} else {						/* SBC */
2089:source\fatfs/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
2090:source\fatfs/ff.c **** 				return FR_INVALID_NAME;
2091:source\fatfs/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
2092:source\fatfs/ff.c **** 				b |= 2;
2093:source\fatfs/ff.c **** 			} else {
2094:source\fatfs/ff.c **** 				if (IsLower(c)) {		/* ASCII small capital? */
2095:source\fatfs/ff.c **** 					b |= 1; c -= 0x20;
2096:source\fatfs/ff.c **** 				}
2097:source\fatfs/ff.c **** 			}
2098:source\fatfs/ff.c **** 			sfn[i++] = c;
2099:source\fatfs/ff.c **** 		}
2100:source\fatfs/ff.c **** 	}
2101:source\fatfs/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
2102:source\fatfs/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
2103:source\fatfs/ff.c **** 
2104:source\fatfs/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
2105:source\fatfs/ff.c **** 	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RD
2106:source\fatfs/ff.c **** 
2107:source\fatfs/ff.c **** 	if (ni == 8) b <<= 2;
2108:source\fatfs/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
2109:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
2110:source\fatfs/ff.c **** 
2111:source\fatfs/ff.c **** 	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
2112:source\fatfs/ff.c **** 
2113:source\fatfs/ff.c **** 	return FR_OK;
2114:source\fatfs/ff.c **** #endif
2115:source\fatfs/ff.c **** }
2116:source\fatfs/ff.c **** 
2117:source\fatfs/ff.c **** 
2118:source\fatfs/ff.c **** 
2119:source\fatfs/ff.c **** 
2120:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2121:source\fatfs/ff.c **** /* Follow a file path                                                    */
2122:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2123:source\fatfs/ff.c **** 
2124:source\fatfs/ff.c **** static
2125:source\fatfs/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
2126:source\fatfs/ff.c **** 	DIR* dp,			/* Directory object to return last directory and found object */
2127:source\fatfs/ff.c **** 	const TCHAR* path	/* Full-path string to find a file or directory */
2128:source\fatfs/ff.c **** )
2129:source\fatfs/ff.c **** {
2130:source\fatfs/ff.c **** 	FRESULT res;
2131:source\fatfs/ff.c **** 	BYTE *dir, ns;
2132:source\fatfs/ff.c **** 
2133:source\fatfs/ff.c **** 
2134:source\fatfs/ff.c **** #if _FS_RPATH
2135:source\fatfs/ff.c **** 	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
2136:source\fatfs/ff.c **** 		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
2137:source\fatfs/ff.c **** 	} else {								/* No heading separator */
2138:source\fatfs/ff.c **** 		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
2139:source\fatfs/ff.c **** 	}
2140:source\fatfs/ff.c **** #else
2141:source\fatfs/ff.c **** 	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
2142:source\fatfs/ff.c **** 		path++;
2143:source\fatfs/ff.c **** 	dp->sclust = 0;							/* Always start from the root directory */
2144:source\fatfs/ff.c **** #endif
2145:source\fatfs/ff.c **** 
2146:source\fatfs/ff.c **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2147:source\fatfs/ff.c **** 		res = dir_sdi(dp, 0);
2148:source\fatfs/ff.c **** 		dp->dir = 0;
2149:source\fatfs/ff.c **** 	} else {								/* Follow path */
2150:source\fatfs/ff.c **** 		for (;;) {
2151:source\fatfs/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
2152:source\fatfs/ff.c **** 			if (res != FR_OK) break;
2153:source\fatfs/ff.c **** 			res = dir_find(dp);				/* Find an object with the sagment name */
2154:source\fatfs/ff.c **** 			ns = dp->fn[NSFLAG];
2155:source\fatfs/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
2156:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
2157:source\fatfs/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
2158:source\fatfs/ff.c **** 						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
2159:source\fatfs/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
2160:source\fatfs/ff.c **** 						res = FR_OK;					/* Ended at the root directroy. Function completed. */
2161:source\fatfs/ff.c **** 					} else {							/* Could not find the object */
2162:source\fatfs/ff.c **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2163:source\fatfs/ff.c **** 					}
2164:source\fatfs/ff.c **** 				}
2165:source\fatfs/ff.c **** 				break;
2166:source\fatfs/ff.c **** 			}
2167:source\fatfs/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2168:source\fatfs/ff.c **** 			dir = dp->dir;						/* Follow the sub-directory */
2169:source\fatfs/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
2170:source\fatfs/ff.c **** 				res = FR_NO_PATH; break;
2171:source\fatfs/ff.c **** 			}
2172:source\fatfs/ff.c **** 			dp->sclust = ld_clust(dp->fs, dir);
2173:source\fatfs/ff.c **** 		}
2174:source\fatfs/ff.c **** 	}
2175:source\fatfs/ff.c **** 
2176:source\fatfs/ff.c **** 	return res;
2177:source\fatfs/ff.c **** }
2178:source\fatfs/ff.c **** 
2179:source\fatfs/ff.c **** 
2180:source\fatfs/ff.c **** 
2181:source\fatfs/ff.c **** 
2182:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2183:source\fatfs/ff.c **** /* Get logical drive number from path name                               */
2184:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2185:source\fatfs/ff.c **** 
2186:source\fatfs/ff.c **** static
2187:source\fatfs/ff.c **** int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
2188:source\fatfs/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the path name */
2189:source\fatfs/ff.c **** )
2190:source\fatfs/ff.c **** {
 720              		.loc 1 2190 1 is_stmt 1 view -0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 0
 723              		@ frame_needed = 0, uses_anonymous_args = 0
2191:source\fatfs/ff.c **** 	const TCHAR *tp, *tt;
 724              		.loc 1 2191 2 view .LVU234
2192:source\fatfs/ff.c **** 	UINT i;
 725              		.loc 1 2192 2 view .LVU235
2193:source\fatfs/ff.c **** 	int vol = -1;
 726              		.loc 1 2193 2 view .LVU236
2194:source\fatfs/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
2195:source\fatfs/ff.c **** 	static const char* const str[] = {_VOLUME_STRS};
2196:source\fatfs/ff.c **** 	const char *sp;
2197:source\fatfs/ff.c **** 	char c;
2198:source\fatfs/ff.c **** 	TCHAR tc;
2199:source\fatfs/ff.c **** #endif
2200:source\fatfs/ff.c **** 
2201:source\fatfs/ff.c **** 
2202:source\fatfs/ff.c **** 	if (*path) {	/* If the pointer is not a null */
 727              		.loc 1 2202 2 view .LVU237
 728              		.loc 1 2202 6 is_stmt 0 view .LVU238
 729 0000 0268     		ldr	r2, [r0]
2190:source\fatfs/ff.c **** 	const TCHAR *tp, *tt;
 730              		.loc 1 2190 1 view .LVU239
 731 0002 10B5     		push	{r4, lr}
 732              		.cfi_def_cfa_offset 8
 733              		.cfi_offset 4, -8
 734              		.cfi_offset 14, -4
2190:source\fatfs/ff.c **** 	const TCHAR *tp, *tt;
 735              		.loc 1 2190 1 view .LVU240
 736 0004 0446     		mov	r4, r0
 737              		.loc 1 2202 5 view .LVU241
 738 0006 6AB1     		cbz	r2, .L89
 739 0008 1346     		mov	r3, r2
 740              	.LVL72:
 741              	.L81:
 742              		.loc 1 2202 5 view .LVU242
 743 000a 1946     		mov	r1, r3
 744              	.LVL73:
2203:source\fatfs/ff.c **** 		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the pa
 745              		.loc 1 2203 56 is_stmt 1 discriminator 1 view .LVU243
 746              		.loc 1 2203 26 is_stmt 0 discriminator 1 view .LVU244
 747 000c 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 748              		.loc 1 2203 56 discriminator 1 view .LVU245
 749 0010 1F28     		cmp	r0, #31
 750 0012 10D9     		bls	.L85
 751              		.loc 1 2203 56 discriminator 3 view .LVU246
 752 0014 3A28     		cmp	r0, #58
 753 0016 F8D1     		bne	.L81
2204:source\fatfs/ff.c **** 		if (*tt == ':') {	/* If a ':' is exist in the path name */
 754              		.loc 1 2204 3 is_stmt 1 view .LVU247
2205:source\fatfs/ff.c **** 			tp = *path;
 755              		.loc 1 2205 4 view .LVU248
 756              	.LVL74:
2206:source\fatfs/ff.c **** 			i = *tp++ - '0'; 
 757              		.loc 1 2206 4 view .LVU249
 758              		.loc 1 2206 8 is_stmt 0 view .LVU250
 759 0018 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 760              	.LVL75:
2207:source\fatfs/ff.c **** 			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 761              		.loc 1 2207 4 is_stmt 1 view .LVU251
 762              		.loc 1 2207 7 is_stmt 0 view .LVU252
 763 001a A3F13000 		sub	r0, r3, #48
 764 001e C3B2     		uxtb	r3, r0
 765              	.LVL76:
 766              		.loc 1 2207 7 view .LVU253
 767 0020 022B     		cmp	r3, #2
 768 0022 02D9     		bls	.L83
 769              	.LVL77:
 770              	.L89:
2193:source\fatfs/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
 771              		.loc 1 2193 6 view .LVU254
 772 0024 4FF0FF30 		mov	r0, #-1
 773 0028 04E0     		b	.L79
 774              	.LVL78:
 775              	.L83:
2206:source\fatfs/ff.c **** 			i = *tp++ - '0'; 
 776              		.loc 1 2206 11 discriminator 1 view .LVU255
 777 002a 0132     		adds	r2, r2, #1
 778              	.LVL79:
 779              		.loc 1 2207 15 discriminator 1 view .LVU256
 780 002c 9142     		cmp	r1, r2
 781 002e F9D1     		bne	.L89
2208:source\fatfs/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 782              		.loc 1 2208 5 is_stmt 1 view .LVU257
2209:source\fatfs/ff.c **** 					vol = (int)i;
 783              		.loc 1 2209 6 view .LVU258
 784              	.LVL80:
2210:source\fatfs/ff.c **** 					*path = ++tt;
 785              		.loc 1 2210 6 view .LVU259
 786              		.loc 1 2210 12 is_stmt 0 view .LVU260
 787 0030 0131     		adds	r1, r1, #1
 788              	.LVL81:
 789              		.loc 1 2210 12 view .LVU261
 790 0032 2160     		str	r1, [r4]
 791              	.LVL82:
 792              	.L79:
2211:source\fatfs/ff.c **** 				}
2212:source\fatfs/ff.c **** 			}
2213:source\fatfs/ff.c **** #if _STR_VOLUME_ID
2214:source\fatfs/ff.c **** 			 else {	/* No numeric drive number, find string drive id */
2215:source\fatfs/ff.c **** 				i = 0; tt++;
2216:source\fatfs/ff.c **** 				do {
2217:source\fatfs/ff.c **** 					sp = str[i]; tp = *path;
2218:source\fatfs/ff.c **** 					do {	/* Compare a string drive id with path name */
2219:source\fatfs/ff.c **** 						c = *sp++; tc = *tp++;
2220:source\fatfs/ff.c **** 						if (IsLower(tc)) tc -= 0x20;
2221:source\fatfs/ff.c **** 					} while (c && (TCHAR)c == tc);
2222:source\fatfs/ff.c **** 				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
2223:source\fatfs/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2224:source\fatfs/ff.c **** 					vol = (int)i;
2225:source\fatfs/ff.c **** 					*path = tt;
2226:source\fatfs/ff.c **** 				}
2227:source\fatfs/ff.c **** 			}
2228:source\fatfs/ff.c **** #endif
2229:source\fatfs/ff.c **** 			return vol;
2230:source\fatfs/ff.c **** 		}
2231:source\fatfs/ff.c **** #if _FS_RPATH && _VOLUMES >= 2
2232:source\fatfs/ff.c **** 		vol = CurrVol;	/* Current drive */
2233:source\fatfs/ff.c **** #else
2234:source\fatfs/ff.c **** 		vol = 0;		/* Drive 0 */
2235:source\fatfs/ff.c **** #endif
2236:source\fatfs/ff.c **** 	}
2237:source\fatfs/ff.c **** 	return vol;
2238:source\fatfs/ff.c **** }
 793              		.loc 1 2238 1 view .LVU262
 794 0034 10BD     		pop	{r4, pc}
 795              	.LVL83:
 796              	.L85:
2234:source\fatfs/ff.c **** #endif
 797              		.loc 1 2234 7 view .LVU263
 798 0036 0020     		movs	r0, #0
 799 0038 FCE7     		b	.L79
 800              		.cfi_endproc
 801              	.LFE158:
 803              		.section	.text.sync_window,"ax",%progbits
 804              		.align	1
 805              		.syntax unified
 806              		.thumb
 807              		.thumb_func
 809              	sync_window:
 810              	.LVL84:
 811              	.LFB132:
 776:source\fatfs/ff.c **** 	DWORD wsect;
 812              		.loc 1 776 1 is_stmt 1 view -0
 813              		.cfi_startproc
 814              		@ args = 0, pretend = 0, frame = 0
 815              		@ frame_needed = 0, uses_anonymous_args = 0
 777:source\fatfs/ff.c **** 	UINT nf;
 816              		.loc 1 777 2 view .LVU265
 778:source\fatfs/ff.c **** 	FRESULT res = FR_OK;
 817              		.loc 1 778 2 view .LVU266
 779:source\fatfs/ff.c **** 
 818              		.loc 1 779 2 view .LVU267
 782:source\fatfs/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 819              		.loc 1 782 2 view .LVU268
 776:source\fatfs/ff.c **** 	DWORD wsect;
 820              		.loc 1 776 1 is_stmt 0 view .LVU269
 821 0000 70B5     		push	{r4, r5, r6, lr}
 822              		.cfi_def_cfa_offset 16
 823              		.cfi_offset 4, -16
 824              		.cfi_offset 5, -12
 825              		.cfi_offset 6, -8
 826              		.cfi_offset 14, -4
 782:source\fatfs/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 827              		.loc 1 782 5 view .LVU270
 828 0002 90F80432 		ldrb	r3, [r0, #516]	@ zero_extendqisi2
 776:source\fatfs/ff.c **** 	DWORD wsect;
 829              		.loc 1 776 1 view .LVU271
 830 0006 0446     		mov	r4, r0
 782:source\fatfs/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 831              		.loc 1 782 5 view .LVU272
 832 0008 0BB9     		cbnz	r3, .L91
 833              	.LVL85:
 834              	.L93:
 779:source\fatfs/ff.c **** 
 835              		.loc 1 779 10 view .LVU273
 836 000a 0020     		movs	r0, #0
 837              	.L92:
 838              	.LVL86:
 796:source\fatfs/ff.c **** }
 839              		.loc 1 796 2 is_stmt 1 view .LVU274
 797:source\fatfs/ff.c **** #endif
 840              		.loc 1 797 1 is_stmt 0 view .LVU275
 841 000c 70BD     		pop	{r4, r5, r6, pc}
 842              	.LVL87:
 843              	.L91:
 783:source\fatfs/ff.c **** 		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 844              		.loc 1 783 3 is_stmt 1 view .LVU276
 783:source\fatfs/ff.c **** 		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 845              		.loc 1 783 9 is_stmt 0 view .LVU277
 846 000e D0F82C52 		ldr	r5, [r0, #556]
 847              	.LVL88:
 784:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 848              		.loc 1 784 3 is_stmt 1 view .LVU278
 784:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 849              		.loc 1 784 7 is_stmt 0 view .LVU279
 850 0012 0146     		mov	r1, r0
 851 0014 0123     		movs	r3, #1
 852 0016 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 853              	.LVL89:
 784:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 854              		.loc 1 784 7 view .LVU280
 855 001a 2A46     		mov	r2, r5
 856 001c FFF7FEFF 		bl	disk_write
 857              	.LVL90:
 784:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 858              		.loc 1 784 6 view .LVU281
 859 0020 C0B9     		cbnz	r0, .L96
 787:source\fatfs/ff.c **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 860              		.loc 1 787 4 is_stmt 1 view .LVU282
 788:source\fatfs/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 861              		.loc 1 788 14 is_stmt 0 view .LVU283
 862 0022 D4F82032 		ldr	r3, [r4, #544]
 788:source\fatfs/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 863              		.loc 1 788 7 view .LVU284
 864 0026 D4F81822 		ldr	r2, [r4, #536]
 787:source\fatfs/ff.c **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 865              		.loc 1 787 14 view .LVU285
 866 002a 84F80402 		strb	r0, [r4, #516]
 788:source\fatfs/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 867              		.loc 1 788 4 is_stmt 1 view .LVU286
 788:source\fatfs/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 868              		.loc 1 788 14 is_stmt 0 view .LVU287
 869 002e EB1A     		subs	r3, r5, r3
 788:source\fatfs/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 870              		.loc 1 788 7 view .LVU288
 871 0030 9342     		cmp	r3, r2
 872 0032 EAD2     		bcs	.L93
 789:source\fatfs/ff.c **** 					wsect += fs->fsize;
 873              		.loc 1 789 5 is_stmt 1 view .LVU289
 789:source\fatfs/ff.c **** 					wsect += fs->fsize;
 874              		.loc 1 789 13 is_stmt 0 view .LVU290
 875 0034 94F80362 		ldrb	r6, [r4, #515]	@ zero_extendqisi2
 876              	.LVL91:
 877              	.L94:
 789:source\fatfs/ff.c **** 					wsect += fs->fsize;
 878              		.loc 1 789 30 is_stmt 1 discriminator 1 view .LVU291
 879 0038 012E     		cmp	r6, #1
 880 003a E6D9     		bls	.L93
 790:source\fatfs/ff.c **** 					disk_write(fs->drv, fs->win.d8, wsect, 1);
 881              		.loc 1 790 6 discriminator 3 view .LVU292
 790:source\fatfs/ff.c **** 					disk_write(fs->drv, fs->win.d8, wsect, 1);
 882              		.loc 1 790 12 is_stmt 0 discriminator 3 view .LVU293
 883 003c D4F81832 		ldr	r3, [r4, #536]
 791:source\fatfs/ff.c **** 				}
 884              		.loc 1 791 6 discriminator 3 view .LVU294
 885 0040 94F80102 		ldrb	r0, [r4, #513]	@ zero_extendqisi2
 790:source\fatfs/ff.c **** 					disk_write(fs->drv, fs->win.d8, wsect, 1);
 886              		.loc 1 790 12 discriminator 3 view .LVU295
 887 0044 1D44     		add	r5, r5, r3
 888              	.LVL92:
 791:source\fatfs/ff.c **** 				}
 889              		.loc 1 791 6 is_stmt 1 discriminator 3 view .LVU296
 890 0046 2A46     		mov	r2, r5
 891 0048 0123     		movs	r3, #1
 892 004a 2146     		mov	r1, r4
 893 004c FFF7FEFF 		bl	disk_write
 894              	.LVL93:
 789:source\fatfs/ff.c **** 					wsect += fs->fsize;
 895              		.loc 1 789 38 discriminator 3 view .LVU297
 896 0050 013E     		subs	r6, r6, #1
 897              	.LVL94:
 789:source\fatfs/ff.c **** 					wsect += fs->fsize;
 898              		.loc 1 789 38 is_stmt 0 discriminator 3 view .LVU298
 899 0052 F1E7     		b	.L94
 900              	.LVL95:
 901              	.L96:
 785:source\fatfs/ff.c **** 		} else {
 902              		.loc 1 785 8 view .LVU299
 903 0054 0120     		movs	r0, #1
 904 0056 D9E7     		b	.L92
 905              		.cfi_endproc
 906              	.LFE132:
 908              		.section	.text.validate,"ax",%progbits
 909              		.align	1
 910              		.syntax unified
 911              		.thumb
 912              		.thumb_func
 914              	validate:
 915              	.LVL96:
 916              	.LFB161:
2239:source\fatfs/ff.c **** 
2240:source\fatfs/ff.c **** 
2241:source\fatfs/ff.c **** 
2242:source\fatfs/ff.c **** 
2243:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2244:source\fatfs/ff.c **** /* Load a sector and check if it is an FAT boot sector                   */
2245:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2246:source\fatfs/ff.c **** 
2247:source\fatfs/ff.c **** static
2248:source\fatfs/ff.c **** BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk 
2249:source\fatfs/ff.c **** 	FATFS* fs,	/* File system object */
2250:source\fatfs/ff.c **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
2251:source\fatfs/ff.c **** )
2252:source\fatfs/ff.c **** {
2253:source\fatfs/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
2254:source\fatfs/ff.c **** 	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
2255:source\fatfs/ff.c **** 		return 3;
2256:source\fatfs/ff.c **** 
2257:source\fatfs/ff.c **** 	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offs
2258:source\fatfs/ff.c **** 		return 2;
2259:source\fatfs/ff.c **** 
2260:source\fatfs/ff.c **** 	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
2261:source\fatfs/ff.c **** 		return 0;
2262:source\fatfs/ff.c **** 	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
2263:source\fatfs/ff.c **** 		return 0;
2264:source\fatfs/ff.c **** 
2265:source\fatfs/ff.c **** 	return 1;
2266:source\fatfs/ff.c **** }
2267:source\fatfs/ff.c **** 
2268:source\fatfs/ff.c **** 
2269:source\fatfs/ff.c **** 
2270:source\fatfs/ff.c **** 
2271:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2272:source\fatfs/ff.c **** /* Find logical drive and check if the volume is mounted                 */
2273:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2274:source\fatfs/ff.c **** 
2275:source\fatfs/ff.c **** static
2276:source\fatfs/ff.c **** FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
2277:source\fatfs/ff.c **** 	FATFS** rfs,		/* Pointer to pointer to the found file system object */
2278:source\fatfs/ff.c **** 	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
2279:source\fatfs/ff.c **** 	BYTE wmode			/* !=0: Check write protection for write access */
2280:source\fatfs/ff.c **** )
2281:source\fatfs/ff.c **** {
2282:source\fatfs/ff.c **** 	BYTE fmt, *pt;
2283:source\fatfs/ff.c **** 	int vol;
2284:source\fatfs/ff.c **** 	DSTATUS stat;
2285:source\fatfs/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
2286:source\fatfs/ff.c **** 	WORD nrsv;
2287:source\fatfs/ff.c **** 	FATFS *fs;
2288:source\fatfs/ff.c **** 	UINT i;
2289:source\fatfs/ff.c **** 
2290:source\fatfs/ff.c **** 
2291:source\fatfs/ff.c **** 	/* Get logical drive number from the path name */
2292:source\fatfs/ff.c **** 	*rfs = 0;
2293:source\fatfs/ff.c **** 	vol = get_ldnumber(path);
2294:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
2295:source\fatfs/ff.c **** 
2296:source\fatfs/ff.c **** 	/* Check if the file system object is valid or not */
2297:source\fatfs/ff.c **** 	fs = FatFs[vol];					/* Get pointer to the file system object */
2298:source\fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2299:source\fatfs/ff.c **** 
2300:source\fatfs/ff.c **** 	ENTER_FF(fs);						/* Lock the volume */
2301:source\fatfs/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
2302:source\fatfs/ff.c **** 
2303:source\fatfs/ff.c **** 	if (fs->fs_type) {					/* If the volume has been mounted */
2304:source\fatfs/ff.c **** 		stat = disk_status(fs->drv);
2305:source\fatfs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2306:source\fatfs/ff.c **** 			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
2307:source\fatfs/ff.c **** 				return FR_WRITE_PROTECTED;
2308:source\fatfs/ff.c **** 			return FR_OK;				/* The file system object is valid */
2309:source\fatfs/ff.c **** 		}
2310:source\fatfs/ff.c **** 	}
2311:source\fatfs/ff.c **** 
2312:source\fatfs/ff.c **** 	/* The file system object is not valid. */
2313:source\fatfs/ff.c **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
2314:source\fatfs/ff.c **** 
2315:source\fatfs/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
2316:source\fatfs/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
2317:source\fatfs/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2318:source\fatfs/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
2319:source\fatfs/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2320:source\fatfs/ff.c **** 	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
2321:source\fatfs/ff.c **** 		return FR_WRITE_PROTECTED;
2322:source\fatfs/ff.c **** #if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
2323:source\fatfs/ff.c **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
2324:source\fatfs/ff.c **** 		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
2325:source\fatfs/ff.c **** #endif
2326:source\fatfs/ff.c **** 	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
2327:source\fatfs/ff.c **** 	bsect = 0;
2328:source\fatfs/ff.c **** 	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
2329:source\fatfs/ff.c **** 	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
2330:source\fatfs/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
2331:source\fatfs/ff.c **** 			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
2332:source\fatfs/ff.c **** 			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
2333:source\fatfs/ff.c **** 		}
2334:source\fatfs/ff.c **** 		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
2335:source\fatfs/ff.c **** 		if (i) i--;
2336:source\fatfs/ff.c **** 		do {								/* Find an FAT volume */
2337:source\fatfs/ff.c **** 			bsect = br[i];
2338:source\fatfs/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
2339:source\fatfs/ff.c **** 		} while (!LD2PT(vol) && fmt && ++i < 4);
2340:source\fatfs/ff.c **** 	}
2341:source\fatfs/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2342:source\fatfs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
2343:source\fatfs/ff.c **** 
2344:source\fatfs/ff.c **** 	/* An FAT volume is found. Following code initializes the file system object */
2345:source\fatfs/ff.c **** 
2346:source\fatfs/ff.c **** 	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physic
2347:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
2348:source\fatfs/ff.c **** 
2349:source\fatfs/ff.c **** 	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
2350:source\fatfs/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
2351:source\fatfs/ff.c **** 	fs->fsize = fasize;
2352:source\fatfs/ff.c **** 
2353:source\fatfs/ff.c **** 	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
2354:source\fatfs/ff.c **** 	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
2355:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
2356:source\fatfs/ff.c **** 	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
2357:source\fatfs/ff.c **** 
2358:source\fatfs/ff.c **** 	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
2359:source\fatfs/ff.c **** 	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
2360:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
2361:source\fatfs/ff.c **** 
2362:source\fatfs/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
2363:source\fatfs/ff.c **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
2364:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
2365:source\fatfs/ff.c **** 
2366:source\fatfs/ff.c **** 	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
2367:source\fatfs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
2368:source\fatfs/ff.c **** 
2369:source\fatfs/ff.c **** 	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
2370:source\fatfs/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
2371:source\fatfs/ff.c **** 
2372:source\fatfs/ff.c **** 	/* Determine the FAT sub type */
2373:source\fatfs/ff.c **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
2374:source\fatfs/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2375:source\fatfs/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
2376:source\fatfs/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
2377:source\fatfs/ff.c **** 	fmt = FS_FAT12;
2378:source\fatfs/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
2379:source\fatfs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
2380:source\fatfs/ff.c **** 
2381:source\fatfs/ff.c **** 	/* Boundaries and Limits */
2382:source\fatfs/ff.c **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
2383:source\fatfs/ff.c **** 	fs->volbase = bsect;								/* Volume start sector */
2384:source\fatfs/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
2385:source\fatfs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
2386:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
2387:source\fatfs/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
2388:source\fatfs/ff.c **** 		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
2389:source\fatfs/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
2390:source\fatfs/ff.c **** 	} else {
2391:source\fatfs/ff.c **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
2392:source\fatfs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
2393:source\fatfs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
2394:source\fatfs/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2395:source\fatfs/ff.c **** 	}
2396:source\fatfs/ff.c **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size nee
2397:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
2398:source\fatfs/ff.c **** 
2399:source\fatfs/ff.c **** #if !_FS_READONLY
2400:source\fatfs/ff.c **** 	/* Initialize cluster allocation information */
2401:source\fatfs/ff.c **** 	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
2402:source\fatfs/ff.c **** 
2403:source\fatfs/ff.c **** 	/* Get fsinfo if available */
2404:source\fatfs/ff.c **** 	fs->fsi_flag = 0x80;
2405:source\fatfs/ff.c **** #if (_FS_NOFSINFO & 3) != 3
2406:source\fatfs/ff.c **** 	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
2407:source\fatfs/ff.c **** 		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
2408:source\fatfs/ff.c **** 		&& move_window(fs, bsect + 1) == FR_OK)
2409:source\fatfs/ff.c **** 	{
2410:source\fatfs/ff.c **** 		fs->fsi_flag = 0;
2411:source\fatfs/ff.c **** 		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2412:source\fatfs/ff.c **** 			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
2413:source\fatfs/ff.c **** 			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
2414:source\fatfs/ff.c **** 		{
2415:source\fatfs/ff.c **** #if (_FS_NOFSINFO & 1) == 0
2416:source\fatfs/ff.c **** 			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
2417:source\fatfs/ff.c **** #endif
2418:source\fatfs/ff.c **** #if (_FS_NOFSINFO & 2) == 0
2419:source\fatfs/ff.c **** 			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
2420:source\fatfs/ff.c **** #endif
2421:source\fatfs/ff.c **** 		}
2422:source\fatfs/ff.c **** 	}
2423:source\fatfs/ff.c **** #endif
2424:source\fatfs/ff.c **** #endif
2425:source\fatfs/ff.c **** 	fs->fs_type = fmt;	/* FAT sub-type */
2426:source\fatfs/ff.c **** 	fs->id = ++Fsid;	/* File system mount ID */
2427:source\fatfs/ff.c **** #if _FS_RPATH
2428:source\fatfs/ff.c **** 	fs->cdir = 0;		/* Set current directory to root */
2429:source\fatfs/ff.c **** #endif
2430:source\fatfs/ff.c **** #if _FS_LOCK			/* Clear file lock semaphores */
2431:source\fatfs/ff.c **** 	clear_lock(fs);
2432:source\fatfs/ff.c **** #endif
2433:source\fatfs/ff.c **** 
2434:source\fatfs/ff.c **** 	return FR_OK;
2435:source\fatfs/ff.c **** }
2436:source\fatfs/ff.c **** 
2437:source\fatfs/ff.c **** 
2438:source\fatfs/ff.c **** 
2439:source\fatfs/ff.c **** 
2440:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2441:source\fatfs/ff.c **** /* Check if the file/directory object is valid or not                    */
2442:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2443:source\fatfs/ff.c **** 
2444:source\fatfs/ff.c **** static
2445:source\fatfs/ff.c **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
2446:source\fatfs/ff.c **** 	void* obj		/* Pointer to the object FIL/DIR to check validity */
2447:source\fatfs/ff.c **** )
2448:source\fatfs/ff.c **** {
 917              		.loc 1 2448 1 is_stmt 1 view -0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 0
 920              		@ frame_needed = 0, uses_anonymous_args = 0
2449:source\fatfs/ff.c **** 	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 921              		.loc 1 2449 2 view .LVU301
2450:source\fatfs/ff.c **** 
2451:source\fatfs/ff.c **** 
2452:source\fatfs/ff.c **** 	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) 
 922              		.loc 1 2452 2 view .LVU302
2448:source\fatfs/ff.c **** 	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 923              		.loc 1 2448 1 is_stmt 0 view .LVU303
 924 0000 08B5     		push	{r3, lr}
 925              		.cfi_def_cfa_offset 8
 926              		.cfi_offset 3, -8
 927              		.cfi_offset 14, -4
 928              		.loc 1 2452 5 view .LVU304
 929 0002 90B1     		cbz	r0, .L98
 930              		.loc 1 2452 18 discriminator 1 view .LVU305
 931 0004 D0F80032 		ldr	r3, [r0, #512]
 932              		.loc 1 2452 11 discriminator 1 view .LVU306
 933 0008 7BB1     		cbz	r3, .L98
 934              		.loc 1 2452 23 discriminator 2 view .LVU307
 935 000a 93F80022 		ldrb	r2, [r3, #512]	@ zero_extendqisi2
 936 000e 62B1     		cbz	r2, .L98
 937              		.loc 1 2452 44 discriminator 3 view .LVU308
 938 0010 B3F80612 		ldrh	r1, [r3, #518]
 939 0014 B0F80422 		ldrh	r2, [r0, #516]
 940 0018 9142     		cmp	r1, r2
 941 001a 06D1     		bne	.L98
 942              		.loc 1 2452 74 discriminator 4 view .LVU309
 943 001c 93F80102 		ldrb	r0, [r3, #513]	@ zero_extendqisi2
 944              	.LVL97:
 945              		.loc 1 2452 74 discriminator 4 view .LVU310
 946 0020 FFF7FEFF 		bl	disk_status
 947              	.LVL98:
 948              		.loc 1 2452 70 discriminator 4 view .LVU311
 949 0024 10F00100 		ands	r0, r0, #1
 950 0028 00D0     		beq	.L99
 951              	.L98:
2453:source\fatfs/ff.c **** 		return FR_INVALID_OBJECT;
 952              		.loc 1 2453 10 view .LVU312
 953 002a 0920     		movs	r0, #9
 954              	.L99:
2454:source\fatfs/ff.c **** 
2455:source\fatfs/ff.c **** 	ENTER_FF(fil->fs);		/* Lock file system */
2456:source\fatfs/ff.c **** 
2457:source\fatfs/ff.c **** 	return FR_OK;
2458:source\fatfs/ff.c **** }
 955              		.loc 1 2458 1 view .LVU313
 956 002c 08BD     		pop	{r3, pc}
 957              		.cfi_endproc
 958              	.LFE161:
 960              		.section	.text.get_fileinfo,"ax",%progbits
 961              		.align	1
 962              		.syntax unified
 963              		.thumb
 964              		.thumb_func
 966              	get_fileinfo:
 967              	.LVL99:
 968              	.LFB155:
1777:source\fatfs/ff.c **** 	UINT i;
 969              		.loc 1 1777 1 is_stmt 1 view -0
 970              		.cfi_startproc
 971              		@ args = 0, pretend = 0, frame = 0
 972              		@ frame_needed = 0, uses_anonymous_args = 0
1778:source\fatfs/ff.c **** 	TCHAR *p, c;
 973              		.loc 1 1778 2 view .LVU315
1779:source\fatfs/ff.c **** 	BYTE *dir;
 974              		.loc 1 1779 2 view .LVU316
1780:source\fatfs/ff.c **** #if _USE_LFN
 975              		.loc 1 1780 2 view .LVU317
1782:source\fatfs/ff.c **** #endif
 976              		.loc 1 1782 2 view .LVU318
1785:source\fatfs/ff.c **** 	if (dp->sect) {		/* Get SFN */
 977              		.loc 1 1785 2 view .LVU319
1786:source\fatfs/ff.c **** 		dir = dp->dir;
 978              		.loc 1 1786 5 is_stmt 0 view .LVU320
 979 0000 D0F81022 		ldr	r2, [r0, #528]
1777:source\fatfs/ff.c **** 	UINT i;
 980              		.loc 1 1777 1 view .LVU321
 981 0004 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 982              		.cfi_def_cfa_offset 24
 983              		.cfi_offset 4, -24
 984              		.cfi_offset 5, -20
 985              		.cfi_offset 6, -16
 986              		.cfi_offset 7, -12
 987              		.cfi_offset 8, -8
 988              		.cfi_offset 14, -4
1785:source\fatfs/ff.c **** 	if (dp->sect) {		/* Get SFN */
 989              		.loc 1 1785 4 view .LVU322
 990 0008 01F10903 		add	r3, r1, #9
 991              	.LVL100:
1786:source\fatfs/ff.c **** 		dir = dp->dir;
 992              		.loc 1 1786 2 is_stmt 1 view .LVU323
1777:source\fatfs/ff.c **** 	UINT i;
 993              		.loc 1 1777 1 is_stmt 0 view .LVU324
 994 000c 0D46     		mov	r5, r1
1786:source\fatfs/ff.c **** 		dir = dp->dir;
 995              		.loc 1 1786 5 view .LVU325
 996 000e 002A     		cmp	r2, #0
 997 0010 3AD0     		beq	.L113
1787:source\fatfs/ff.c **** 		i = 0;
 998              		.loc 1 1787 3 is_stmt 1 view .LVU326
1787:source\fatfs/ff.c **** 		i = 0;
 999              		.loc 1 1787 7 is_stmt 0 view .LVU327
 1000 0012 D0F81442 		ldr	r4, [r0, #532]
 1001              	.LVL101:
1788:source\fatfs/ff.c **** 		while (i < 11) {		/* Copy name body and extension */
 1002              		.loc 1 1788 3 is_stmt 1 view .LVU328
1789:source\fatfs/ff.c **** 			c = (TCHAR)dir[i++];
 1003              		.loc 1 1789 3 view .LVU329
1789:source\fatfs/ff.c **** 			c = (TCHAR)dir[i++];
 1004              		.loc 1 1789 12 view .LVU330
1788:source\fatfs/ff.c **** 		while (i < 11) {		/* Copy name body and extension */
 1005              		.loc 1 1788 5 is_stmt 0 view .LVU331
 1006 0016 0026     		movs	r6, #0
 1007 0018 671E     		subs	r7, r4, #1
1793:source\fatfs/ff.c **** #if _USE_LFN
 1008              		.loc 1 1793 21 view .LVU332
 1009 001a 4FF02E0C 		mov	ip, #46
 1010 001e 4FF0E50E 		mov	lr, #229
 1011              	.LVL102:
 1012              	.L122:
1790:source\fatfs/ff.c **** 			if (c == ' ') continue;				/* Skip padding spaces */
 1013              		.loc 1 1790 4 is_stmt 1 view .LVU333
1790:source\fatfs/ff.c **** 			if (c == ' ') continue;				/* Skip padding spaces */
 1014              		.loc 1 1790 6 is_stmt 0 view .LVU334
 1015 0022 17F8012F 		ldrb	r2, [r7, #1]!	@ zero_extendqisi2
1791:source\fatfs/ff.c **** 			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 1016              		.loc 1 1791 7 view .LVU335
 1017 0026 202A     		cmp	r2, #32
1790:source\fatfs/ff.c **** 			if (c == ' ') continue;				/* Skip padding spaces */
 1018              		.loc 1 1790 20 view .LVU336
 1019 0028 06F10106 		add	r6, r6, #1
 1020              	.LVL103:
1791:source\fatfs/ff.c **** 			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 1021              		.loc 1 1791 4 is_stmt 1 view .LVU337
1791:source\fatfs/ff.c **** 			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 1022              		.loc 1 1791 7 is_stmt 0 view .LVU338
 1023 002c 22D0     		beq	.L114
1792:source\fatfs/ff.c **** 			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 1024              		.loc 1 1792 4 is_stmt 1 view .LVU339
1792:source\fatfs/ff.c **** 			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 1025              		.loc 1 1792 7 is_stmt 0 view .LVU340
 1026 002e 052A     		cmp	r2, #5
 1027 0030 09D1     		bne	.L115
1792:source\fatfs/ff.c **** 			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 1028              		.loc 1 1792 20 is_stmt 1 view .LVU341
 1029              	.LVL104:
1793:source\fatfs/ff.c **** #if _USE_LFN
 1030              		.loc 1 1793 4 view .LVU342
1793:source\fatfs/ff.c **** #if _USE_LFN
 1031              		.loc 1 1793 7 is_stmt 0 view .LVU343
 1032 0032 092E     		cmp	r6, #9
 1033 0034 3ED1     		bne	.L130
1793:source\fatfs/ff.c **** #if _USE_LFN
 1034              		.loc 1 1793 16 is_stmt 1 view .LVU344
 1035              	.LVL105:
1793:source\fatfs/ff.c **** #if _USE_LFN
 1036              		.loc 1 1793 21 is_stmt 0 view .LVU345
 1037 0036 1A46     		mov	r2, r3
 1038 0038 2E21     		movs	r1, #46
 1039 003a 02F8021B 		strb	r1, [r2], #2
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 1040              		.loc 1 1795 4 is_stmt 1 view .LVU346
 1041              	.LVL106:
1804:source\fatfs/ff.c **** 		}
 1042              		.loc 1 1804 4 view .LVU347
1804:source\fatfs/ff.c **** 		}
 1043              		.loc 1 1804 9 is_stmt 0 view .LVU348
 1044 003e 83F801E0 		strb	lr, [r3, #1]
 1045              	.LVL107:
1789:source\fatfs/ff.c **** 			c = (TCHAR)dir[i++];
 1046              		.loc 1 1789 12 is_stmt 1 view .LVU349
1804:source\fatfs/ff.c **** 		}
 1047              		.loc 1 1804 6 is_stmt 0 view .LVU350
 1048 0042 1346     		mov	r3, r2
 1049 0044 EDE7     		b	.L122
 1050              	.LVL108:
 1051              	.L115:
1793:source\fatfs/ff.c **** #if _USE_LFN
 1052              		.loc 1 1793 4 is_stmt 1 view .LVU351
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 1053              		.loc 1 1795 8 is_stmt 0 view .LVU352
 1054 0046 A2F14101 		sub	r1, r2, #65
1793:source\fatfs/ff.c **** #if _USE_LFN
 1055              		.loc 1 1793 7 view .LVU353
 1056 004a 092E     		cmp	r6, #9
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 1057              		.loc 1 1795 8 view .LVU354
 1058 004c C9B2     		uxtb	r1, r1
1793:source\fatfs/ff.c **** #if _USE_LFN
 1059              		.loc 1 1793 7 view .LVU355
 1060 004e 27D1     		bne	.L118
1793:source\fatfs/ff.c **** #if _USE_LFN
 1061              		.loc 1 1793 16 is_stmt 1 view .LVU356
 1062              	.LVL109:
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 1063              		.loc 1 1795 7 is_stmt 0 view .LVU357
 1064 0050 1929     		cmp	r1, #25
1793:source\fatfs/ff.c **** #if _USE_LFN
 1065              		.loc 1 1793 21 view .LVU358
 1066 0052 83F800C0 		strb	ip, [r3]
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 1067              		.loc 1 1795 4 is_stmt 1 view .LVU359
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 1068              		.loc 1 1795 7 is_stmt 0 view .LVU360
 1069 0056 02D9     		bls	.L119
 1070              	.LVL110:
1804:source\fatfs/ff.c **** 		}
 1071              		.loc 1 1804 4 is_stmt 1 view .LVU361
1804:source\fatfs/ff.c **** 		}
 1072              		.loc 1 1804 9 is_stmt 0 view .LVU362
 1073 0058 5A70     		strb	r2, [r3, #1]
 1074              	.LVL111:
1789:source\fatfs/ff.c **** 			c = (TCHAR)dir[i++];
 1075              		.loc 1 1789 12 is_stmt 1 view .LVU363
1804:source\fatfs/ff.c **** 		}
 1076              		.loc 1 1804 6 is_stmt 0 view .LVU364
 1077 005a 0233     		adds	r3, r3, #2
 1078              	.LVL112:
1804:source\fatfs/ff.c **** 		}
 1079              		.loc 1 1804 6 view .LVU365
 1080 005c E1E7     		b	.L122
 1081              	.LVL113:
 1082              	.L119:
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 1083              		.loc 1 1795 26 view .LVU366
 1084 005e 217B     		ldrb	r1, [r4, #12]	@ zero_extendqisi2
1793:source\fatfs/ff.c **** #if _USE_LFN
 1085              		.loc 1 1793 18 view .LVU367
 1086 0060 0133     		adds	r3, r3, #1
 1087              	.LVL114:
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 1088              		.loc 1 1795 57 view .LVU368
 1089 0062 4FF01008 		mov	r8, #16
 1090              	.LVL115:
 1091              	.L120:
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 1092              		.loc 1 1795 19 discriminator 5 view .LVU369
 1093 0066 18EA010F 		tst	r8, r1
 1094 006a 01D0     		beq	.L116
1796:source\fatfs/ff.c **** #if _LFN_UNICODE
 1095              		.loc 1 1796 5 is_stmt 1 view .LVU370
1796:source\fatfs/ff.c **** #if _LFN_UNICODE
 1096              		.loc 1 1796 7 is_stmt 0 view .LVU371
 1097 006c 2032     		adds	r2, r2, #32
 1098              	.LVL116:
1796:source\fatfs/ff.c **** #if _LFN_UNICODE
 1099              		.loc 1 1796 7 view .LVU372
 1100 006e D2B2     		uxtb	r2, r2
 1101              	.LVL117:
 1102              	.L116:
1804:source\fatfs/ff.c **** 		}
 1103              		.loc 1 1804 4 is_stmt 1 view .LVU373
1804:source\fatfs/ff.c **** 		}
 1104              		.loc 1 1804 9 is_stmt 0 view .LVU374
 1105 0070 03F8012B 		strb	r2, [r3], #1
 1106              	.LVL118:
 1107              	.L114:
1789:source\fatfs/ff.c **** 			c = (TCHAR)dir[i++];
 1108              		.loc 1 1789 12 is_stmt 1 view .LVU375
 1109 0074 0B2E     		cmp	r6, #11
 1110 0076 D4D1     		bne	.L122
1806:source\fatfs/ff.c **** 		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 1111              		.loc 1 1806 3 view .LVU376
1806:source\fatfs/ff.c **** 		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 1112              		.loc 1 1806 16 is_stmt 0 view .LVU377
 1113 0078 E27A     		ldrb	r2, [r4, #11]	@ zero_extendqisi2
 1114              	.LVL119:
1806:source\fatfs/ff.c **** 		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 1115              		.loc 1 1806 16 view .LVU378
 1116 007a 2A72     		strb	r2, [r5, #8]
1807:source\fatfs/ff.c **** 		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 1117              		.loc 1 1807 3 is_stmt 1 view .LVU379
1807:source\fatfs/ff.c **** 		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 1118              		.loc 1 1807 16 is_stmt 0 view .LVU380
 1119 007c E269     		ldr	r2, [r4, #28]	@ unaligned
1807:source\fatfs/ff.c **** 		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 1120              		.loc 1 1807 14 view .LVU381
 1121 007e 2A60     		str	r2, [r5]
1808:source\fatfs/ff.c **** 		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 1122              		.loc 1 1808 3 is_stmt 1 view .LVU382
 1123 0080 228B     		ldrh	r2, [r4, #24]	@ unaligned
1808:source\fatfs/ff.c **** 		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 1124              		.loc 1 1808 14 is_stmt 0 view .LVU383
 1125 0082 AA80     		strh	r2, [r5, #4]	@ movhi
1809:source\fatfs/ff.c **** 	}
 1126              		.loc 1 1809 3 is_stmt 1 view .LVU384
 1127 0084 E28A     		ldrh	r2, [r4, #22]	@ unaligned
1809:source\fatfs/ff.c **** 	}
 1128              		.loc 1 1809 14 is_stmt 0 view .LVU385
 1129 0086 EA80     		strh	r2, [r5, #6]	@ movhi
 1130              	.LVL120:
 1131              	.L113:
1811:source\fatfs/ff.c **** 
 1132              		.loc 1 1811 2 is_stmt 1 view .LVU386
1811:source\fatfs/ff.c **** 
 1133              		.loc 1 1811 5 is_stmt 0 view .LVU387
 1134 0088 0024     		movs	r4, #0
 1135 008a 1C70     		strb	r4, [r3]
1814:source\fatfs/ff.c **** 		i = 0; p = fno->lfname;
 1136              		.loc 1 1814 2 is_stmt 1 view .LVU388
1814:source\fatfs/ff.c **** 		i = 0; p = fno->lfname;
 1137              		.loc 1 1814 9 is_stmt 0 view .LVU389
 1138 008c AE69     		ldr	r6, [r5, #24]
1814:source\fatfs/ff.c **** 		i = 0; p = fno->lfname;
 1139              		.loc 1 1814 5 view .LVU390
 1140 008e 2EB1     		cbz	r6, .L112
1815:source\fatfs/ff.c **** 		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 1141              		.loc 1 1815 3 is_stmt 1 view .LVU391
 1142              	.LVL121:
1815:source\fatfs/ff.c **** 		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 1143              		.loc 1 1815 10 view .LVU392
1816:source\fatfs/ff.c **** 			lfn = dp->lfn;
 1144              		.loc 1 1816 3 view .LVU393
1816:source\fatfs/ff.c **** 			lfn = dp->lfn;
 1145              		.loc 1 1816 6 is_stmt 0 view .LVU394
 1146 0090 D0F81032 		ldr	r3, [r0, #528]
 1147 0094 83B9     		cbnz	r3, .L124
 1148              	.LVL122:
 1149              	.L126:
1815:source\fatfs/ff.c **** 		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 1150              		.loc 1 1815 5 view .LVU395
 1151 0096 0024     		movs	r4, #0
 1152              	.L125:
 1153              	.LVL123:
1829:source\fatfs/ff.c **** 	}
 1154              		.loc 1 1829 3 is_stmt 1 view .LVU396
1829:source\fatfs/ff.c **** 	}
 1155              		.loc 1 1829 8 is_stmt 0 view .LVU397
 1156 0098 0023     		movs	r3, #0
 1157 009a 3355     		strb	r3, [r6, r4]
 1158              	.LVL124:
 1159              	.L112:
1832:source\fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
 1160              		.loc 1 1832 1 view .LVU398
 1161 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1162              	.LVL125:
 1163              	.L118:
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 1164              		.loc 1 1795 4 is_stmt 1 view .LVU399
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 1165              		.loc 1 1795 7 is_stmt 0 view .LVU400
 1166 00a0 1929     		cmp	r1, #25
 1167 00a2 E5D8     		bhi	.L116
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 1168              		.loc 1 1795 57 discriminator 1 view .LVU401
 1169 00a4 082E     		cmp	r6, #8
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 1170              		.loc 1 1795 26 discriminator 1 view .LVU402
 1171 00a6 217B     		ldrb	r1, [r4, #12]	@ zero_extendqisi2
1795:source\fatfs/ff.c **** 				c += 0x20;			/* To lower */
 1172              		.loc 1 1795 57 discriminator 1 view .LVU403
 1173 00a8 8CBF     		ite	hi
 1174 00aa 4FF01008 		movhi	r8, #16
 1175 00ae 4FF00808 		movls	r8, #8
 1176 00b2 D8E7     		b	.L120
 1177              	.LVL126:
 1178              	.L130:
1792:source\fatfs/ff.c **** 			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 1179              		.loc 1 1792 22 view .LVU404
 1180 00b4 E522     		movs	r2, #229
 1181 00b6 DBE7     		b	.L116
 1182              	.LVL127:
 1183              	.L124:
1816:source\fatfs/ff.c **** 			lfn = dp->lfn;
 1184              		.loc 1 1816 16 discriminator 1 view .LVU405
 1185 00b8 EB69     		ldr	r3, [r5, #28]
 1186 00ba 002B     		cmp	r3, #0
 1187 00bc EBD0     		beq	.L126
1816:source\fatfs/ff.c **** 			lfn = dp->lfn;
 1188              		.loc 1 1816 31 discriminator 2 view .LVU406
 1189 00be B0F82422 		ldrh	r2, [r0, #548]
 1190 00c2 4FF6FF73 		movw	r3, #65535
 1191 00c6 9A42     		cmp	r2, r3
 1192 00c8 E5D0     		beq	.L126
1817:source\fatfs/ff.c **** 			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 1193              		.loc 1 1817 4 is_stmt 1 view .LVU407
1817:source\fatfs/ff.c **** 			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 1194              		.loc 1 1817 8 is_stmt 0 view .LVU408
 1195 00ca D0F82072 		ldr	r7, [r0, #544]
 1196              	.LVL128:
1818:source\fatfs/ff.c **** #if !_LFN_UNICODE
 1197              		.loc 1 1818 4 is_stmt 1 view .LVU409
 1198              	.L127:
1818:source\fatfs/ff.c **** #if !_LFN_UNICODE
 1199              		.loc 1 1818 24 view .LVU410
1818:source\fatfs/ff.c **** #if !_LFN_UNICODE
 1200              		.loc 1 1818 14 is_stmt 0 view .LVU411
 1201 00ce 37F8020B 		ldrh	r0, [r7], #2
 1202              	.LVL129:
1818:source\fatfs/ff.c **** #if !_LFN_UNICODE
 1203              		.loc 1 1818 24 view .LVU412
 1204 00d2 0028     		cmp	r0, #0
 1205 00d4 E0D0     		beq	.L125
1820:source\fatfs/ff.c **** 				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 1206              		.loc 1 1820 5 is_stmt 1 view .LVU413
1820:source\fatfs/ff.c **** 				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 1207              		.loc 1 1820 9 is_stmt 0 view .LVU414
 1208 00d6 0021     		movs	r1, #0
 1209 00d8 FFF7FEFF 		bl	ff_convert
 1210              	.LVL130:
1821:source\fatfs/ff.c **** 				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
 1211              		.loc 1 1821 5 is_stmt 1 view .LVU415
1821:source\fatfs/ff.c **** 				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
 1212              		.loc 1 1821 8 is_stmt 0 view .LVU416
 1213 00dc 0028     		cmp	r0, #0
 1214 00de DAD0     		beq	.L126
1822:source\fatfs/ff.c **** 					p[i++] = (TCHAR)(w >> 8);
 1215              		.loc 1 1822 5 is_stmt 1 view .LVU417
1822:source\fatfs/ff.c **** 					p[i++] = (TCHAR)(w >> 8);
 1216              		.loc 1 1822 8 is_stmt 0 view .LVU418
 1217 00e0 FF28     		cmp	r0, #255
1823:source\fatfs/ff.c **** #endif
 1218              		.loc 1 1823 6 is_stmt 1 view .LVU419
 1219              	.LVL131:
1823:source\fatfs/ff.c **** #endif
 1220              		.loc 1 1823 15 is_stmt 0 view .LVU420
 1221 00e2 84BF     		itt	hi
 1222 00e4 030A     		lsrhi	r3, r0, #8
 1223 00e6 3355     		strbhi	r3, [r6, r4]
1825:source\fatfs/ff.c **** 				p[i++] = (TCHAR)w;
 1224              		.loc 1 1825 26 view .LVU421
 1225 00e8 EB69     		ldr	r3, [r5, #28]
1823:source\fatfs/ff.c **** #endif
 1226              		.loc 1 1823 9 view .LVU422
 1227 00ea 88BF     		it	hi
 1228 00ec 0134     		addhi	r4, r4, #1
 1229              	.LVL132:
1825:source\fatfs/ff.c **** 				p[i++] = (TCHAR)w;
 1230              		.loc 1 1825 5 is_stmt 1 view .LVU423
1825:source\fatfs/ff.c **** 				p[i++] = (TCHAR)w;
 1231              		.loc 1 1825 26 is_stmt 0 view .LVU424
 1232 00ee 013B     		subs	r3, r3, #1
1825:source\fatfs/ff.c **** 				p[i++] = (TCHAR)w;
 1233              		.loc 1 1825 8 view .LVU425
 1234 00f0 A342     		cmp	r3, r4
 1235 00f2 D0D9     		bls	.L126
1826:source\fatfs/ff.c **** 			}
 1236              		.loc 1 1826 5 is_stmt 1 view .LVU426
 1237              	.LVL133:
1826:source\fatfs/ff.c **** 			}
 1238              		.loc 1 1826 14 is_stmt 0 view .LVU427
 1239 00f4 3055     		strb	r0, [r6, r4]
1826:source\fatfs/ff.c **** 			}
 1240              		.loc 1 1826 8 view .LVU428
 1241 00f6 0134     		adds	r4, r4, #1
 1242              	.LVL134:
1826:source\fatfs/ff.c **** 			}
 1243              		.loc 1 1826 8 view .LVU429
 1244 00f8 E9E7     		b	.L127
 1245              		.cfi_endproc
 1246              	.LFE155:
 1248              		.section	.text.move_window,"ax",%progbits
 1249              		.align	1
 1250              		.syntax unified
 1251              		.thumb
 1252              		.thumb_func
 1254              	move_window:
 1255              	.LVL135:
 1256              	.LFB133:
 806:source\fatfs/ff.c **** 	FRESULT res = FR_OK;
 1257              		.loc 1 806 1 is_stmt 1 view -0
 1258              		.cfi_startproc
 1259              		@ args = 0, pretend = 0, frame = 0
 1260              		@ frame_needed = 0, uses_anonymous_args = 0
 807:source\fatfs/ff.c **** 
 1261              		.loc 1 807 2 view .LVU431
 810:source\fatfs/ff.c **** #if !_FS_READONLY
 1262              		.loc 1 810 2 view .LVU432
 806:source\fatfs/ff.c **** 	FRESULT res = FR_OK;
 1263              		.loc 1 806 1 is_stmt 0 view .LVU433
 1264 0000 38B5     		push	{r3, r4, r5, lr}
 1265              		.cfi_def_cfa_offset 16
 1266              		.cfi_offset 3, -16
 1267              		.cfi_offset 4, -12
 1268              		.cfi_offset 5, -8
 1269              		.cfi_offset 14, -4
 810:source\fatfs/ff.c **** #if !_FS_READONLY
 1270              		.loc 1 810 5 view .LVU434
 1271 0002 D0F82C32 		ldr	r3, [r0, #556]
 1272 0006 8B42     		cmp	r3, r1
 806:source\fatfs/ff.c **** 	FRESULT res = FR_OK;
 1273              		.loc 1 806 1 view .LVU435
 1274 0008 0546     		mov	r5, r0
 1275 000a 0C46     		mov	r4, r1
 810:source\fatfs/ff.c **** #if !_FS_READONLY
 1276              		.loc 1 810 5 view .LVU436
 1277 000c 11D0     		beq	.L153
 812:source\fatfs/ff.c **** #endif
 1278              		.loc 1 812 3 is_stmt 1 view .LVU437
 812:source\fatfs/ff.c **** #endif
 1279              		.loc 1 812 9 is_stmt 0 view .LVU438
 1280 000e FFF7FEFF 		bl	sync_window
 1281              	.LVL136:
 814:source\fatfs/ff.c **** 			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 1282              		.loc 1 814 3 is_stmt 1 view .LVU439
 814:source\fatfs/ff.c **** 			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 1283              		.loc 1 814 6 is_stmt 0 view .LVU440
 1284 0012 68B9     		cbnz	r0, .L151
 1285              	.LVL137:
 1286              	.LBB6:
 1287              	.LBI6:
 802:source\fatfs/ff.c **** 	FATFS* fs,		/* File system object */
 1288              		.loc 1 802 9 is_stmt 1 view .LVU441
 1289              	.LBB7:
 815:source\fatfs/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 1290              		.loc 1 815 4 view .LVU442
 815:source\fatfs/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 1291              		.loc 1 815 8 is_stmt 0 view .LVU443
 1292 0014 2246     		mov	r2, r4
 1293 0016 95F80102 		ldrb	r0, [r5, #513]	@ zero_extendqisi2
 1294              	.LVL138:
 815:source\fatfs/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 1295              		.loc 1 815 8 view .LVU444
 1296 001a 0123     		movs	r3, #1
 1297 001c 2946     		mov	r1, r5
 1298 001e FFF7FEFF 		bl	disk_read
 1299              	.LVL139:
 817:source\fatfs/ff.c **** 			}
 1300              		.loc 1 817 9 view .LVU445
 1301 0022 0028     		cmp	r0, #0
 1302 0024 1CBF     		itt	ne
 1303 0026 4FF0FF34 		movne	r4, #-1
 1304              	.LVL140:
 817:source\fatfs/ff.c **** 			}
 1305              		.loc 1 817 9 view .LVU446
 1306 002a 0120     		movne	r0, #1
 1307              	.LVL141:
 819:source\fatfs/ff.c **** 		}
 1308              		.loc 1 819 4 is_stmt 1 view .LVU447
 819:source\fatfs/ff.c **** 		}
 1309              		.loc 1 819 16 is_stmt 0 view .LVU448
 1310 002c C5F82C42 		str	r4, [r5, #556]
 822:source\fatfs/ff.c **** }
 1311              		.loc 1 822 2 is_stmt 1 view .LVU449
 1312              	.LVL142:
 1313              	.L151:
 822:source\fatfs/ff.c **** }
 1314              		.loc 1 822 2 is_stmt 0 view .LVU450
 1315              	.LBE7:
 1316              	.LBE6:
 822:source\fatfs/ff.c **** }
 1317              		.loc 1 822 2 is_stmt 1 view .LVU451
 823:source\fatfs/ff.c **** 
 1318              		.loc 1 823 1 is_stmt 0 view .LVU452
 1319 0030 38BD     		pop	{r3, r4, r5, pc}
 1320              	.LVL143:
 1321              	.L153:
 807:source\fatfs/ff.c **** 
 1322              		.loc 1 807 10 view .LVU453
 1323 0032 0020     		movs	r0, #0
 1324              	.LVL144:
 807:source\fatfs/ff.c **** 
 1325              		.loc 1 807 10 view .LVU454
 1326 0034 FCE7     		b	.L151
 1327              		.cfi_endproc
 1328              	.LFE133:
 1330              		.section	.text.check_fs,"ax",%progbits
 1331              		.align	1
 1332              		.syntax unified
 1333              		.thumb
 1334              		.thumb_func
 1336              	check_fs:
 1337              	.LVL145:
 1338              	.LFB159:
2252:source\fatfs/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 1339              		.loc 1 2252 1 is_stmt 1 view -0
 1340              		.cfi_startproc
 1341              		@ args = 0, pretend = 0, frame = 0
 1342              		@ frame_needed = 0, uses_anonymous_args = 0
2253:source\fatfs/ff.c **** 	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 1343              		.loc 1 2253 12 is_stmt 0 view .LVU456
 1344 0000 0023     		movs	r3, #0
2252:source\fatfs/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 1345              		.loc 1 2252 1 view .LVU457
 1346 0002 10B5     		push	{r4, lr}
 1347              		.cfi_def_cfa_offset 8
 1348              		.cfi_offset 4, -8
 1349              		.cfi_offset 14, -4
2253:source\fatfs/ff.c **** 	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 1350              		.loc 1 2253 12 view .LVU458
 1351 0004 80F80432 		strb	r3, [r0, #516]
2253:source\fatfs/ff.c **** 	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 1352              		.loc 1 2253 29 view .LVU459
 1353 0008 4FF0FF33 		mov	r3, #-1
 1354 000c C0F82C32 		str	r3, [r0, #556]
2252:source\fatfs/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 1355              		.loc 1 2252 1 view .LVU460
 1356 0010 0446     		mov	r4, r0
2253:source\fatfs/ff.c **** 	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 1357              		.loc 1 2253 2 is_stmt 1 view .LVU461
2253:source\fatfs/ff.c **** 	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 1358              		.loc 1 2253 17 view .LVU462
2254:source\fatfs/ff.c **** 		return 3;
 1359              		.loc 1 2254 2 view .LVU463
2254:source\fatfs/ff.c **** 		return 3;
 1360              		.loc 1 2254 6 is_stmt 0 view .LVU464
 1361 0012 FFF7FEFF 		bl	move_window
 1362              	.LVL146:
2254:source\fatfs/ff.c **** 		return 3;
 1363              		.loc 1 2254 5 view .LVU465
 1364 0016 A0B9     		cbnz	r0, .L157
2257:source\fatfs/ff.c **** 		return 2;
 1365              		.loc 1 2257 2 is_stmt 1 view .LVU466
2257:source\fatfs/ff.c **** 		return 2;
 1366              		.loc 1 2257 5 is_stmt 0 view .LVU467
 1367 0018 B4F8FE21 		ldrh	r2, [r4, #510]
 1368 001c 4AF65523 		movw	r3, #43605
 1369 0020 9A42     		cmp	r2, r3
 1370 0022 10D1     		bne	.L158
 1371              	.LVL147:
 1372              	.LBB10:
 1373              	.LBI10:
2248:source\fatfs/ff.c **** 	FATFS* fs,	/* File system object */
 1374              		.loc 1 2248 6 is_stmt 1 view .LVU468
 1375              	.LBB11:
2260:source\fatfs/ff.c **** 		return 0;
 1376              		.loc 1 2260 2 view .LVU469
2260:source\fatfs/ff.c **** 		return 0;
 1377              		.loc 1 2260 7 is_stmt 0 view .LVU470
 1378 0024 D4F83630 		ldr	r3, [r4, #54]	@ unaligned
2260:source\fatfs/ff.c **** 		return 0;
 1379              		.loc 1 2260 5 view .LVU471
 1380 0028 084A     		ldr	r2, .L159
2260:source\fatfs/ff.c **** 		return 0;
 1381              		.loc 1 2260 44 view .LVU472
 1382 002a 23F07F43 		bic	r3, r3, #-16777216
2260:source\fatfs/ff.c **** 		return 0;
 1383              		.loc 1 2260 5 view .LVU473
 1384 002e 9342     		cmp	r3, r2
 1385 0030 06D0     		beq	.L156
2262:source\fatfs/ff.c **** 		return 0;
 1386              		.loc 1 2262 2 is_stmt 1 view .LVU474
2262:source\fatfs/ff.c **** 		return 0;
 1387              		.loc 1 2262 7 is_stmt 0 view .LVU475
 1388 0032 D4F85200 		ldr	r0, [r4, #82]	@ unaligned
2262:source\fatfs/ff.c **** 		return 0;
 1389              		.loc 1 2262 46 view .LVU476
 1390 0036 20F07F40 		bic	r0, r0, #-16777216
2262:source\fatfs/ff.c **** 		return 0;
 1391              		.loc 1 2262 5 view .LVU477
 1392 003a 801A     		subs	r0, r0, r2
 1393 003c 18BF     		it	ne
 1394 003e 0120     		movne	r0, #1
 1395              	.LVL148:
 1396              	.L156:
2262:source\fatfs/ff.c **** 		return 0;
 1397              		.loc 1 2262 5 view .LVU478
 1398              	.LBE11:
 1399              	.LBE10:
2266:source\fatfs/ff.c **** 
 1400              		.loc 1 2266 1 view .LVU479
 1401 0040 10BD     		pop	{r4, pc}
 1402              	.LVL149:
 1403              	.L157:
2255:source\fatfs/ff.c **** 
 1404              		.loc 1 2255 10 view .LVU480
 1405 0042 0320     		movs	r0, #3
 1406 0044 FCE7     		b	.L156
 1407              	.L158:
2258:source\fatfs/ff.c **** 
 1408              		.loc 1 2258 10 view .LVU481
 1409 0046 0220     		movs	r0, #2
 1410 0048 FAE7     		b	.L156
 1411              	.L160:
 1412 004a 00BF     		.align	2
 1413              	.L159:
 1414 004c 46415400 		.word	5521734
 1415              		.cfi_endproc
 1416              	.LFE159:
 1418              		.section	.text.find_volume,"ax",%progbits
 1419              		.align	1
 1420              		.syntax unified
 1421              		.thumb
 1422              		.thumb_func
 1424              	find_volume:
 1425              	.LVL150:
 1426              	.LFB160:
2281:source\fatfs/ff.c **** 	BYTE fmt, *pt;
 1427              		.loc 1 2281 1 is_stmt 1 view -0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 16
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
2282:source\fatfs/ff.c **** 	int vol;
 1431              		.loc 1 2282 2 view .LVU483
2283:source\fatfs/ff.c **** 	DSTATUS stat;
 1432              		.loc 1 2283 2 view .LVU484
2284:source\fatfs/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
 1433              		.loc 1 2284 2 view .LVU485
2285:source\fatfs/ff.c **** 	WORD nrsv;
 1434              		.loc 1 2285 2 view .LVU486
2286:source\fatfs/ff.c **** 	FATFS *fs;
 1435              		.loc 1 2286 2 view .LVU487
2287:source\fatfs/ff.c **** 	UINT i;
 1436              		.loc 1 2287 2 view .LVU488
2288:source\fatfs/ff.c **** 
 1437              		.loc 1 2288 2 view .LVU489
2292:source\fatfs/ff.c **** 	vol = get_ldnumber(path);
 1438              		.loc 1 2292 2 view .LVU490
2281:source\fatfs/ff.c **** 	BYTE fmt, *pt;
 1439              		.loc 1 2281 1 is_stmt 0 view .LVU491
 1440 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1441              		.cfi_def_cfa_offset 20
 1442              		.cfi_offset 4, -20
 1443              		.cfi_offset 5, -16
 1444              		.cfi_offset 6, -12
 1445              		.cfi_offset 7, -8
 1446              		.cfi_offset 14, -4
2292:source\fatfs/ff.c **** 	vol = get_ldnumber(path);
 1447              		.loc 1 2292 7 view .LVU492
 1448 0002 0023     		movs	r3, #0
 1449 0004 0360     		str	r3, [r0]
2293:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 1450              		.loc 1 2293 2 is_stmt 1 view .LVU493
2281:source\fatfs/ff.c **** 	BYTE fmt, *pt;
 1451              		.loc 1 2281 1 is_stmt 0 view .LVU494
 1452 0006 85B0     		sub	sp, sp, #20
 1453              		.cfi_def_cfa_offset 40
2281:source\fatfs/ff.c **** 	BYTE fmt, *pt;
 1454              		.loc 1 2281 1 view .LVU495
 1455 0008 0746     		mov	r7, r0
2293:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 1456              		.loc 1 2293 8 view .LVU496
 1457 000a 0846     		mov	r0, r1
 1458              	.LVL151:
2281:source\fatfs/ff.c **** 	BYTE fmt, *pt;
 1459              		.loc 1 2281 1 view .LVU497
 1460 000c 1646     		mov	r6, r2
2293:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 1461              		.loc 1 2293 8 view .LVU498
 1462 000e FFF7FEFF 		bl	get_ldnumber
 1463              	.LVL152:
2294:source\fatfs/ff.c **** 
 1464              		.loc 1 2294 2 is_stmt 1 view .LVU499
2294:source\fatfs/ff.c **** 
 1465              		.loc 1 2294 5 is_stmt 0 view .LVU500
 1466 0012 051E     		subs	r5, r0, #0
 1467 0014 C0F2FA80 		blt	.L187
2297:source\fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 1468              		.loc 1 2297 2 is_stmt 1 view .LVU501
2297:source\fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 1469              		.loc 1 2297 5 is_stmt 0 view .LVU502
 1470 0018 7F4B     		ldr	r3, .L229
 1471 001a 53F82540 		ldr	r4, [r3, r5, lsl #2]
 1472              	.LVL153:
2298:source\fatfs/ff.c **** 
 1473              		.loc 1 2298 2 is_stmt 1 view .LVU503
2298:source\fatfs/ff.c **** 
 1474              		.loc 1 2298 5 is_stmt 0 view .LVU504
 1475 001e 002C     		cmp	r4, #0
 1476 0020 00F0F680 		beq	.L188
2300:source\fatfs/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
 1477              		.loc 1 2300 14 is_stmt 1 view .LVU505
2301:source\fatfs/ff.c **** 
 1478              		.loc 1 2301 2 view .LVU506
2301:source\fatfs/ff.c **** 
 1479              		.loc 1 2301 7 is_stmt 0 view .LVU507
 1480 0024 3C60     		str	r4, [r7]
2303:source\fatfs/ff.c **** 		stat = disk_status(fs->drv);
 1481              		.loc 1 2303 2 is_stmt 1 view .LVU508
2303:source\fatfs/ff.c **** 		stat = disk_status(fs->drv);
 1482              		.loc 1 2303 5 is_stmt 0 view .LVU509
 1483 0026 94F80032 		ldrb	r3, [r4, #512]	@ zero_extendqisi2
 1484 002a 73B1     		cbz	r3, .L163
2304:source\fatfs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 1485              		.loc 1 2304 3 is_stmt 1 view .LVU510
2304:source\fatfs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 1486              		.loc 1 2304 10 is_stmt 0 view .LVU511
 1487 002c 94F80102 		ldrb	r0, [r4, #513]	@ zero_extendqisi2
 1488              	.LVL154:
2304:source\fatfs/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 1489              		.loc 1 2304 10 view .LVU512
 1490 0030 FFF7FEFF 		bl	disk_status
 1491              	.LVL155:
2305:source\fatfs/ff.c **** 			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 1492              		.loc 1 2305 3 is_stmt 1 view .LVU513
2305:source\fatfs/ff.c **** 			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 1493              		.loc 1 2305 6 is_stmt 0 view .LVU514
 1494 0034 C707     		lsls	r7, r0, #31
 1495              	.LVL156:
2305:source\fatfs/ff.c **** 			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 1496              		.loc 1 2305 6 view .LVU515
 1497 0036 08D4     		bmi	.L163
2306:source\fatfs/ff.c **** 				return FR_WRITE_PROTECTED;
 1498              		.loc 1 2306 4 is_stmt 1 view .LVU516
2306:source\fatfs/ff.c **** 				return FR_WRITE_PROTECTED;
 1499              		.loc 1 2306 7 is_stmt 0 view .LVU517
 1500 0038 002E     		cmp	r6, #0
 1501 003a 00F0E580 		beq	.L164
2306:source\fatfs/ff.c **** 				return FR_WRITE_PROTECTED;
 1502              		.loc 1 2306 31 discriminator 1 view .LVU518
 1503 003e 4007     		lsls	r0, r0, #29
 1504              	.LVL157:
2306:source\fatfs/ff.c **** 				return FR_WRITE_PROTECTED;
 1505              		.loc 1 2306 31 discriminator 1 view .LVU519
 1506 0040 40F1E280 		bpl	.L164
 1507              	.LVL158:
 1508              	.L166:
2307:source\fatfs/ff.c **** 			return FR_OK;				/* The file system object is valid */
 1509              		.loc 1 2307 12 view .LVU520
 1510 0044 0A20     		movs	r0, #10
 1511              	.LVL159:
 1512              	.L225:
2435:source\fatfs/ff.c **** 
 1513              		.loc 1 2435 1 view .LVU521
 1514 0046 05B0     		add	sp, sp, #20
 1515              		.cfi_remember_state
 1516              		.cfi_def_cfa_offset 20
 1517              		@ sp needed
 1518 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 1519              	.LVL160:
 1520              	.L163:
 1521              		.cfi_restore_state
2315:source\fatfs/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 1522              		.loc 1 2315 2 is_stmt 1 view .LVU522
2315:source\fatfs/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 1523              		.loc 1 2315 14 is_stmt 0 view .LVU523
 1524 004a 0023     		movs	r3, #0
2316:source\fatfs/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 1525              		.loc 1 2316 12 view .LVU524
 1526 004c E8B2     		uxtb	r0, r5
2315:source\fatfs/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 1527              		.loc 1 2315 14 view .LVU525
 1528 004e 84F80032 		strb	r3, [r4, #512]
2316:source\fatfs/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 1529              		.loc 1 2316 2 is_stmt 1 view .LVU526
2316:source\fatfs/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 1530              		.loc 1 2316 10 is_stmt 0 view .LVU527
 1531 0052 84F80102 		strb	r0, [r4, #513]
2317:source\fatfs/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 1532              		.loc 1 2317 2 is_stmt 1 view .LVU528
2317:source\fatfs/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 1533              		.loc 1 2317 9 is_stmt 0 view .LVU529
 1534 0056 FFF7FEFF 		bl	disk_initialize
 1535              	.LVL161:
2318:source\fatfs/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 1536              		.loc 1 2318 2 is_stmt 1 view .LVU530
2318:source\fatfs/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 1537              		.loc 1 2318 5 is_stmt 0 view .LVU531
 1538 005a C107     		lsls	r1, r0, #31
 1539 005c 00F1DA80 		bmi	.L189
2320:source\fatfs/ff.c **** 		return FR_WRITE_PROTECTED;
 1540              		.loc 1 2320 2 is_stmt 1 view .LVU532
2320:source\fatfs/ff.c **** 		return FR_WRITE_PROTECTED;
 1541              		.loc 1 2320 5 is_stmt 0 view .LVU533
 1542 0060 0EB1     		cbz	r6, .L165
2320:source\fatfs/ff.c **** 		return FR_WRITE_PROTECTED;
 1543              		.loc 1 2320 29 discriminator 1 view .LVU534
 1544 0062 4207     		lsls	r2, r0, #29
 1545 0064 EED4     		bmi	.L166
 1546              	.L165:
2327:source\fatfs/ff.c **** 	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 1547              		.loc 1 2327 2 is_stmt 1 view .LVU535
 1548              	.LVL162:
2328:source\fatfs/ff.c **** 	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 1549              		.loc 1 2328 2 view .LVU536
2328:source\fatfs/ff.c **** 	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 1550              		.loc 1 2328 8 is_stmt 0 view .LVU537
 1551 0066 0021     		movs	r1, #0
 1552 0068 2046     		mov	r0, r4
 1553              	.LVL163:
2328:source\fatfs/ff.c **** 	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 1554              		.loc 1 2328 8 view .LVU538
 1555 006a FFF7FEFF 		bl	check_fs
 1556              	.LVL164:
2329:source\fatfs/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 1557              		.loc 1 2329 5 view .LVU539
 1558 006e 0128     		cmp	r0, #1
2328:source\fatfs/ff.c **** 	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 1559              		.loc 1 2328 8 view .LVU540
 1560 0070 0546     		mov	r5, r0
 1561              	.LVL165:
2329:source\fatfs/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 1562              		.loc 1 2329 2 is_stmt 1 view .LVU541
2329:source\fatfs/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 1563              		.loc 1 2329 5 is_stmt 0 view .LVU542
 1564 0072 6AD1     		bne	.L167
 1565 0074 6F46     		mov	r7, sp
 1566 0076 04F5DF73 		add	r3, r4, #446
 1567 007a 04F5FF70 		add	r0, r4, #510
 1568              	.LVL166:
2329:source\fatfs/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 1569              		.loc 1 2329 5 view .LVU543
 1570 007e 3946     		mov	r1, r7
 1571              	.L169:
2331:source\fatfs/ff.c **** 			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 1572              		.loc 1 2331 4 is_stmt 1 view .LVU544
 1573              	.LVL167:
2332:source\fatfs/ff.c **** 		}
 1574              		.loc 1 2332 4 view .LVU545
2332:source\fatfs/ff.c **** 		}
 1575              		.loc 1 2332 37 is_stmt 0 view .LVU546
 1576 0080 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 1577 0082 02B1     		cbz	r2, .L168
2332:source\fatfs/ff.c **** 		}
 1578              		.loc 1 2332 37 discriminator 1 view .LVU547
 1579 0084 9A68     		ldr	r2, [r3, #8]	@ unaligned
 1580              	.L168:
2332:source\fatfs/ff.c **** 		}
 1581              		.loc 1 2332 10 discriminator 4 view .LVU548
 1582 0086 41F8042B 		str	r2, [r1], #4
2330:source\fatfs/ff.c **** 			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 1583              		.loc 1 2330 23 is_stmt 1 discriminator 4 view .LVU549
2330:source\fatfs/ff.c **** 			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 1584              		.loc 1 2330 17 discriminator 4 view .LVU550
 1585 008a 1033     		adds	r3, r3, #16
 1586              	.LVL168:
2330:source\fatfs/ff.c **** 			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 1587              		.loc 1 2330 17 is_stmt 0 discriminator 4 view .LVU551
 1588 008c 8342     		cmp	r3, r0
 1589 008e F7D1     		bne	.L169
 1590 0090 0026     		movs	r6, #0
 1591              	.LVL169:
 1592              	.L172:
2336:source\fatfs/ff.c **** 			bsect = br[i];
 1593              		.loc 1 2336 3 is_stmt 1 view .LVU552
2337:source\fatfs/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 1594              		.loc 1 2337 4 view .LVU553
2337:source\fatfs/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 1595              		.loc 1 2337 10 is_stmt 0 view .LVU554
 1596 0092 57F8045B 		ldr	r5, [r7], #4
 1597              	.LVL170:
2338:source\fatfs/ff.c **** 		} while (!LD2PT(vol) && fmt && ++i < 4);
 1598              		.loc 1 2338 4 is_stmt 1 view .LVU555
2338:source\fatfs/ff.c **** 		} while (!LD2PT(vol) && fmt && ++i < 4);
 1599              		.loc 1 2338 8 is_stmt 0 view .LVU556
 1600 0096 002D     		cmp	r5, #0
 1601 0098 50D0     		beq	.L191
2338:source\fatfs/ff.c **** 		} while (!LD2PT(vol) && fmt && ++i < 4);
 1602              		.loc 1 2338 18 discriminator 1 view .LVU557
 1603 009a 2946     		mov	r1, r5
 1604 009c 2046     		mov	r0, r4
 1605 009e FFF7FEFF 		bl	check_fs
 1606              	.LVL171:
2339:source\fatfs/ff.c **** 	}
 1607              		.loc 1 2339 31 is_stmt 1 discriminator 1 view .LVU558
 1608 00a2 0028     		cmp	r0, #0
 1609 00a4 4BD1     		bne	.L170
 1610              	.LVL172:
 1611              	.L171:
2346:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1612              		.loc 1 2346 2 view .LVU559
2346:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1613              		.loc 1 2346 5 is_stmt 0 view .LVU560
 1614 00a6 B4F80B30 		ldrh	r3, [r4, #11]	@ unaligned
 1615 00aa B3F5007F 		cmp	r3, #512
 1616 00ae 52D1     		bne	.L175
2349:source\fatfs/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 1617              		.loc 1 2349 2 is_stmt 1 view .LVU561
2349:source\fatfs/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 1618              		.loc 1 2349 9 is_stmt 0 view .LVU562
 1619 00b0 E68A     		ldrh	r6, [r4, #22]
 1620              	.LVL173:
2350:source\fatfs/ff.c **** 	fs->fsize = fasize;
 1621              		.loc 1 2350 2 is_stmt 1 view .LVU563
2350:source\fatfs/ff.c **** 	fs->fsize = fasize;
 1622              		.loc 1 2350 5 is_stmt 0 view .LVU564
 1623 00b2 06B9     		cbnz	r6, .L176
2350:source\fatfs/ff.c **** 	fs->fsize = fasize;
 1624              		.loc 1 2350 15 is_stmt 1 discriminator 1 view .LVU565
2350:source\fatfs/ff.c **** 	fs->fsize = fasize;
 1625              		.loc 1 2350 22 is_stmt 0 discriminator 1 view .LVU566
 1626 00b4 666A     		ldr	r6, [r4, #36]
 1627              	.LVL174:
 1628              	.L176:
2351:source\fatfs/ff.c **** 
 1629              		.loc 1 2351 2 is_stmt 1 view .LVU567
2353:source\fatfs/ff.c **** 	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 1630              		.loc 1 2353 25 is_stmt 0 view .LVU568
 1631 00b6 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
2351:source\fatfs/ff.c **** 
 1632              		.loc 1 2351 12 view .LVU569
 1633 00b8 C4F81862 		str	r6, [r4, #536]
2353:source\fatfs/ff.c **** 	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 1634              		.loc 1 2353 2 is_stmt 1 view .LVU570
2354:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1635              		.loc 1 2354 5 is_stmt 0 view .LVU571
 1636 00bc 431E     		subs	r3, r0, #1
 1637 00be 012B     		cmp	r3, #1
2353:source\fatfs/ff.c **** 	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 1638              		.loc 1 2353 13 view .LVU572
 1639 00c0 84F80302 		strb	r0, [r4, #515]
2354:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1640              		.loc 1 2354 2 is_stmt 1 view .LVU573
2354:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1641              		.loc 1 2354 5 is_stmt 0 view .LVU574
 1642 00c4 47D8     		bhi	.L175
2356:source\fatfs/ff.c **** 
 1643              		.loc 1 2356 2 is_stmt 1 view .LVU575
 1644              	.LVL175:
2358:source\fatfs/ff.c **** 	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 1645              		.loc 1 2358 2 view .LVU576
2358:source\fatfs/ff.c **** 	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 1646              		.loc 1 2358 24 is_stmt 0 view .LVU577
 1647 00c6 94F80DC0 		ldrb	ip, [r4, #13]	@ zero_extendqisi2
2358:source\fatfs/ff.c **** 	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 1648              		.loc 1 2358 12 view .LVU578
 1649 00ca 84F802C2 		strb	ip, [r4, #514]
2359:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1650              		.loc 1 2359 2 is_stmt 1 view .LVU579
2359:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1651              		.loc 1 2359 5 is_stmt 0 view .LVU580
 1652 00ce BCF1000F 		cmp	ip, #0
 1653 00d2 40D0     		beq	.L175
2359:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1654              		.loc 1 2359 44 discriminator 1 view .LVU581
 1655 00d4 0CF1FF33 		add	r3, ip, #-1
2359:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1656              		.loc 1 2359 17 discriminator 1 view .LVU582
 1657 00d8 13EA0C0F 		tst	r3, ip
 1658 00dc 3BD1     		bne	.L175
2362:source\fatfs/ff.c **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 1659              		.loc 1 2362 2 is_stmt 1 view .LVU583
 1660 00de B4F81170 		ldrh	r7, [r4, #17]	@ unaligned
2362:source\fatfs/ff.c **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 1661              		.loc 1 2362 16 is_stmt 0 view .LVU584
 1662 00e2 A4F80872 		strh	r7, [r4, #520]	@ movhi
2363:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1663              		.loc 1 2363 2 is_stmt 1 view .LVU585
2363:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1664              		.loc 1 2363 5 is_stmt 0 view .LVU586
 1665 00e6 3B07     		lsls	r3, r7, #28
 1666 00e8 35D1     		bne	.L175
2366:source\fatfs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 1667              		.loc 1 2366 2 is_stmt 1 view .LVU587
2366:source\fatfs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 1668              		.loc 1 2366 8 is_stmt 0 view .LVU588
 1669 00ea B4F81330 		ldrh	r3, [r4, #19]	@ unaligned
 1670              	.LVL176:
2367:source\fatfs/ff.c **** 
 1671              		.loc 1 2367 2 is_stmt 1 view .LVU589
2367:source\fatfs/ff.c **** 
 1672              		.loc 1 2367 5 is_stmt 0 view .LVU590
 1673 00ee 03B9     		cbnz	r3, .L177
2367:source\fatfs/ff.c **** 
 1674              		.loc 1 2367 14 is_stmt 1 discriminator 1 view .LVU591
2367:source\fatfs/ff.c **** 
 1675              		.loc 1 2367 20 is_stmt 0 discriminator 1 view .LVU592
 1676 00f0 236A     		ldr	r3, [r4, #32]
 1677              	.LVL177:
 1678              	.L177:
2369:source\fatfs/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 1679              		.loc 1 2369 2 is_stmt 1 view .LVU593
 1680 00f2 E289     		ldrh	r2, [r4, #14]
 1681              	.LVL178:
2370:source\fatfs/ff.c **** 
 1682              		.loc 1 2370 2 view .LVU594
2370:source\fatfs/ff.c **** 
 1683              		.loc 1 2370 5 is_stmt 0 view .LVU595
 1684 00f4 7AB3     		cbz	r2, .L175
2356:source\fatfs/ff.c **** 
 1685              		.loc 1 2356 9 view .LVU596
 1686 00f6 7043     		muls	r0, r6, r0
 1687              	.LVL179:
2373:source\fatfs/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 1688              		.loc 1 2373 2 is_stmt 1 view .LVU597
2373:source\fatfs/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 1689              		.loc 1 2373 9 is_stmt 0 view .LVU598
 1690 00f8 02EB1711 		add	r1, r2, r7, lsr #4
 1691 00fc 0144     		add	r1, r1, r0
 1692              	.LVL180:
2374:source\fatfs/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 1693              		.loc 1 2374 2 is_stmt 1 view .LVU599
2374:source\fatfs/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 1694              		.loc 1 2374 5 is_stmt 0 view .LVU600
 1695 00fe 8B42     		cmp	r3, r1
 1696 0100 29D3     		bcc	.L175
2375:source\fatfs/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 1697              		.loc 1 2375 2 is_stmt 1 view .LVU601
2375:source\fatfs/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 1698              		.loc 1 2375 17 is_stmt 0 view .LVU602
 1699 0102 5B1A     		subs	r3, r3, r1
 1700              	.LVL181:
2376:source\fatfs/ff.c **** 	fmt = FS_FAT12;
 1701              		.loc 1 2376 5 view .LVU603
 1702 0104 6345     		cmp	r3, ip
2375:source\fatfs/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 1703              		.loc 1 2375 8 view .LVU604
 1704 0106 B3FBFCFE 		udiv	lr, r3, ip
 1705              	.LVL182:
2376:source\fatfs/ff.c **** 	fmt = FS_FAT12;
 1706              		.loc 1 2376 2 is_stmt 1 view .LVU605
2376:source\fatfs/ff.c **** 	fmt = FS_FAT12;
 1707              		.loc 1 2376 5 is_stmt 0 view .LVU606
 1708 010a 24D3     		bcc	.L175
2377:source\fatfs/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 1709              		.loc 1 2377 2 is_stmt 1 view .LVU607
 1710              	.LVL183:
2378:source\fatfs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 1711              		.loc 1 2378 2 view .LVU608
2378:source\fatfs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 1712              		.loc 1 2378 5 is_stmt 0 view .LVU609
 1713 010c 40F6F57C 		movw	ip, #4085
 1714 0110 E645     		cmp	lr, ip
2382:source\fatfs/ff.c **** 	fs->volbase = bsect;								/* Volume start sector */
 1715              		.loc 1 2382 23 view .LVU610
 1716 0112 0EF10203 		add	r3, lr, #2
2384:source\fatfs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 1717              		.loc 1 2384 22 view .LVU611
 1718 0116 2A44     		add	r2, r2, r5
 1719              	.LVL184:
2385:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 1720              		.loc 1 2385 23 view .LVU612
 1721 0118 2944     		add	r1, r1, r5
 1722              	.LVL185:
2378:source\fatfs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 1723              		.loc 1 2378 5 view .LVU613
 1724 011a 1ED8     		bhi	.L178
2382:source\fatfs/ff.c **** 	fs->volbase = bsect;								/* Volume start sector */
 1725              		.loc 1 2382 2 is_stmt 1 view .LVU614
2384:source\fatfs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 1726              		.loc 1 2384 14 is_stmt 0 view .LVU615
 1727 011c C4E98752 		strd	r5, r2, [r4, #540]
2382:source\fatfs/ff.c **** 	fs->volbase = bsect;								/* Volume start sector */
 1728              		.loc 1 2382 15 view .LVU616
 1729 0120 C4F81432 		str	r3, [r4, #532]
2383:source\fatfs/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 1730              		.loc 1 2383 2 is_stmt 1 view .LVU617
2385:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 1731              		.loc 1 2385 2 view .LVU618
2385:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 1732              		.loc 1 2385 15 is_stmt 0 view .LVU619
 1733 0124 C4F82812 		str	r1, [r4, #552]
2386:source\fatfs/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 1734              		.loc 1 2386 2 is_stmt 1 view .LVU620
2391:source\fatfs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 1735              		.loc 1 2391 3 view .LVU621
2391:source\fatfs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 1736              		.loc 1 2391 6 is_stmt 0 view .LVU622
 1737 0128 AFB1     		cbz	r7, .L175
2392:source\fatfs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 1738              		.loc 1 2392 3 is_stmt 1 view .LVU623
2394:source\fatfs/ff.c **** 	}
 1739              		.loc 1 2394 36 is_stmt 0 view .LVU624
 1740 012a 03EB4301 		add	r1, r3, r3, lsl #1
2394:source\fatfs/ff.c **** 	}
 1741              		.loc 1 2394 60 view .LVU625
 1742 012e 03F00103 		and	r3, r3, #1
2392:source\fatfs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 1743              		.loc 1 2392 29 view .LVU626
 1744 0132 0244     		add	r2, r2, r0
2393:source\fatfs/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 1745              		.loc 1 2393 3 is_stmt 1 view .LVU627
2394:source\fatfs/ff.c **** 	}
 1746              		.loc 1 2394 21 is_stmt 0 view .LVU628
 1747 0134 03EB5103 		add	r3, r3, r1, lsr #1
 1748 0138 0127     		movs	r7, #1
 1749              	.LVL186:
2394:source\fatfs/ff.c **** 	}
 1750              		.loc 1 2394 21 view .LVU629
 1751 013a 23E0     		b	.L182
 1752              	.LVL187:
 1753              	.L191:
2338:source\fatfs/ff.c **** 		} while (!LD2PT(vol) && fmt && ++i < 4);
 1754              		.loc 1 2338 8 view .LVU630
 1755 013c 0220     		movs	r0, #2
 1756              	.L170:
2339:source\fatfs/ff.c **** 	}
 1757              		.loc 1 2339 31 discriminator 1 view .LVU631
 1758 013e 0136     		adds	r6, r6, #1
 1759              	.LVL188:
2339:source\fatfs/ff.c **** 	}
 1760              		.loc 1 2339 31 discriminator 1 view .LVU632
 1761 0140 042E     		cmp	r6, #4
 1762 0142 A6D1     		bne	.L172
 1763              	.LVL189:
2341:source\fatfs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 1764              		.loc 1 2341 2 is_stmt 1 view .LVU633
2341:source\fatfs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 1765              		.loc 1 2341 5 is_stmt 0 view .LVU634
 1766 0144 0328     		cmp	r0, #3
 1767 0146 06D1     		bne	.L175
 1768 0148 01E0     		b	.L186
 1769              	.LVL190:
 1770              	.L167:
2341:source\fatfs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 1771              		.loc 1 2341 2 is_stmt 1 view .LVU635
2341:source\fatfs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 1772              		.loc 1 2341 5 is_stmt 0 view .LVU636
 1773 014a 0328     		cmp	r0, #3
 1774 014c 01D1     		bne	.L174
 1775              	.LVL191:
 1776              	.L186:
2341:source\fatfs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 1777              		.loc 1 2341 23 view .LVU637
 1778 014e 0120     		movs	r0, #1
 1779              	.LVL192:
2341:source\fatfs/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 1780              		.loc 1 2341 23 view .LVU638
 1781 0150 79E7     		b	.L225
 1782              	.LVL193:
 1783              	.L174:
2342:source\fatfs/ff.c **** 
 1784              		.loc 1 2342 2 is_stmt 1 view .LVU639
2342:source\fatfs/ff.c **** 
 1785              		.loc 1 2342 5 is_stmt 0 view .LVU640
 1786 0152 0028     		cmp	r0, #0
 1787 0154 A7D0     		beq	.L171
 1788              	.LVL194:
 1789              	.L175:
2342:source\fatfs/ff.c **** 
 1790              		.loc 1 2342 18 view .LVU641
 1791 0156 0D20     		movs	r0, #13
 1792 0158 75E7     		b	.L225
 1793              	.LVL195:
 1794              	.L178:
2378:source\fatfs/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 1795              		.loc 1 2378 26 is_stmt 1 view .LVU642
2379:source\fatfs/ff.c **** 
 1796              		.loc 1 2379 2 view .LVU643
2379:source\fatfs/ff.c **** 
 1797              		.loc 1 2379 5 is_stmt 0 view .LVU644
 1798 015a 4FF6F57C 		movw	ip, #65525
 1799 015e E645     		cmp	lr, ip
2384:source\fatfs/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 1800              		.loc 1 2384 14 view .LVU645
 1801 0160 C4E98752 		strd	r5, r2, [r4, #540]
2382:source\fatfs/ff.c **** 	fs->volbase = bsect;								/* Volume start sector */
 1802              		.loc 1 2382 15 view .LVU646
 1803 0164 C4F81432 		str	r3, [r4, #532]
2383:source\fatfs/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 1804              		.loc 1 2383 2 is_stmt 1 view .LVU647
2385:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 1805              		.loc 1 2385 2 view .LVU648
2385:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 1806              		.loc 1 2385 15 is_stmt 0 view .LVU649
 1807 0168 C4F82812 		str	r1, [r4, #552]
2379:source\fatfs/ff.c **** 
 1808              		.loc 1 2379 5 view .LVU650
 1809 016c 05D8     		bhi	.L180
2382:source\fatfs/ff.c **** 	fs->volbase = bsect;								/* Volume start sector */
 1810              		.loc 1 2382 2 is_stmt 1 view .LVU651
2386:source\fatfs/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 1811              		.loc 1 2386 2 view .LVU652
2391:source\fatfs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 1812              		.loc 1 2391 3 view .LVU653
2391:source\fatfs/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 1813              		.loc 1 2391 6 is_stmt 0 view .LVU654
 1814 016e 002F     		cmp	r7, #0
 1815 0170 F1D0     		beq	.L175
2392:source\fatfs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 1816              		.loc 1 2392 3 is_stmt 1 view .LVU655
2392:source\fatfs/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 1817              		.loc 1 2392 29 is_stmt 0 view .LVU656
 1818 0172 0244     		add	r2, r2, r0
2393:source\fatfs/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 1819              		.loc 1 2393 3 is_stmt 1 view .LVU657
2394:source\fatfs/ff.c **** 	}
 1820              		.loc 1 2394 21 is_stmt 0 view .LVU658
 1821 0174 5B00     		lsls	r3, r3, #1
 1822 0176 0227     		movs	r7, #2
 1823              	.LVL196:
2394:source\fatfs/ff.c **** 	}
 1824              		.loc 1 2394 21 view .LVU659
 1825 0178 04E0     		b	.L182
 1826              	.LVL197:
 1827              	.L180:
2379:source\fatfs/ff.c **** 
 1828              		.loc 1 2379 26 is_stmt 1 view .LVU660
2382:source\fatfs/ff.c **** 	fs->volbase = bsect;								/* Volume start sector */
 1829              		.loc 1 2382 2 view .LVU661
2386:source\fatfs/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 1830              		.loc 1 2386 2 view .LVU662
2387:source\fatfs/ff.c **** 		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 1831              		.loc 1 2387 3 view .LVU663
2387:source\fatfs/ff.c **** 		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 1832              		.loc 1 2387 6 is_stmt 0 view .LVU664
 1833 017a 002F     		cmp	r7, #0
 1834 017c EBD1     		bne	.L175
2388:source\fatfs/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 1835              		.loc 1 2388 3 is_stmt 1 view .LVU665
2388:source\fatfs/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 1836              		.loc 1 2388 17 is_stmt 0 view .LVU666
 1837 017e E26A     		ldr	r2, [r4, #44]
2389:source\fatfs/ff.c **** 	} else {
 1838              		.loc 1 2389 3 is_stmt 1 view .LVU667
2389:source\fatfs/ff.c **** 	} else {
 1839              		.loc 1 2389 10 is_stmt 0 view .LVU668
 1840 0180 9B00     		lsls	r3, r3, #2
 1841              	.LVL198:
2379:source\fatfs/ff.c **** 
 1842              		.loc 1 2379 30 view .LVU669
 1843 0182 0327     		movs	r7, #3
 1844              	.LVL199:
 1845              	.L182:
2396:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1846              		.loc 1 2396 26 view .LVU670
 1847 0184 03F2FF13 		addw	r3, r3, #511
2396:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1848              		.loc 1 2396 5 view .LVU671
 1849 0188 B6EB532F 		cmp	r6, r3, lsr #9
2388:source\fatfs/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 1850              		.loc 1 2388 15 view .LVU672
 1851 018c C4F82422 		str	r2, [r4, #548]
2396:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1852              		.loc 1 2396 2 is_stmt 1 view .LVU673
2396:source\fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 1853              		.loc 1 2396 5 is_stmt 0 view .LVU674
 1854 0190 E1D3     		bcc	.L175
2401:source\fatfs/ff.c **** 
 1855              		.loc 1 2401 2 is_stmt 1 view .LVU675
2401:source\fatfs/ff.c **** 
 1856              		.loc 1 2401 34 is_stmt 0 view .LVU676
 1857 0192 4FF0FF33 		mov	r3, #-1
2401:source\fatfs/ff.c **** 
 1858              		.loc 1 2401 17 view .LVU677
 1859 0196 C4E98333 		strd	r3, r3, [r4, #524]
2404:source\fatfs/ff.c **** #if (_FS_NOFSINFO & 3) != 3
 1860              		.loc 1 2404 2 is_stmt 1 view .LVU678
2406:source\fatfs/ff.c **** 		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 1861              		.loc 1 2406 5 is_stmt 0 view .LVU679
 1862 019a 032F     		cmp	r7, #3
2404:source\fatfs/ff.c **** #if (_FS_NOFSINFO & 3) != 3
 1863              		.loc 1 2404 15 view .LVU680
 1864 019c 4FF08003 		mov	r3, #128
 1865 01a0 84F80532 		strb	r3, [r4, #517]
2406:source\fatfs/ff.c **** 		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 1866              		.loc 1 2406 2 is_stmt 1 view .LVU681
2406:source\fatfs/ff.c **** 		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 1867              		.loc 1 2406 5 is_stmt 0 view .LVU682
 1868 01a4 24D1     		bne	.L184
2407:source\fatfs/ff.c **** 		&& move_window(fs, bsect + 1) == FR_OK)
 1869              		.loc 1 2407 3 view .LVU683
 1870 01a6 238E     		ldrh	r3, [r4, #48]
 1871 01a8 012B     		cmp	r3, #1
 1872 01aa 21D1     		bne	.L184
2408:source\fatfs/ff.c **** 	{
 1873              		.loc 1 2408 6 view .LVU684
 1874 01ac 691C     		adds	r1, r5, #1
 1875 01ae 2046     		mov	r0, r4
 1876              	.LVL200:
2408:source\fatfs/ff.c **** 	{
 1877              		.loc 1 2408 6 view .LVU685
 1878 01b0 FFF7FEFF 		bl	move_window
 1879              	.LVL201:
2408:source\fatfs/ff.c **** 	{
 1880              		.loc 1 2408 3 view .LVU686
 1881 01b4 E0B9     		cbnz	r0, .L184
2410:source\fatfs/ff.c **** 		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 1882              		.loc 1 2410 3 is_stmt 1 view .LVU687
2411:source\fatfs/ff.c **** 			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 1883              		.loc 1 2411 6 is_stmt 0 view .LVU688
 1884 01b6 B4F8FE21 		ldrh	r2, [r4, #510]
2410:source\fatfs/ff.c **** 		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 1885              		.loc 1 2410 16 view .LVU689
 1886 01ba 84F80502 		strb	r0, [r4, #517]
2411:source\fatfs/ff.c **** 			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 1887              		.loc 1 2411 3 is_stmt 1 view .LVU690
2411:source\fatfs/ff.c **** 			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 1888              		.loc 1 2411 6 is_stmt 0 view .LVU691
 1889 01be 4AF65523 		movw	r3, #43605
 1890 01c2 9A42     		cmp	r2, r3
 1891 01c4 14D1     		bne	.L184
2412:source\fatfs/ff.c **** 			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 1892              		.loc 1 2412 4 view .LVU692
 1893 01c6 2268     		ldr	r2, [r4]
 1894 01c8 144B     		ldr	r3, .L229+4
 1895 01ca 9A42     		cmp	r2, r3
 1896 01cc 10D1     		bne	.L184
2413:source\fatfs/ff.c **** 		{
 1897              		.loc 1 2413 4 view .LVU693
 1898 01ce 03F1FF53 		add	r3, r3, #534773760
 1899 01d2 D4F8E421 		ldr	r2, [r4, #484]
 1900 01d6 03F50053 		add	r3, r3, #8192
 1901 01da 2033     		adds	r3, r3, #32
 1902 01dc 9A42     		cmp	r2, r3
2416:source\fatfs/ff.c **** #endif
 1903              		.loc 1 2416 4 is_stmt 1 view .LVU694
2416:source\fatfs/ff.c **** #endif
 1904              		.loc 1 2416 19 is_stmt 0 view .LVU695
 1905 01de 01BF     		itttt	eq
 1906 01e0 D4F8E831 		ldreq	r3, [r4, #488]
 1907 01e4 C4F81032 		streq	r3, [r4, #528]
2419:source\fatfs/ff.c **** #endif
 1908              		.loc 1 2419 4 is_stmt 1 view .LVU696
2419:source\fatfs/ff.c **** #endif
 1909              		.loc 1 2419 19 is_stmt 0 view .LVU697
 1910 01e8 D4F8EC31 		ldreq	r3, [r4, #492]
 1911 01ec C4F80C32 		streq	r3, [r4, #524]
 1912              	.L184:
2425:source\fatfs/ff.c **** 	fs->id = ++Fsid;	/* File system mount ID */
 1913              		.loc 1 2425 2 is_stmt 1 view .LVU698
2426:source\fatfs/ff.c **** #if _FS_RPATH
 1914              		.loc 1 2426 11 is_stmt 0 view .LVU699
 1915 01f0 0B4A     		ldr	r2, .L229+8
2425:source\fatfs/ff.c **** 	fs->id = ++Fsid;	/* File system mount ID */
 1916              		.loc 1 2425 14 view .LVU700
 1917 01f2 84F80072 		strb	r7, [r4, #512]
2426:source\fatfs/ff.c **** #if _FS_RPATH
 1918              		.loc 1 2426 2 is_stmt 1 view .LVU701
2426:source\fatfs/ff.c **** #if _FS_RPATH
 1919              		.loc 1 2426 11 is_stmt 0 view .LVU702
 1920 01f6 1388     		ldrh	r3, [r2]
 1921 01f8 0133     		adds	r3, r3, #1
 1922 01fa 9BB2     		uxth	r3, r3
2426:source\fatfs/ff.c **** #if _FS_RPATH
 1923              		.loc 1 2426 9 view .LVU703
 1924 01fc A4F80632 		strh	r3, [r4, #518]	@ movhi
2431:source\fatfs/ff.c **** #endif
 1925              		.loc 1 2431 2 is_stmt 1 view .LVU704
 1926 0200 2046     		mov	r0, r4
2426:source\fatfs/ff.c **** #if _FS_RPATH
 1927              		.loc 1 2426 9 is_stmt 0 view .LVU705
 1928 0202 1380     		strh	r3, [r2]	@ movhi
2431:source\fatfs/ff.c **** #endif
 1929              		.loc 1 2431 2 view .LVU706
 1930 0204 FFF7FEFF 		bl	clear_lock
 1931              	.LVL202:
2434:source\fatfs/ff.c **** }
 1932              		.loc 1 2434 2 is_stmt 1 view .LVU707
 1933              	.L164:
2308:source\fatfs/ff.c **** 		}
 1934              		.loc 1 2308 11 is_stmt 0 view .LVU708
 1935 0208 0020     		movs	r0, #0
 1936 020a 1CE7     		b	.L225
 1937              	.LVL203:
 1938              	.L187:
2294:source\fatfs/ff.c **** 
 1939              		.loc 1 2294 22 view .LVU709
 1940 020c 0B20     		movs	r0, #11
 1941              	.LVL204:
2294:source\fatfs/ff.c **** 
 1942              		.loc 1 2294 22 view .LVU710
 1943 020e 1AE7     		b	.L225
 1944              	.LVL205:
 1945              	.L188:
2298:source\fatfs/ff.c **** 
 1946              		.loc 1 2298 18 view .LVU711
 1947 0210 0C20     		movs	r0, #12
 1948              	.LVL206:
2298:source\fatfs/ff.c **** 
 1949              		.loc 1 2298 18 view .LVU712
 1950 0212 18E7     		b	.L225
 1951              	.LVL207:
 1952              	.L189:
2319:source\fatfs/ff.c **** 	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 1953              		.loc 1 2319 10 view .LVU713
 1954 0214 0320     		movs	r0, #3
 1955              	.LVL208:
2319:source\fatfs/ff.c **** 	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 1956              		.loc 1 2319 10 view .LVU714
 1957 0216 16E7     		b	.L225
 1958              	.L230:
 1959              		.align	2
 1960              	.L229:
 1961 0218 00000000 		.word	FatFs
 1962 021c 52526141 		.word	1096897106
 1963 0220 00000000 		.word	Fsid
 1964              		.cfi_endproc
 1965              	.LFE160:
 1967              		.section	.text.sync_fs,"ax",%progbits
 1968              		.align	1
 1969              		.syntax unified
 1970              		.thumb
 1971              		.thumb_func
 1973              	sync_fs:
 1974              	.LVL209:
 1975              	.LFB134:
 836:source\fatfs/ff.c **** 	FRESULT res;
 1976              		.loc 1 836 1 is_stmt 1 view -0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 0
 1979              		@ frame_needed = 0, uses_anonymous_args = 0
 837:source\fatfs/ff.c **** 
 1980              		.loc 1 837 2 view .LVU716
 840:source\fatfs/ff.c **** 	if (res == FR_OK) {
 1981              		.loc 1 840 2 view .LVU717
 836:source\fatfs/ff.c **** 	FRESULT res;
 1982              		.loc 1 836 1 is_stmt 0 view .LVU718
 1983 0000 38B5     		push	{r3, r4, r5, lr}
 1984              		.cfi_def_cfa_offset 16
 1985              		.cfi_offset 3, -16
 1986              		.cfi_offset 4, -12
 1987              		.cfi_offset 5, -8
 1988              		.cfi_offset 14, -4
 836:source\fatfs/ff.c **** 	FRESULT res;
 1989              		.loc 1 836 1 view .LVU719
 1990 0002 0446     		mov	r4, r0
 840:source\fatfs/ff.c **** 	if (res == FR_OK) {
 1991              		.loc 1 840 8 view .LVU720
 1992 0004 FFF7FEFF 		bl	sync_window
 1993              	.LVL210:
 840:source\fatfs/ff.c **** 	if (res == FR_OK) {
 1994              		.loc 1 840 8 view .LVU721
 1995 0008 0546     		mov	r5, r0
 1996              	.LVL211:
 841:source\fatfs/ff.c **** 		/* Update FSINFO sector if needed */
 1997              		.loc 1 841 2 is_stmt 1 view .LVU722
 841:source\fatfs/ff.c **** 		/* Update FSINFO sector if needed */
 1998              		.loc 1 841 5 is_stmt 0 view .LVU723
 1999 000a B8BB     		cbnz	r0, .L232
 2000              	.LVL212:
 2001              	.LBB14:
 2002              	.LBI14:
 833:source\fatfs/ff.c **** 	FATFS* fs		/* File system object */
 2003              		.loc 1 833 9 is_stmt 1 view .LVU724
 2004              	.LBB15:
 843:source\fatfs/ff.c **** 			/* Create FSINFO structure */
 2005              		.loc 1 843 3 view .LVU725
 843:source\fatfs/ff.c **** 			/* Create FSINFO structure */
 2006              		.loc 1 843 6 is_stmt 0 view .LVU726
 2007 000c 94F80032 		ldrb	r3, [r4, #512]	@ zero_extendqisi2
 2008 0010 032B     		cmp	r3, #3
 2009 0012 2AD1     		bne	.L233
 843:source\fatfs/ff.c **** 			/* Create FSINFO structure */
 2010              		.loc 1 843 31 view .LVU727
 2011 0014 94F80532 		ldrb	r3, [r4, #517]	@ zero_extendqisi2
 2012 0018 012B     		cmp	r3, #1
 2013 001a 26D1     		bne	.L233
 845:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 2014              		.loc 1 845 4 is_stmt 1 view .LVU728
 2015 001c 0146     		mov	r1, r0
 2016 001e 4FF40072 		mov	r2, #512
 2017 0022 2046     		mov	r0, r4
 2018              	.LVL213:
 845:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 2019              		.loc 1 845 4 is_stmt 0 view .LVU729
 2020 0024 FFF7FEFF 		bl	mem_set
 2021              	.LVL214:
 846:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 2022              		.loc 1 846 4 is_stmt 1 view .LVU730
 846:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 2023              		.loc 1 846 4 view .LVU731
 2024 0028 4AF65522 		movw	r2, #43605
 2025 002c A4F8FE21 		strh	r2, [r4, #510]	@ movhi
 847:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 2026              		.loc 1 847 4 view .LVU732
 847:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 2027              		.loc 1 847 4 view .LVU733
 847:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 2028              		.loc 1 847 4 view .LVU734
 847:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 2029              		.loc 1 847 4 view .LVU735
 2030 0030 134A     		ldr	r2, .L234
 2031 0032 2260     		str	r2, [r4]
 848:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 2032              		.loc 1 848 4 view .LVU736
 848:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 2033              		.loc 1 848 4 view .LVU737
 848:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 2034              		.loc 1 848 4 view .LVU738
 848:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 2035              		.loc 1 848 4 view .LVU739
 2036 0034 02F1FF52 		add	r2, r2, #534773760
 2037 0038 02F50052 		add	r2, r2, #8192
 2038 003c 2032     		adds	r2, r2, #32
 2039 003e C4F8E421 		str	r2, [r4, #484]
 849:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 2040              		.loc 1 849 4 view .LVU740
 849:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 2041              		.loc 1 849 4 view .LVU741
 849:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 2042              		.loc 1 849 4 view .LVU742
 849:source\fatfs/ff.c **** 			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 2043              		.loc 1 849 4 view .LVU743
 2044 0042 D4F81022 		ldr	r2, [r4, #528]
 2045 0046 C4F8E821 		str	r2, [r4, #488]
 850:source\fatfs/ff.c **** 			/* Write it into the FSINFO sector */
 2046              		.loc 1 850 4 view .LVU744
 850:source\fatfs/ff.c **** 			/* Write it into the FSINFO sector */
 2047              		.loc 1 850 4 view .LVU745
 850:source\fatfs/ff.c **** 			/* Write it into the FSINFO sector */
 2048              		.loc 1 850 4 view .LVU746
 850:source\fatfs/ff.c **** 			/* Write it into the FSINFO sector */
 2049              		.loc 1 850 4 view .LVU747
 2050 004a D4F80C22 		ldr	r2, [r4, #524]
 2051 004e C4F8EC21 		str	r2, [r4, #492]
 852:source\fatfs/ff.c **** 			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 2052              		.loc 1 852 4 view .LVU748
 852:source\fatfs/ff.c **** 			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 2053              		.loc 1 852 30 is_stmt 0 view .LVU749
 2054 0052 D4F81C22 		ldr	r2, [r4, #540]
 853:source\fatfs/ff.c **** 			fs->fsi_flag = 0;
 2055              		.loc 1 853 4 view .LVU750
 2056 0056 94F80102 		ldrb	r0, [r4, #513]	@ zero_extendqisi2
 852:source\fatfs/ff.c **** 			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 2057              		.loc 1 852 30 view .LVU751
 2058 005a 0132     		adds	r2, r2, #1
 852:source\fatfs/ff.c **** 			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 2059              		.loc 1 852 16 view .LVU752
 2060 005c C4F82C22 		str	r2, [r4, #556]
 853:source\fatfs/ff.c **** 			fs->fsi_flag = 0;
 2061              		.loc 1 853 4 is_stmt 1 view .LVU753
 2062 0060 2146     		mov	r1, r4
 2063 0062 FFF7FEFF 		bl	disk_write
 2064              	.LVL215:
 854:source\fatfs/ff.c **** 		}
 2065              		.loc 1 854 4 view .LVU754
 854:source\fatfs/ff.c **** 		}
 2066              		.loc 1 854 17 is_stmt 0 view .LVU755
 2067 0066 84F80552 		strb	r5, [r4, #517]
 2068              	.L233:
 857:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 2069              		.loc 1 857 3 is_stmt 1 view .LVU756
 857:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 2070              		.loc 1 857 7 is_stmt 0 view .LVU757
 2071 006a 0022     		movs	r2, #0
 2072 006c 94F80102 		ldrb	r0, [r4, #513]	@ zero_extendqisi2
 2073 0070 1146     		mov	r1, r2
 2074 0072 FFF7FEFF 		bl	disk_ioctl
 2075              	.LVL216:
 857:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 2076              		.loc 1 857 6 view .LVU758
 2077 0076 0038     		subs	r0, r0, #0
 2078 0078 18BF     		it	ne
 2079 007a 0120     		movne	r0, #1
 2080              	.LVL217:
 2081              	.L232:
 857:source\fatfs/ff.c **** 			res = FR_DISK_ERR;
 2082              		.loc 1 857 6 view .LVU759
 2083              	.LBE15:
 2084              	.LBE14:
 861:source\fatfs/ff.c **** }
 2085              		.loc 1 861 2 is_stmt 1 view .LVU760
 862:source\fatfs/ff.c **** #endif
 2086              		.loc 1 862 1 is_stmt 0 view .LVU761
 2087 007c 38BD     		pop	{r3, r4, r5, pc}
 2088              	.LVL218:
 2089              	.L235:
 862:source\fatfs/ff.c **** #endif
 2090              		.loc 1 862 1 view .LVU762
 2091 007e 00BF     		.align	2
 2092              	.L234:
 2093 0080 52526141 		.word	1096897106
 2094              		.cfi_endproc
 2095              	.LFE134:
 2097              		.section	.text.ld_clust.isra.0,"ax",%progbits
 2098              		.align	1
 2099              		.syntax unified
 2100              		.thumb
 2101              		.thumb_func
 2103              	ld_clust.isra.0:
 2104              	.LVL219:
 2105              	.LFB195:
1308:source\fatfs/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
 2106              		.loc 1 1308 7 is_stmt 1 view -0
 2107              		.cfi_startproc
 2108              		@ args = 0, pretend = 0, frame = 0
 2109              		@ frame_needed = 0, uses_anonymous_args = 0
 2110              		@ link register save eliminated.
1313:source\fatfs/ff.c **** 
 2111              		.loc 1 1313 2 view .LVU764
1315:source\fatfs/ff.c **** 	if (fs->fs_type == FS_FAT32)
 2112              		.loc 1 1315 2 view .LVU765
1316:source\fatfs/ff.c **** 		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 2113              		.loc 1 1316 5 is_stmt 0 view .LVU766
 2114 0000 0328     		cmp	r0, #3
1315:source\fatfs/ff.c **** 	if (fs->fs_type == FS_FAT32)
 2115              		.loc 1 1315 5 view .LVU767
 2116 0002 4B8B     		ldrh	r3, [r1, #26]	@ unaligned
 2117              	.LVL220:
1316:source\fatfs/ff.c **** 		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 2118              		.loc 1 1316 2 is_stmt 1 view .LVU768
1317:source\fatfs/ff.c **** 
 2119              		.loc 1 1317 3 view .LVU769
1317:source\fatfs/ff.c **** 
 2120              		.loc 1 1317 9 is_stmt 0 view .LVU770
 2121 0004 04BF     		itt	eq
 2122 0006 8A8A     		ldrheq	r2, [r1, #20]	@ unaligned
1317:source\fatfs/ff.c **** 
 2123              		.loc 1 1317 6 view .LVU771
 2124 0008 43EA0243 		orreq	r3, r3, r2, lsl #16
 2125              	.LVL221:
1319:source\fatfs/ff.c **** }
 2126              		.loc 1 1319 2 is_stmt 1 view .LVU772
1320:source\fatfs/ff.c **** 
 2127              		.loc 1 1320 1 is_stmt 0 view .LVU773
 2128 000c 1846     		mov	r0, r3
 2129 000e 7047     		bx	lr
 2130              		.cfi_endproc
 2131              	.LFE195:
 2133              		.section	.text.clust2sect,"ax",%progbits
 2134              		.align	1
 2135              		.global	clust2sect
 2136              		.syntax unified
 2137              		.thumb
 2138              		.thumb_func
 2140              	clust2sect:
 2141              	.LVL222:
 2142              	.LFB135:
 877:source\fatfs/ff.c **** 	clst -= 2;
 2143              		.loc 1 877 1 is_stmt 1 view -0
 2144              		.cfi_startproc
 2145              		@ args = 0, pretend = 0, frame = 0
 2146              		@ frame_needed = 0, uses_anonymous_args = 0
 2147              		@ link register save eliminated.
 878:source\fatfs/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 2148              		.loc 1 878 2 view .LVU775
 879:source\fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 2149              		.loc 1 879 27 is_stmt 0 view .LVU776
 2150 0000 D0F81432 		ldr	r3, [r0, #532]
 878:source\fatfs/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 2151              		.loc 1 878 7 view .LVU777
 2152 0004 0239     		subs	r1, r1, #2
 2153              	.LVL223:
 879:source\fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 2154              		.loc 1 879 2 is_stmt 1 view .LVU778
 879:source\fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 2155              		.loc 1 879 27 is_stmt 0 view .LVU779
 2156 0006 023B     		subs	r3, r3, #2
 879:source\fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 2157              		.loc 1 879 5 view .LVU780
 2158 0008 8B42     		cmp	r3, r1
 880:source\fatfs/ff.c **** }
 2159              		.loc 1 880 2 is_stmt 1 view .LVU781
 880:source\fatfs/ff.c **** }
 2160              		.loc 1 880 18 is_stmt 0 view .LVU782
 2161 000a 83BF     		ittte	hi
 2162 000c 90F80232 		ldrbhi	r3, [r0, #514]	@ zero_extendqisi2
 880:source\fatfs/ff.c **** }
 2163              		.loc 1 880 26 view .LVU783
 2164 0010 D0F82802 		ldrhi	r0, [r0, #552]
 2165              	.LVL224:
 880:source\fatfs/ff.c **** }
 2166              		.loc 1 880 26 view .LVU784
 2167 0014 01FB0300 		mlahi	r0, r1, r3, r0
 879:source\fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 2168              		.loc 1 879 39 view .LVU785
 2169 0018 0020     		movls	r0, #0
 881:source\fatfs/ff.c **** 
 2170              		.loc 1 881 1 view .LVU786
 2171 001a 7047     		bx	lr
 2172              		.cfi_endproc
 2173              	.LFE135:
 2175              		.section	.text.get_fat,"ax",%progbits
 2176              		.align	1
 2177              		.global	get_fat
 2178              		.syntax unified
 2179              		.thumb
 2180              		.thumb_func
 2182              	get_fat:
 2183              	.LVL225:
 2184              	.LFB136:
 895:source\fatfs/ff.c **** 	UINT wc, bc;
 2185              		.loc 1 895 1 is_stmt 1 view -0
 2186              		.cfi_startproc
 2187              		@ args = 0, pretend = 0, frame = 0
 2188              		@ frame_needed = 0, uses_anonymous_args = 0
 896:source\fatfs/ff.c **** 	BYTE *p;
 2189              		.loc 1 896 2 view .LVU788
 897:source\fatfs/ff.c **** 	DWORD val;
 2190              		.loc 1 897 2 view .LVU789
 898:source\fatfs/ff.c **** 
 2191              		.loc 1 898 2 view .LVU790
 901:source\fatfs/ff.c **** 		val = 1;	/* Internal error */
 2192              		.loc 1 901 2 view .LVU791
 901:source\fatfs/ff.c **** 		val = 1;	/* Internal error */
 2193              		.loc 1 901 5 is_stmt 0 view .LVU792
 2194 0000 0129     		cmp	r1, #1
 895:source\fatfs/ff.c **** 	UINT wc, bc;
 2195              		.loc 1 895 1 view .LVU793
 2196 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2197              		.cfi_def_cfa_offset 24
 2198              		.cfi_offset 3, -24
 2199              		.cfi_offset 4, -20
 2200              		.cfi_offset 5, -16
 2201              		.cfi_offset 6, -12
 2202              		.cfi_offset 7, -8
 2203              		.cfi_offset 14, -4
 895:source\fatfs/ff.c **** 	UINT wc, bc;
 2204              		.loc 1 895 1 view .LVU794
 2205 0004 0646     		mov	r6, r0
 2206 0006 0D46     		mov	r5, r1
 901:source\fatfs/ff.c **** 		val = 1;	/* Internal error */
 2207              		.loc 1 901 5 view .LVU795
 2208 0008 59D9     		bls	.L250
 901:source\fatfs/ff.c **** 		val = 1;	/* Internal error */
 2209              		.loc 1 901 15 discriminator 1 view .LVU796
 2210 000a D0F81432 		ldr	r3, [r0, #532]
 2211 000e 8B42     		cmp	r3, r1
 2212 0010 55D9     		bls	.L250
 2213              	.LVL226:
 2214              	.LBB18:
 2215              	.LBI18:
 891:source\fatfs/ff.c **** 	FATFS* fs,	/* File system object */
 2216              		.loc 1 891 7 is_stmt 1 view .LVU797
 2217              	.LBB19:
 905:source\fatfs/ff.c **** 
 2218              		.loc 1 905 3 view .LVU798
 907:source\fatfs/ff.c **** 		case FS_FAT12 :
 2219              		.loc 1 907 3 view .LVU799
 907:source\fatfs/ff.c **** 		case FS_FAT12 :
 2220              		.loc 1 907 13 is_stmt 0 view .LVU800
 2221 0012 90F80032 		ldrb	r3, [r0, #512]	@ zero_extendqisi2
 907:source\fatfs/ff.c **** 		case FS_FAT12 :
 2222              		.loc 1 907 3 view .LVU801
 2223 0016 022B     		cmp	r3, #2
 2224 0018 27D0     		beq	.L243
 2225 001a 032B     		cmp	r3, #3
 2226 001c 36D0     		beq	.L244
 2227 001e 012B     		cmp	r3, #1
 2228 0020 4DD1     		bne	.L250
 909:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2229              		.loc 1 909 4 is_stmt 1 view .LVU802
 2230              	.LVL227:
 909:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2231              		.loc 1 909 21 view .LVU803
 909:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2232              		.loc 1 909 24 is_stmt 0 view .LVU804
 2233 0022 01EB5104 		add	r4, r1, r1, lsr #1
 2234              	.LVL228:
 910:source\fatfs/ff.c **** 			wc = fs->win.d8[bc++ % SS(fs)];
 2235              		.loc 1 910 4 is_stmt 1 view .LVU805
 910:source\fatfs/ff.c **** 			wc = fs->win.d8[bc++ % SS(fs)];
 2236              		.loc 1 910 8 is_stmt 0 view .LVU806
 2237 0026 D0F82012 		ldr	r1, [r0, #544]
 2238              	.LVL229:
 910:source\fatfs/ff.c **** 			wc = fs->win.d8[bc++ % SS(fs)];
 2239              		.loc 1 910 8 view .LVU807
 2240 002a 01EB5421 		add	r1, r1, r4, lsr #9
 2241 002e FFF7FEFF 		bl	move_window
 2242              	.LVL230:
 910:source\fatfs/ff.c **** 			wc = fs->win.d8[bc++ % SS(fs)];
 2243              		.loc 1 910 7 view .LVU808
 2244 0032 10B1     		cbz	r0, .L245
 2245              	.LVL231:
 2246              	.L246:
 905:source\fatfs/ff.c **** 
 2247              		.loc 1 905 7 view .LVU809
 2248 0034 4FF0FF30 		mov	r0, #-1
 2249              	.LVL232:
 2250              	.L241:
 905:source\fatfs/ff.c **** 
 2251              		.loc 1 905 7 view .LVU810
 2252              	.LBE19:
 2253              	.LBE18:
 935:source\fatfs/ff.c **** 
 2254              		.loc 1 935 1 view .LVU811
 2255 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2256              	.LVL233:
 2257              	.L245:
 2258              	.LBB21:
 2259              	.LBB20:
 911:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2260              		.loc 1 911 4 is_stmt 1 view .LVU812
 912:source\fatfs/ff.c **** 			wc |= fs->win.d8[bc % SS(fs)] << 8;
 2261              		.loc 1 912 8 is_stmt 0 view .LVU813
 2262 003a D6F82012 		ldr	r1, [r6, #544]
 911:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2263              		.loc 1 911 22 view .LVU814
 2264 003e 671C     		adds	r7, r4, #1
 2265              	.LVL234:
 911:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2266              		.loc 1 911 25 view .LVU815
 2267 0040 C4F30804 		ubfx	r4, r4, #0, #9
 912:source\fatfs/ff.c **** 			wc |= fs->win.d8[bc % SS(fs)] << 8;
 2268              		.loc 1 912 8 view .LVU816
 2269 0044 01EB5721 		add	r1, r1, r7, lsr #9
 2270 0048 3046     		mov	r0, r6
 911:source\fatfs/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2271              		.loc 1 911 19 view .LVU817
 2272 004a 345D     		ldrb	r4, [r6, r4]	@ zero_extendqisi2
 2273              	.LVL235:
 912:source\fatfs/ff.c **** 			wc |= fs->win.d8[bc % SS(fs)] << 8;
 2274              		.loc 1 912 4 is_stmt 1 view .LVU818
 912:source\fatfs/ff.c **** 			wc |= fs->win.d8[bc % SS(fs)] << 8;
 2275              		.loc 1 912 8 is_stmt 0 view .LVU819
 2276 004c FFF7FEFF 		bl	move_window
 2277              	.LVL236:
 912:source\fatfs/ff.c **** 			wc |= fs->win.d8[bc % SS(fs)] << 8;
 2278              		.loc 1 912 7 view .LVU820
 2279 0050 0028     		cmp	r0, #0
 2280 0052 EFD1     		bne	.L246
 913:source\fatfs/ff.c **** 			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 2281              		.loc 1 913 4 is_stmt 1 view .LVU821
 913:source\fatfs/ff.c **** 			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 2282              		.loc 1 913 24 is_stmt 0 view .LVU822
 2283 0054 C7F30807 		ubfx	r7, r7, #0, #9
 2284              	.LVL237:
 913:source\fatfs/ff.c **** 			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 2285              		.loc 1 913 34 view .LVU823
 2286 0058 F35D     		ldrb	r3, [r6, r7]	@ zero_extendqisi2
 913:source\fatfs/ff.c **** 			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 2287              		.loc 1 913 7 view .LVU824
 2288 005a 44EA0320 		orr	r0, r4, r3, lsl #8
 2289              	.LVL238:
 914:source\fatfs/ff.c **** 			break;
 2290              		.loc 1 914 4 is_stmt 1 view .LVU825
 914:source\fatfs/ff.c **** 			break;
 2291              		.loc 1 914 29 is_stmt 0 view .LVU826
 2292 005e EB07     		lsls	r3, r5, #31
 2293 0060 4CBF     		ite	mi
 2294 0062 0009     		lsrmi	r0, r0, #4
 2295              	.LVL239:
 914:source\fatfs/ff.c **** 			break;
 2296              		.loc 1 914 29 view .LVU827
 2297 0064 C0F30B00 		ubfxpl	r0, r0, #0, #12
 2298 0068 E6E7     		b	.L241
 2299              	.LVL240:
 2300              	.L243:
 918:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 2301              		.loc 1 918 4 is_stmt 1 view .LVU828
 918:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 2302              		.loc 1 918 8 is_stmt 0 view .LVU829
 2303 006a D0F82012 		ldr	r1, [r0, #544]
 2304              	.LVL241:
 918:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 2305              		.loc 1 918 8 view .LVU830
 2306 006e 01EB1521 		add	r1, r1, r5, lsr #8
 2307 0072 FFF7FEFF 		bl	move_window
 2308              	.LVL242:
 918:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 2309              		.loc 1 918 7 view .LVU831
 2310 0076 0028     		cmp	r0, #0
 2311 0078 DCD1     		bne	.L246
 919:source\fatfs/ff.c **** 			val = LD_WORD(p);
 2312              		.loc 1 919 4 is_stmt 1 view .LVU832
 919:source\fatfs/ff.c **** 			val = LD_WORD(p);
 2313              		.loc 1 919 25 is_stmt 0 view .LVU833
 2314 007a 6D00     		lsls	r5, r5, #1
 2315              	.LVL243:
 919:source\fatfs/ff.c **** 			val = LD_WORD(p);
 2316              		.loc 1 919 29 view .LVU834
 2317 007c 05F4FF75 		and	r5, r5, #510
 2318              	.LVL244:
 920:source\fatfs/ff.c **** 			break;
 2319              		.loc 1 920 4 is_stmt 1 view .LVU835
 920:source\fatfs/ff.c **** 			break;
 2320              		.loc 1 920 10 is_stmt 0 view .LVU836
 2321 0080 7319     		adds	r3, r6, r5
 2322              	.LVL245:
 920:source\fatfs/ff.c **** 			break;
 2323              		.loc 1 920 10 view .LVU837
 2324 0082 705D     		ldrb	r0, [r6, r5]	@ zero_extendqisi2
 2325 0084 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2326              	.LVL246:
 920:source\fatfs/ff.c **** 			break;
 2327              		.loc 1 920 8 view .LVU838
 2328 0086 40EA0320 		orr	r0, r0, r3, lsl #8
 2329              	.LVL247:
 921:source\fatfs/ff.c **** 
 2330              		.loc 1 921 4 is_stmt 1 view .LVU839
 2331 008a D5E7     		b	.L241
 2332              	.LVL248:
 2333              	.L244:
 924:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 2334              		.loc 1 924 4 view .LVU840
 924:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 2335              		.loc 1 924 8 is_stmt 0 view .LVU841
 2336 008c D0F82012 		ldr	r1, [r0, #544]
 2337              	.LVL249:
 924:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 2338              		.loc 1 924 8 view .LVU842
 2339 0090 01EBD511 		add	r1, r1, r5, lsr #7
 2340 0094 FFF7FEFF 		bl	move_window
 2341              	.LVL250:
 924:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 2342              		.loc 1 924 7 view .LVU843
 2343 0098 0028     		cmp	r0, #0
 2344 009a CBD1     		bne	.L246
 925:source\fatfs/ff.c **** 			val = LD_DWORD(p) & 0x0FFFFFFF;
 2345              		.loc 1 925 4 is_stmt 1 view .LVU844
 925:source\fatfs/ff.c **** 			val = LD_DWORD(p) & 0x0FFFFFFF;
 2346              		.loc 1 925 25 is_stmt 0 view .LVU845
 2347 009c AD00     		lsls	r5, r5, #2
 2348              	.LVL251:
 925:source\fatfs/ff.c **** 			val = LD_DWORD(p) & 0x0FFFFFFF;
 2349              		.loc 1 925 29 view .LVU846
 2350 009e 05F4FE75 		and	r5, r5, #508
 925:source\fatfs/ff.c **** 			val = LD_DWORD(p) & 0x0FFFFFFF;
 2351              		.loc 1 925 6 view .LVU847
 2352 00a2 7319     		adds	r3, r6, r5
 2353              	.LVL252:
 926:source\fatfs/ff.c **** 			break;
 2354              		.loc 1 926 4 is_stmt 1 view .LVU848
 926:source\fatfs/ff.c **** 			break;
 2355              		.loc 1 926 10 is_stmt 0 view .LVU849
 2356 00a4 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 2357 00a6 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 2358 00a8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2359              	.LVL253:
 926:source\fatfs/ff.c **** 			break;
 2360              		.loc 1 926 10 view .LVU850
 2361 00aa 0004     		lsls	r0, r0, #16
 2362 00ac 40EA0260 		orr	r0, r0, r2, lsl #24
 2363 00b0 725D     		ldrb	r2, [r6, r5]	@ zero_extendqisi2
 2364 00b2 1043     		orrs	r0, r0, r2
 2365 00b4 40EA0320 		orr	r0, r0, r3, lsl #8
 926:source\fatfs/ff.c **** 			break;
 2366              		.loc 1 926 8 view .LVU851
 2367 00b8 20F07040 		bic	r0, r0, #-268435456
 2368              	.LVL254:
 927:source\fatfs/ff.c **** 
 2369              		.loc 1 927 4 is_stmt 1 view .LVU852
 2370 00bc BCE7     		b	.L241
 2371              	.LVL255:
 2372              	.L250:
 927:source\fatfs/ff.c **** 
 2373              		.loc 1 927 4 is_stmt 0 view .LVU853
 2374              	.LBE20:
 2375              	.LBE21:
 902:source\fatfs/ff.c **** 
 2376              		.loc 1 902 7 view .LVU854
 2377 00be 0120     		movs	r0, #1
 2378              	.LVL256:
 934:source\fatfs/ff.c **** }
 2379              		.loc 1 934 2 is_stmt 1 view .LVU855
 934:source\fatfs/ff.c **** }
 2380              		.loc 1 934 9 is_stmt 0 view .LVU856
 2381 00c0 BAE7     		b	.L241
 2382              		.cfi_endproc
 2383              	.LFE136:
 2385              		.section	.text.dir_sdi,"ax",%progbits
 2386              		.align	1
 2387              		.syntax unified
 2388              		.thumb
 2389              		.thumb_func
 2391              	dir_sdi:
 2392              	.LVL257:
 2393              	.LFB141:
1157:source\fatfs/ff.c **** 	DWORD clst, sect;
 2394              		.loc 1 1157 1 is_stmt 1 view -0
 2395              		.cfi_startproc
 2396              		@ args = 0, pretend = 0, frame = 0
 2397              		@ frame_needed = 0, uses_anonymous_args = 0
1158:source\fatfs/ff.c **** 	UINT ic;
 2398              		.loc 1 1158 2 view .LVU858
1159:source\fatfs/ff.c **** 
 2399              		.loc 1 1159 2 view .LVU859
1162:source\fatfs/ff.c **** 	clst = dp->sclust;		/* Table start cluster (0:root) */
 2400              		.loc 1 1162 2 view .LVU860
1163:source\fatfs/ff.c **** 	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 2401              		.loc 1 1163 7 is_stmt 0 view .LVU861
 2402 0000 D0F80822 		ldr	r2, [r0, #520]
1164:source\fatfs/ff.c **** 		return FR_INT_ERR;
 2403              		.loc 1 1164 5 view .LVU862
 2404 0004 012A     		cmp	r2, #1
1157:source\fatfs/ff.c **** 	DWORD clst, sect;
 2405              		.loc 1 1157 1 view .LVU863
 2406 0006 70B5     		push	{r4, r5, r6, lr}
 2407              		.cfi_def_cfa_offset 16
 2408              		.cfi_offset 4, -16
 2409              		.cfi_offset 5, -12
 2410              		.cfi_offset 6, -8
 2411              		.cfi_offset 14, -4
1157:source\fatfs/ff.c **** 	DWORD clst, sect;
 2412              		.loc 1 1157 1 view .LVU864
 2413 0008 0446     		mov	r4, r0
 2414 000a 0D46     		mov	r5, r1
1162:source\fatfs/ff.c **** 	clst = dp->sclust;		/* Table start cluster (0:root) */
 2415              		.loc 1 1162 14 view .LVU865
 2416 000c A0F80612 		strh	r1, [r0, #518]	@ movhi
1163:source\fatfs/ff.c **** 	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 2417              		.loc 1 1163 2 is_stmt 1 view .LVU866
 2418              	.LVL258:
1164:source\fatfs/ff.c **** 		return FR_INT_ERR;
 2419              		.loc 1 1164 2 view .LVU867
1164:source\fatfs/ff.c **** 		return FR_INT_ERR;
 2420              		.loc 1 1164 5 is_stmt 0 view .LVU868
 2421 0010 01D1     		bne	.L252
 2422              	.LVL259:
 2423              	.L254:
1165:source\fatfs/ff.c **** 	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 2424              		.loc 1 1165 10 view .LVU869
 2425 0012 0220     		movs	r0, #2
 2426              	.LVL260:
 2427              	.L253:
1191:source\fatfs/ff.c **** 
 2428              		.loc 1 1191 1 view .LVU870
 2429 0014 70BD     		pop	{r4, r5, r6, pc}
 2430              	.LVL261:
 2431              	.L252:
1164:source\fatfs/ff.c **** 		return FR_INT_ERR;
 2432              		.loc 1 1164 29 discriminator 1 view .LVU871
 2433 0016 D0F80032 		ldr	r3, [r0, #512]
1164:source\fatfs/ff.c **** 		return FR_INT_ERR;
 2434              		.loc 1 1164 16 discriminator 1 view .LVU872
 2435 001a D3F81412 		ldr	r1, [r3, #532]
 2436              	.LVL262:
1164:source\fatfs/ff.c **** 		return FR_INT_ERR;
 2437              		.loc 1 1164 16 discriminator 1 view .LVU873
 2438 001e 9142     		cmp	r1, r2
 2439 0020 F7D9     		bls	.L254
1166:source\fatfs/ff.c **** 		clst = dp->fs->dirbase;
 2440              		.loc 1 1166 2 is_stmt 1 view .LVU874
1166:source\fatfs/ff.c **** 		clst = dp->fs->dirbase;
 2441              		.loc 1 1166 5 is_stmt 0 view .LVU875
 2442 0022 F2B9     		cbnz	r2, .L260
1166:source\fatfs/ff.c **** 		clst = dp->fs->dirbase;
 2443              		.loc 1 1166 12 discriminator 1 view .LVU876
 2444 0024 93F80012 		ldrb	r1, [r3, #512]	@ zero_extendqisi2
 2445 0028 0329     		cmp	r1, #3
 2446 002a 02D1     		bne	.L256
1167:source\fatfs/ff.c **** 
 2447              		.loc 1 1167 3 is_stmt 1 view .LVU877
1167:source\fatfs/ff.c **** 
 2448              		.loc 1 1167 8 is_stmt 0 view .LVU878
 2449 002c D3F82412 		ldr	r1, [r3, #548]
 2450              	.LVL263:
1169:source\fatfs/ff.c **** 		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 2451              		.loc 1 1169 2 is_stmt 1 view .LVU879
1169:source\fatfs/ff.c **** 		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 2452              		.loc 1 1169 5 is_stmt 0 view .LVU880
 2453 0030 C1B9     		cbnz	r1, .L255
 2454              	.LVL264:
 2455              	.L256:
1170:source\fatfs/ff.c **** 			return FR_INT_ERR;
 2456              		.loc 1 1170 3 is_stmt 1 view .LVU881
1170:source\fatfs/ff.c **** 			return FR_INT_ERR;
 2457              		.loc 1 1170 20 is_stmt 0 view .LVU882
 2458 0032 B3F80812 		ldrh	r1, [r3, #520]
1170:source\fatfs/ff.c **** 			return FR_INT_ERR;
 2459              		.loc 1 1170 6 view .LVU883
 2460 0036 A942     		cmp	r1, r5
 2461 0038 EBD9     		bls	.L254
1172:source\fatfs/ff.c **** 	}
 2462              		.loc 1 1172 3 is_stmt 1 view .LVU884
1172:source\fatfs/ff.c **** 	}
 2463              		.loc 1 1172 8 is_stmt 0 view .LVU885
 2464 003a D3F82402 		ldr	r0, [r3, #548]
 2465              	.LVL265:
 2466              	.L257:
1185:source\fatfs/ff.c **** 	if (!sect) return FR_INT_ERR;
 2467              		.loc 1 1185 2 is_stmt 1 view .LVU886
1185:source\fatfs/ff.c **** 	if (!sect) return FR_INT_ERR;
 2468              		.loc 1 1185 12 is_stmt 0 view .LVU887
 2469 003e C4F80C22 		str	r2, [r4, #524]
1186:source\fatfs/ff.c **** 	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 2470              		.loc 1 1186 2 is_stmt 1 view .LVU888
1186:source\fatfs/ff.c **** 	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 2471              		.loc 1 1186 5 is_stmt 0 view .LVU889
 2472 0042 0028     		cmp	r0, #0
 2473 0044 E5D0     		beq	.L254
1187:source\fatfs/ff.c **** 	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the se
 2474              		.loc 1 1187 2 is_stmt 1 view .LVU890
1188:source\fatfs/ff.c **** 
 2475              		.loc 1 1188 27 is_stmt 0 view .LVU891
 2476 0046 D4F80032 		ldr	r3, [r4, #512]
1187:source\fatfs/ff.c **** 	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the se
 2477              		.loc 1 1187 18 view .LVU892
 2478 004a 00EB1510 		add	r0, r0, r5, lsr #4
 2479              	.LVL266:
1188:source\fatfs/ff.c **** 
 2480              		.loc 1 1188 34 view .LVU893
 2481 004e 05F00F05 		and	r5, r5, #15
 2482              	.LVL267:
1188:source\fatfs/ff.c **** 
 2483              		.loc 1 1188 27 view .LVU894
 2484 0052 03EB4513 		add	r3, r3, r5, lsl #5
1187:source\fatfs/ff.c **** 	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the se
 2485              		.loc 1 1187 11 view .LVU895
 2486 0056 C4F81002 		str	r0, [r4, #528]
1188:source\fatfs/ff.c **** 
 2487              		.loc 1 1188 2 is_stmt 1 view .LVU896
1188:source\fatfs/ff.c **** 
 2488              		.loc 1 1188 10 is_stmt 0 view .LVU897
 2489 005a C4F81432 		str	r3, [r4, #532]
1190:source\fatfs/ff.c **** }
 2490              		.loc 1 1190 2 is_stmt 1 view .LVU898
1190:source\fatfs/ff.c **** }
 2491              		.loc 1 1190 9 is_stmt 0 view .LVU899
 2492 005e 0020     		movs	r0, #0
 2493 0060 D8E7     		b	.L253
 2494              	.LVL268:
 2495              	.L260:
1190:source\fatfs/ff.c **** }
 2496              		.loc 1 1190 9 view .LVU900
 2497 0062 1146     		mov	r1, r2
 2498              	.LVL269:
 2499              	.L255:
1175:source\fatfs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 2500              		.loc 1 1175 3 is_stmt 1 view .LVU901
1175:source\fatfs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 2501              		.loc 1 1175 6 is_stmt 0 view .LVU902
 2502 0064 93F80262 		ldrb	r6, [r3, #514]	@ zero_extendqisi2
1176:source\fatfs/ff.c **** 			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 2503              		.loc 1 1176 9 view .LVU903
 2504 0068 0A46     		mov	r2, r1
1175:source\fatfs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 2505              		.loc 1 1175 6 view .LVU904
 2506 006a 3601     		lsls	r6, r6, #4
 2507              	.LVL270:
1176:source\fatfs/ff.c **** 			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 2508              		.loc 1 1176 3 is_stmt 1 view .LVU905
 2509              	.L258:
1176:source\fatfs/ff.c **** 			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 2510              		.loc 1 1176 14 view .LVU906
 2511 006c B542     		cmp	r5, r6
1177:source\fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2512              		.loc 1 1177 11 is_stmt 0 view .LVU907
 2513 006e D4F80002 		ldr	r0, [r4, #512]
 2514 0072 1146     		mov	r1, r2
1176:source\fatfs/ff.c **** 			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 2515              		.loc 1 1176 14 view .LVU908
 2516 0074 02D2     		bcs	.L259
1183:source\fatfs/ff.c **** 	}
 2517              		.loc 1 1183 3 is_stmt 1 view .LVU909
1183:source\fatfs/ff.c **** 	}
 2518              		.loc 1 1183 10 is_stmt 0 view .LVU910
 2519 0076 FFF7FEFF 		bl	clust2sect
 2520              	.LVL271:
1183:source\fatfs/ff.c **** 	}
 2521              		.loc 1 1183 10 view .LVU911
 2522 007a E0E7     		b	.L257
 2523              	.LVL272:
 2524              	.L259:
1177:source\fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2525              		.loc 1 1177 4 is_stmt 1 view .LVU912
1177:source\fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2526              		.loc 1 1177 11 is_stmt 0 view .LVU913
 2527 007c FFF7FEFF 		bl	get_fat
 2528              	.LVL273:
1178:source\fatfs/ff.c **** 			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 2529              		.loc 1 1178 7 view .LVU914
 2530 0080 431C     		adds	r3, r0, #1
1177:source\fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2531              		.loc 1 1177 11 view .LVU915
 2532 0082 0246     		mov	r2, r0
 2533              	.LVL274:
1178:source\fatfs/ff.c **** 			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 2534              		.loc 1 1178 4 is_stmt 1 view .LVU916
1178:source\fatfs/ff.c **** 			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 2535              		.loc 1 1178 7 is_stmt 0 view .LVU917
 2536 0084 09D0     		beq	.L261
1179:source\fatfs/ff.c **** 				return FR_INT_ERR;
 2537              		.loc 1 1179 4 is_stmt 1 view .LVU918
1179:source\fatfs/ff.c **** 				return FR_INT_ERR;
 2538              		.loc 1 1179 7 is_stmt 0 view .LVU919
 2539 0086 0128     		cmp	r0, #1
 2540 0088 C3D9     		bls	.L254
1179:source\fatfs/ff.c **** 				return FR_INT_ERR;
 2541              		.loc 1 1179 34 discriminator 1 view .LVU920
 2542 008a D4F80032 		ldr	r3, [r4, #512]
1179:source\fatfs/ff.c **** 				return FR_INT_ERR;
 2543              		.loc 1 1179 17 discriminator 1 view .LVU921
 2544 008e D3F81432 		ldr	r3, [r3, #532]
 2545 0092 8342     		cmp	r3, r0
 2546 0094 BDD9     		bls	.L254
1181:source\fatfs/ff.c **** 		}
 2547              		.loc 1 1181 4 is_stmt 1 view .LVU922
1181:source\fatfs/ff.c **** 		}
 2548              		.loc 1 1181 8 is_stmt 0 view .LVU923
 2549 0096 AD1B     		subs	r5, r5, r6
 2550              	.LVL275:
1181:source\fatfs/ff.c **** 		}
 2551              		.loc 1 1181 8 view .LVU924
 2552 0098 E8E7     		b	.L258
 2553              	.L261:
1178:source\fatfs/ff.c **** 			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 2554              		.loc 1 1178 35 view .LVU925
 2555 009a 0120     		movs	r0, #1
 2556              	.LVL276:
1178:source\fatfs/ff.c **** 			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 2557              		.loc 1 1178 35 view .LVU926
 2558 009c BAE7     		b	.L253
 2559              		.cfi_endproc
 2560              	.LFE141:
 2562              		.section	.text.put_fat,"ax",%progbits
 2563              		.align	1
 2564              		.global	put_fat
 2565              		.syntax unified
 2566              		.thumb
 2567              		.thumb_func
 2569              	put_fat:
 2570              	.LVL277:
 2571              	.LFB137:
 951:source\fatfs/ff.c **** 	UINT bc;
 2572              		.loc 1 951 1 is_stmt 1 view -0
 2573              		.cfi_startproc
 2574              		@ args = 0, pretend = 0, frame = 0
 2575              		@ frame_needed = 0, uses_anonymous_args = 0
 952:source\fatfs/ff.c **** 	BYTE *p;
 2576              		.loc 1 952 2 view .LVU928
 953:source\fatfs/ff.c **** 	FRESULT res;
 2577              		.loc 1 953 2 view .LVU929
 954:source\fatfs/ff.c **** 
 2578              		.loc 1 954 2 view .LVU930
 957:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 2579              		.loc 1 957 2 view .LVU931
 957:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 2580              		.loc 1 957 5 is_stmt 0 view .LVU932
 2581 0000 0129     		cmp	r1, #1
 951:source\fatfs/ff.c **** 	UINT bc;
 2582              		.loc 1 951 1 view .LVU933
 2583 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2584              		.cfi_def_cfa_offset 24
 2585              		.cfi_offset 4, -24
 2586              		.cfi_offset 5, -20
 2587              		.cfi_offset 6, -16
 2588              		.cfi_offset 7, -12
 2589              		.cfi_offset 8, -8
 2590              		.cfi_offset 14, -4
 951:source\fatfs/ff.c **** 	UINT bc;
 2591              		.loc 1 951 1 view .LVU934
 2592 0006 0446     		mov	r4, r0
 2593 0008 0E46     		mov	r6, r1
 2594 000a 1546     		mov	r5, r2
 957:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 2595              		.loc 1 957 5 view .LVU935
 2596 000c 70D9     		bls	.L276
 957:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 2597              		.loc 1 957 15 discriminator 1 view .LVU936
 2598 000e D0F81432 		ldr	r3, [r0, #532]
 2599 0012 8B42     		cmp	r3, r1
 2600 0014 6CD9     		bls	.L276
 2601              	.LVL278:
 2602              	.LBB24:
 2603              	.LBI24:
 946:source\fatfs/ff.c **** 	FATFS* fs,	/* File system object */
 2604              		.loc 1 946 9 is_stmt 1 view .LVU937
 2605              	.LBB25:
 961:source\fatfs/ff.c **** 		case FS_FAT12 :
 2606              		.loc 1 961 3 view .LVU938
 961:source\fatfs/ff.c **** 		case FS_FAT12 :
 2607              		.loc 1 961 13 is_stmt 0 view .LVU939
 2608 0016 90F80032 		ldrb	r3, [r0, #512]	@ zero_extendqisi2
 961:source\fatfs/ff.c **** 		case FS_FAT12 :
 2609              		.loc 1 961 3 view .LVU940
 2610 001a 022B     		cmp	r3, #2
 2611 001c 3DD0     		beq	.L267
 2612 001e 032B     		cmp	r3, #3
 2613 0020 4CD0     		beq	.L268
 2614 0022 012B     		cmp	r3, #1
 2615 0024 64D1     		bne	.L276
 963:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2616              		.loc 1 963 4 is_stmt 1 view .LVU941
 2617              	.LVL279:
 963:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2618              		.loc 1 963 21 view .LVU942
 963:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2619              		.loc 1 963 24 is_stmt 0 view .LVU943
 2620 0026 01EB5107 		add	r7, r1, r1, lsr #1
 2621              	.LVL280:
 964:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2622              		.loc 1 964 4 is_stmt 1 view .LVU944
 964:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2623              		.loc 1 964 10 is_stmt 0 view .LVU945
 2624 002a D0F82012 		ldr	r1, [r0, #544]
 2625              	.LVL281:
 964:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2626              		.loc 1 964 10 view .LVU946
 2627 002e 01EB5721 		add	r1, r1, r7, lsr #9
 2628 0032 FFF7FEFF 		bl	move_window
 2629              	.LVL282:
 965:source\fatfs/ff.c **** 			p = &fs->win.d8[bc++ % SS(fs)];
 2630              		.loc 1 965 4 is_stmt 1 view .LVU947
 965:source\fatfs/ff.c **** 			p = &fs->win.d8[bc++ % SS(fs)];
 2631              		.loc 1 965 7 is_stmt 0 view .LVU948
 2632 0036 30BB     		cbnz	r0, .L266
 966:source\fatfs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2633              		.loc 1 966 4 is_stmt 1 view .LVU949
 966:source\fatfs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2634              		.loc 1 966 22 is_stmt 0 view .LVU950
 2635 0038 07F10108 		add	r8, r7, #1
 2636              	.LVL283:
 966:source\fatfs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2637              		.loc 1 966 25 view .LVU951
 2638 003c C7F30807 		ubfx	r7, r7, #0, #9
 2639              	.LVL284:
 967:source\fatfs/ff.c **** 			fs->wflag = 1;
 2640              		.loc 1 967 4 is_stmt 1 view .LVU952
 967:source\fatfs/ff.c **** 			fs->wflag = 1;
 2641              		.loc 1 967 7 is_stmt 0 view .LVU953
 2642 0040 16F00106 		ands	r6, r6, #1
 2643              	.LVL285:
 967:source\fatfs/ff.c **** 			fs->wflag = 1;
 2644              		.loc 1 967 7 view .LVU954
 2645 0044 1FBF     		itttt	ne
 2646 0046 E25D     		ldrbne	r2, [r4, r7]	@ zero_extendqisi2
 967:source\fatfs/ff.c **** 			fs->wflag = 1;
 2647              		.loc 1 967 48 view .LVU955
 2648 0048 2B01     		lslne	r3, r5, #4
 967:source\fatfs/ff.c **** 			fs->wflag = 1;
 2649              		.loc 1 967 7 view .LVU956
 2650 004a 03F0F003 		andne	r3, r3, #240
 2651 004e 02F00F02 		andne	r2, r2, #15
 2652 0052 14BF     		ite	ne
 2653 0054 1343     		orrne	r3, r3, r2
 2654 0056 EBB2     		uxtbeq	r3, r5
 2655 0058 E355     		strb	r3, [r4, r7]
 968:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2656              		.loc 1 968 4 is_stmt 1 view .LVU957
 969:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2657              		.loc 1 969 10 is_stmt 0 view .LVU958
 2658 005a D4F82012 		ldr	r1, [r4, #544]
 968:source\fatfs/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2659              		.loc 1 968 14 view .LVU959
 2660 005e 0123     		movs	r3, #1
 2661 0060 84F80432 		strb	r3, [r4, #516]
 969:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2662              		.loc 1 969 4 is_stmt 1 view .LVU960
 969:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2663              		.loc 1 969 10 is_stmt 0 view .LVU961
 2664 0064 01EB5821 		add	r1, r1, r8, lsr #9
 2665 0068 2046     		mov	r0, r4
 2666              	.LVL286:
 969:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2667              		.loc 1 969 10 view .LVU962
 2668 006a FFF7FEFF 		bl	move_window
 2669              	.LVL287:
 970:source\fatfs/ff.c **** 			p = &fs->win.d8[bc % SS(fs)];
 2670              		.loc 1 970 4 is_stmt 1 view .LVU963
 970:source\fatfs/ff.c **** 			p = &fs->win.d8[bc % SS(fs)];
 2671              		.loc 1 970 7 is_stmt 0 view .LVU964
 2672 006e 50B9     		cbnz	r0, .L266
 971:source\fatfs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2673              		.loc 1 971 4 is_stmt 1 view .LVU965
 971:source\fatfs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2674              		.loc 1 971 23 is_stmt 0 view .LVU966
 2675 0070 C8F30808 		ubfx	r8, r8, #0, #9
 2676              	.LVL288:
 972:source\fatfs/ff.c **** 			fs->wflag = 1;
 2677              		.loc 1 972 4 is_stmt 1 view .LVU967
 972:source\fatfs/ff.c **** 			fs->wflag = 1;
 2678              		.loc 1 972 7 is_stmt 0 view .LVU968
 2679 0074 4EB1     		cbz	r6, .L271
 972:source\fatfs/ff.c **** 			fs->wflag = 1;
 2680              		.loc 1 972 7 view .LVU969
 2681 0076 C5F30715 		ubfx	r5, r5, #4, #8
 2682              	.LVL289:
 2683              	.L272:
 972:source\fatfs/ff.c **** 			fs->wflag = 1;
 2684              		.loc 1 972 7 view .LVU970
 2685 007a 04F80850 		strb	r5, [r4, r8]
 973:source\fatfs/ff.c **** 			break;
 2686              		.loc 1 973 4 is_stmt 1 view .LVU971
 974:source\fatfs/ff.c **** 
 2687              		.loc 1 974 4 view .LVU972
 2688              	.LVL290:
 2689              	.L273:
 990:source\fatfs/ff.c **** 			break;
 2690              		.loc 1 990 14 is_stmt 0 view .LVU973
 2691 007e 0123     		movs	r3, #1
 2692 0080 84F80432 		strb	r3, [r4, #516]
 969:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2693              		.loc 1 969 10 view .LVU974
 2694 0084 0020     		movs	r0, #0
 2695              	.LVL291:
 2696              	.L266:
 969:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2697              		.loc 1 969 10 view .LVU975
 2698              	.LBE25:
 2699              	.LBE24:
 998:source\fatfs/ff.c **** }
 2700              		.loc 1 998 2 is_stmt 1 view .LVU976
 999:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
 2701              		.loc 1 999 1 is_stmt 0 view .LVU977
 2702 0086 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2703              	.LVL292:
 2704              	.L271:
 2705              	.LBB27:
 2706              	.LBB26:
 972:source\fatfs/ff.c **** 			fs->wflag = 1;
 2707              		.loc 1 972 7 view .LVU978
 2708 008a 14F80830 		ldrb	r3, [r4, r8]	@ zero_extendqisi2
 972:source\fatfs/ff.c **** 			fs->wflag = 1;
 2709              		.loc 1 972 74 view .LVU979
 2710 008e C5F30325 		ubfx	r5, r5, #8, #4
 2711              	.LVL293:
 972:source\fatfs/ff.c **** 			fs->wflag = 1;
 2712              		.loc 1 972 7 view .LVU980
 2713 0092 23F00F03 		bic	r3, r3, #15
 2714 0096 1D43     		orrs	r5, r5, r3
 2715 0098 EFE7     		b	.L272
 2716              	.LVL294:
 2717              	.L267:
 977:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2718              		.loc 1 977 4 is_stmt 1 view .LVU981
 977:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2719              		.loc 1 977 10 is_stmt 0 view .LVU982
 2720 009a D0F82012 		ldr	r1, [r0, #544]
 2721              	.LVL295:
 977:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2722              		.loc 1 977 10 view .LVU983
 2723 009e 01EB1621 		add	r1, r1, r6, lsr #8
 2724 00a2 FFF7FEFF 		bl	move_window
 2725              	.LVL296:
 978:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 2726              		.loc 1 978 4 is_stmt 1 view .LVU984
 978:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 2 % SS(fs)];
 2727              		.loc 1 978 7 is_stmt 0 view .LVU985
 2728 00a6 0028     		cmp	r0, #0
 2729 00a8 EDD1     		bne	.L266
 979:source\fatfs/ff.c **** 			ST_WORD(p, (WORD)val);
 2730              		.loc 1 979 4 is_stmt 1 view .LVU986
 979:source\fatfs/ff.c **** 			ST_WORD(p, (WORD)val);
 2731              		.loc 1 979 25 is_stmt 0 view .LVU987
 2732 00aa 7600     		lsls	r6, r6, #1
 2733              	.LVL297:
 979:source\fatfs/ff.c **** 			ST_WORD(p, (WORD)val);
 2734              		.loc 1 979 29 view .LVU988
 2735 00ac 06F4FF76 		and	r6, r6, #510
 2736              	.LVL298:
 980:source\fatfs/ff.c **** 			fs->wflag = 1;
 2737              		.loc 1 980 4 is_stmt 1 view .LVU989
 2738 00b0 A555     		strb	r5, [r4, r6]
 980:source\fatfs/ff.c **** 			fs->wflag = 1;
 2739              		.loc 1 980 4 view .LVU990
 2740 00b2 2644     		add	r6, r6, r4
 2741              	.LVL299:
 980:source\fatfs/ff.c **** 			fs->wflag = 1;
 2742              		.loc 1 980 4 is_stmt 0 view .LVU991
 2743 00b4 C5F30725 		ubfx	r5, r5, #8, #8
 2744              	.LVL300:
 980:source\fatfs/ff.c **** 			fs->wflag = 1;
 2745              		.loc 1 980 4 view .LVU992
 2746 00b8 7570     		strb	r5, [r6, #1]
 981:source\fatfs/ff.c **** 			break;
 2747              		.loc 1 981 4 is_stmt 1 view .LVU993
 982:source\fatfs/ff.c **** 
 2748              		.loc 1 982 4 view .LVU994
 2749 00ba E0E7     		b	.L273
 2750              	.LVL301:
 2751              	.L268:
 985:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2752              		.loc 1 985 4 view .LVU995
 985:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2753              		.loc 1 985 10 is_stmt 0 view .LVU996
 2754 00bc D0F82012 		ldr	r1, [r0, #544]
 2755              	.LVL302:
 985:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 2756              		.loc 1 985 10 view .LVU997
 2757 00c0 01EBD611 		add	r1, r1, r6, lsr #7
 2758 00c4 FFF7FEFF 		bl	move_window
 2759              	.LVL303:
 986:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 2760              		.loc 1 986 4 is_stmt 1 view .LVU998
 986:source\fatfs/ff.c **** 			p = &fs->win.d8[clst * 4 % SS(fs)];
 2761              		.loc 1 986 7 is_stmt 0 view .LVU999
 2762 00c8 0028     		cmp	r0, #0
 2763 00ca DCD1     		bne	.L266
 987:source\fatfs/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 2764              		.loc 1 987 4 is_stmt 1 view .LVU1000
 987:source\fatfs/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 2765              		.loc 1 987 25 is_stmt 0 view .LVU1001
 2766 00cc B600     		lsls	r6, r6, #2
 2767              	.LVL304:
 987:source\fatfs/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 2768              		.loc 1 987 29 view .LVU1002
 2769 00ce 06F4FE76 		and	r6, r6, #508
 987:source\fatfs/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 2770              		.loc 1 987 6 view .LVU1003
 2771 00d2 A219     		adds	r2, r4, r6
 2772              	.LVL305:
 988:source\fatfs/ff.c **** 			ST_DWORD(p, val);
 2773              		.loc 1 988 4 is_stmt 1 view .LVU1004
 988:source\fatfs/ff.c **** 			ST_DWORD(p, val);
 2774              		.loc 1 988 11 is_stmt 0 view .LVU1005
 2775 00d4 D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 2776 00d6 1B06     		lsls	r3, r3, #24
 988:source\fatfs/ff.c **** 			ST_DWORD(p, val);
 2777              		.loc 1 988 23 view .LVU1006
 2778 00d8 03F07043 		and	r3, r3, #-268435456
 988:source\fatfs/ff.c **** 			ST_DWORD(p, val);
 2779              		.loc 1 988 8 view .LVU1007
 2780 00dc 2B43     		orrs	r3, r3, r5
 2781              	.LVL306:
 989:source\fatfs/ff.c **** 			fs->wflag = 1;
 2782              		.loc 1 989 4 is_stmt 1 view .LVU1008
 2783 00de C3F30721 		ubfx	r1, r3, #8, #8
 2784 00e2 A355     		strb	r3, [r4, r6]
 989:source\fatfs/ff.c **** 			fs->wflag = 1;
 2785              		.loc 1 989 4 view .LVU1009
 2786 00e4 5170     		strb	r1, [r2, #1]
 989:source\fatfs/ff.c **** 			fs->wflag = 1;
 2787              		.loc 1 989 4 view .LVU1010
 2788 00e6 190C     		lsrs	r1, r3, #16
 2789 00e8 1B0E     		lsrs	r3, r3, #24
 2790              	.LVL307:
 989:source\fatfs/ff.c **** 			fs->wflag = 1;
 2791              		.loc 1 989 4 is_stmt 0 view .LVU1011
 2792 00ea 9170     		strb	r1, [r2, #2]
 989:source\fatfs/ff.c **** 			fs->wflag = 1;
 2793              		.loc 1 989 4 is_stmt 1 view .LVU1012
 2794 00ec D370     		strb	r3, [r2, #3]
 2795              	.LVL308:
 990:source\fatfs/ff.c **** 			break;
 2796              		.loc 1 990 4 view .LVU1013
 991:source\fatfs/ff.c **** 
 2797              		.loc 1 991 4 view .LVU1014
 2798 00ee C6E7     		b	.L273
 2799              	.LVL309:
 2800              	.L276:
 991:source\fatfs/ff.c **** 
 2801              		.loc 1 991 4 is_stmt 0 view .LVU1015
 2802              	.LBE26:
 2803              	.LBE27:
 958:source\fatfs/ff.c **** 
 2804              		.loc 1 958 7 view .LVU1016
 2805 00f0 0220     		movs	r0, #2
 2806              	.LVL310:
 958:source\fatfs/ff.c **** 
 2807              		.loc 1 958 7 view .LVU1017
 2808 00f2 C8E7     		b	.L266
 2809              		.cfi_endproc
 2810              	.LFE137:
 2812              		.section	.text.create_chain,"ax",%progbits
 2813              		.align	1
 2814              		.syntax unified
 2815              		.thumb
 2816              		.thumb_func
 2818              	create_chain:
 2819              	.LVL311:
 2820              	.LFB139:
1067:source\fatfs/ff.c **** 	DWORD cs, ncl, scl;
 2821              		.loc 1 1067 1 is_stmt 1 view -0
 2822              		.cfi_startproc
 2823              		@ args = 0, pretend = 0, frame = 0
 2824              		@ frame_needed = 0, uses_anonymous_args = 0
1068:source\fatfs/ff.c **** 	FRESULT res;
 2825              		.loc 1 1068 2 view .LVU1019
1069:source\fatfs/ff.c **** 
 2826              		.loc 1 1069 2 view .LVU1020
1072:source\fatfs/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 2827              		.loc 1 1072 2 view .LVU1021
1067:source\fatfs/ff.c **** 	DWORD cs, ncl, scl;
 2828              		.loc 1 1067 1 is_stmt 0 view .LVU1022
 2829 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2830              		.cfi_def_cfa_offset 24
 2831              		.cfi_offset 3, -24
 2832              		.cfi_offset 4, -20
 2833              		.cfi_offset 5, -16
 2834              		.cfi_offset 6, -12
 2835              		.cfi_offset 7, -8
 2836              		.cfi_offset 14, -4
1067:source\fatfs/ff.c **** 	DWORD cs, ncl, scl;
 2837              		.loc 1 1067 1 view .LVU1023
 2838 0002 0546     		mov	r5, r0
1072:source\fatfs/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 2839              		.loc 1 1072 5 view .LVU1024
 2840 0004 0F46     		mov	r7, r1
 2841 0006 89B9     		cbnz	r1, .L278
1073:source\fatfs/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 2842              		.loc 1 1073 3 is_stmt 1 view .LVU1025
1073:source\fatfs/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 2843              		.loc 1 1073 7 is_stmt 0 view .LVU1026
 2844 0008 D0F80C62 		ldr	r6, [r0, #524]
 2845              	.LVL312:
1074:source\fatfs/ff.c **** 	}
 2846              		.loc 1 1074 3 is_stmt 1 view .LVU1027
1074:source\fatfs/ff.c **** 	}
 2847              		.loc 1 1074 6 is_stmt 0 view .LVU1028
 2848 000c F6B1     		cbz	r6, .L293
1074:source\fatfs/ff.c **** 	}
 2849              		.loc 1 1074 12 discriminator 2 view .LVU1029
 2850 000e D0F81432 		ldr	r3, [r0, #532]
1074:source\fatfs/ff.c **** 	}
 2851              		.loc 1 1074 40 discriminator 2 view .LVU1030
 2852 0012 B342     		cmp	r3, r6
 2853 0014 98BF     		it	ls
 2854 0016 0126     		movls	r6, #1
 2855              	.LVL313:
 2856              	.L279:
1084:source\fatfs/ff.c **** 	for (;;) {
 2857              		.loc 1 1084 2 is_stmt 1 view .LVU1031
1074:source\fatfs/ff.c **** 	}
 2858              		.loc 1 1074 40 is_stmt 0 view .LVU1032
 2859 0018 3446     		mov	r4, r6
 2860              	.LVL314:
 2861              	.L287:
1085:source\fatfs/ff.c **** 		ncl++;							/* Next cluster */
 2862              		.loc 1 1085 2 is_stmt 1 view .LVU1033
1086:source\fatfs/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 2863              		.loc 1 1086 3 view .LVU1034
1087:source\fatfs/ff.c **** 			ncl = 2;
 2864              		.loc 1 1087 6 is_stmt 0 view .LVU1035
 2865 001a D5F81432 		ldr	r3, [r5, #532]
1086:source\fatfs/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 2866              		.loc 1 1086 6 view .LVU1036
 2867 001e 0134     		adds	r4, r4, #1
 2868              	.LVL315:
1087:source\fatfs/ff.c **** 			ncl = 2;
 2869              		.loc 1 1087 3 is_stmt 1 view .LVU1037
1087:source\fatfs/ff.c **** 			ncl = 2;
 2870              		.loc 1 1087 6 is_stmt 0 view .LVU1038
 2871 0020 A342     		cmp	r3, r4
 2872 0022 16D8     		bhi	.L283
1088:source\fatfs/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 2873              		.loc 1 1088 4 is_stmt 1 view .LVU1039
 2874              	.LVL316:
1089:source\fatfs/ff.c **** 		}
 2875              		.loc 1 1089 4 view .LVU1040
1089:source\fatfs/ff.c **** 		}
 2876              		.loc 1 1089 7 is_stmt 0 view .LVU1041
 2877 0024 012E     		cmp	r6, #1
 2878 0026 13D1     		bne	.L294
 2879              	.LVL317:
 2880              	.L286:
1089:source\fatfs/ff.c **** 		}
 2881              		.loc 1 1089 26 view .LVU1042
 2882 0028 0024     		movs	r4, #0
 2883 002a 05E0     		b	.L277
 2884              	.LVL318:
 2885              	.L278:
1077:source\fatfs/ff.c **** 		if (cs < 2) return 1;			/* Invalid value */
 2886              		.loc 1 1077 3 is_stmt 1 view .LVU1043
1077:source\fatfs/ff.c **** 		if (cs < 2) return 1;			/* Invalid value */
 2887              		.loc 1 1077 8 is_stmt 0 view .LVU1044
 2888 002c FFF7FEFF 		bl	get_fat
 2889              	.LVL319:
1078:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 2890              		.loc 1 1078 6 view .LVU1045
 2891 0030 0128     		cmp	r0, #1
1077:source\fatfs/ff.c **** 		if (cs < 2) return 1;			/* Invalid value */
 2892              		.loc 1 1077 8 view .LVU1046
 2893 0032 0446     		mov	r4, r0
 2894              	.LVL320:
1078:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 2895              		.loc 1 1078 3 is_stmt 1 view .LVU1047
1078:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 2896              		.loc 1 1078 6 is_stmt 0 view .LVU1048
 2897 0034 02D8     		bhi	.L280
 2898              	.LVL321:
 2899              	.L285:
1078:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 2900              		.loc 1 1078 22 view .LVU1049
 2901 0036 0124     		movs	r4, #1
 2902              	.L277:
1113:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
 2903              		.loc 1 1113 1 view .LVU1050
 2904 0038 2046     		mov	r0, r4
 2905 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2906              	.LVL322:
 2907              	.L280:
1079:source\fatfs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2908              		.loc 1 1079 3 is_stmt 1 view .LVU1051
1079:source\fatfs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2909              		.loc 1 1079 6 is_stmt 0 view .LVU1052
 2910 003c 601C     		adds	r0, r4, #1
 2911              	.LVL323:
1079:source\fatfs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2912              		.loc 1 1079 6 view .LVU1053
 2913 003e 35D0     		beq	.L282
1080:source\fatfs/ff.c **** 		scl = clst;
 2914              		.loc 1 1080 3 is_stmt 1 view .LVU1054
1080:source\fatfs/ff.c **** 		scl = clst;
 2915              		.loc 1 1080 6 is_stmt 0 view .LVU1055
 2916 0040 D5F81432 		ldr	r3, [r5, #532]
 2917 0044 A342     		cmp	r3, r4
 2918 0046 F7D8     		bhi	.L277
 2919 0048 3E46     		mov	r6, r7
 2920 004a E5E7     		b	.L279
 2921              	.LVL324:
 2922              	.L293:
1074:source\fatfs/ff.c **** 	}
 2923              		.loc 1 1074 40 view .LVU1056
 2924 004c 0126     		movs	r6, #1
 2925              	.LVL325:
1074:source\fatfs/ff.c **** 	}
 2926              		.loc 1 1074 40 view .LVU1057
 2927 004e E3E7     		b	.L279
 2928              	.LVL326:
 2929              	.L294:
1088:source\fatfs/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 2930              		.loc 1 1088 8 view .LVU1058
 2931 0050 0224     		movs	r4, #2
 2932              	.LVL327:
 2933              	.L283:
1091:source\fatfs/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 2934              		.loc 1 1091 3 is_stmt 1 view .LVU1059
1091:source\fatfs/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 2935              		.loc 1 1091 8 is_stmt 0 view .LVU1060
 2936 0052 2146     		mov	r1, r4
 2937 0054 2846     		mov	r0, r5
 2938 0056 FFF7FEFF 		bl	get_fat
 2939              	.LVL328:
1092:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 2940              		.loc 1 1092 3 is_stmt 1 view .LVU1061
1092:source\fatfs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 2941              		.loc 1 1092 6 is_stmt 0 view .LVU1062
 2942 005a 30B1     		cbz	r0, .L284
1093:source\fatfs/ff.c **** 			return cs;
 2943              		.loc 1 1093 3 is_stmt 1 view .LVU1063
1093:source\fatfs/ff.c **** 			return cs;
 2944              		.loc 1 1093 6 is_stmt 0 view .LVU1064
 2945 005c 411C     		adds	r1, r0, #1
 2946 005e 25D0     		beq	.L282
1093:source\fatfs/ff.c **** 			return cs;
 2947              		.loc 1 1093 24 discriminator 1 view .LVU1065
 2948 0060 0128     		cmp	r0, #1
 2949 0062 E8D0     		beq	.L285
1095:source\fatfs/ff.c **** 	}
 2950              		.loc 1 1095 3 is_stmt 1 view .LVU1066
1095:source\fatfs/ff.c **** 	}
 2951              		.loc 1 1095 6 is_stmt 0 view .LVU1067
 2952 0064 B442     		cmp	r4, r6
 2953 0066 D8D1     		bne	.L287
 2954 0068 DEE7     		b	.L286
 2955              	.L284:
1098:source\fatfs/ff.c **** 	if (res == FR_OK && clst != 0) {
 2956              		.loc 1 1098 2 is_stmt 1 view .LVU1068
1098:source\fatfs/ff.c **** 	if (res == FR_OK && clst != 0) {
 2957              		.loc 1 1098 8 is_stmt 0 view .LVU1069
 2958 006a 6FF07042 		mvn	r2, #-268435456
 2959 006e 2146     		mov	r1, r4
 2960 0070 2846     		mov	r0, r5
 2961              	.LVL329:
1098:source\fatfs/ff.c **** 	if (res == FR_OK && clst != 0) {
 2962              		.loc 1 1098 8 view .LVU1070
 2963 0072 FFF7FEFF 		bl	put_fat
 2964              	.LVL330:
1099:source\fatfs/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 2965              		.loc 1 1099 2 is_stmt 1 view .LVU1071
1099:source\fatfs/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 2966              		.loc 1 1099 5 is_stmt 0 view .LVU1072
 2967 0076 B8B9     		cbnz	r0, .L288
1099:source\fatfs/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 2968              		.loc 1 1099 19 discriminator 1 view .LVU1073
 2969 0078 7FB9     		cbnz	r7, .L289
 2970              	.L292:
 2971              	.LVL331:
1103:source\fatfs/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 2972              		.loc 1 1103 3 is_stmt 1 view .LVU1074
1104:source\fatfs/ff.c **** 			fs->free_clust--;
 2973              		.loc 1 1104 9 is_stmt 0 view .LVU1075
 2974 007a D5F81032 		ldr	r3, [r5, #528]
1103:source\fatfs/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 2975              		.loc 1 1103 18 view .LVU1076
 2976 007e C5F80C42 		str	r4, [r5, #524]
1104:source\fatfs/ff.c **** 			fs->free_clust--;
 2977              		.loc 1 1104 3 is_stmt 1 view .LVU1077
1104:source\fatfs/ff.c **** 			fs->free_clust--;
 2978              		.loc 1 1104 6 is_stmt 0 view .LVU1078
 2979 0082 5A1C     		adds	r2, r3, #1
 2980 0084 D8D0     		beq	.L277
1105:source\fatfs/ff.c **** 			fs->fsi_flag |= 1;
 2981              		.loc 1 1105 4 is_stmt 1 view .LVU1079
1105:source\fatfs/ff.c **** 			fs->fsi_flag |= 1;
 2982              		.loc 1 1105 18 is_stmt 0 view .LVU1080
 2983 0086 013B     		subs	r3, r3, #1
 2984 0088 C5F81032 		str	r3, [r5, #528]
1106:source\fatfs/ff.c **** 		}
 2985              		.loc 1 1106 4 is_stmt 1 view .LVU1081
1106:source\fatfs/ff.c **** 		}
 2986              		.loc 1 1106 17 is_stmt 0 view .LVU1082
 2987 008c 95F80532 		ldrb	r3, [r5, #517]	@ zero_extendqisi2
 2988 0090 43F00103 		orr	r3, r3, #1
 2989 0094 85F80532 		strb	r3, [r5, #517]
 2990 0098 CEE7     		b	.L277
 2991              	.LVL332:
 2992              	.L289:
1100:source\fatfs/ff.c **** 	}
 2993              		.loc 1 1100 3 is_stmt 1 view .LVU1083
1100:source\fatfs/ff.c **** 	}
 2994              		.loc 1 1100 9 is_stmt 0 view .LVU1084
 2995 009a 2246     		mov	r2, r4
 2996 009c 3946     		mov	r1, r7
 2997 009e 2846     		mov	r0, r5
 2998              	.LVL333:
1100:source\fatfs/ff.c **** 	}
 2999              		.loc 1 1100 9 view .LVU1085
 3000 00a0 FFF7FEFF 		bl	put_fat
 3001              	.LVL334:
1102:source\fatfs/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
 3002              		.loc 1 1102 2 is_stmt 1 view .LVU1086
1102:source\fatfs/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
 3003              		.loc 1 1102 5 is_stmt 0 view .LVU1087
 3004 00a4 0028     		cmp	r0, #0
 3005 00a6 E8D0     		beq	.L292
 3006              	.L288:
 3007              	.LVL335:
1109:source\fatfs/ff.c **** 	}
 3008              		.loc 1 1109 3 is_stmt 1 view .LVU1088
1109:source\fatfs/ff.c **** 	}
 3009              		.loc 1 1109 43 is_stmt 0 view .LVU1089
 3010 00a8 0128     		cmp	r0, #1
 3011 00aa C4D1     		bne	.L285
 3012              	.LVL336:
 3013              	.L282:
1079:source\fatfs/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 3014              		.loc 1 1079 32 view .LVU1090
 3015 00ac 4FF0FF34 		mov	r4, #-1
 3016 00b0 C2E7     		b	.L277
 3017              		.cfi_endproc
 3018              	.LFE139:
 3020              		.section	.text.dir_next,"ax",%progbits
 3021              		.align	1
 3022              		.syntax unified
 3023              		.thumb
 3024              		.thumb_func
 3026              	dir_next:
 3027              	.LVL337:
 3028              	.LFB142:
1205:source\fatfs/ff.c **** 	DWORD clst;
 3029              		.loc 1 1205 1 is_stmt 1 view -0
 3030              		.cfi_startproc
 3031              		@ args = 0, pretend = 0, frame = 0
 3032              		@ frame_needed = 0, uses_anonymous_args = 0
1206:source\fatfs/ff.c **** 	UINT i;
 3033              		.loc 1 1206 2 view .LVU1092
1207:source\fatfs/ff.c **** #if !_FS_READONLY
 3034              		.loc 1 1207 2 view .LVU1093
1209:source\fatfs/ff.c **** #endif
 3035              		.loc 1 1209 2 view .LVU1094
1213:source\fatfs/ff.c **** 	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 3036              		.loc 1 1213 2 view .LVU1095
1205:source\fatfs/ff.c **** 	DWORD clst;
 3037              		.loc 1 1205 1 is_stmt 0 view .LVU1096
 3038 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3039              		.cfi_def_cfa_offset 32
 3040              		.cfi_offset 3, -32
 3041              		.cfi_offset 4, -28
 3042              		.cfi_offset 5, -24
 3043              		.cfi_offset 6, -20
 3044              		.cfi_offset 7, -16
 3045              		.cfi_offset 8, -12
 3046              		.cfi_offset 9, -8
 3047              		.cfi_offset 14, -4
1213:source\fatfs/ff.c **** 	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 3048              		.loc 1 1213 8 view .LVU1097
 3049 0004 B0F80662 		ldrh	r6, [r0, #518]
1213:source\fatfs/ff.c **** 	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 3050              		.loc 1 1213 16 view .LVU1098
 3051 0008 0136     		adds	r6, r6, #1
 3052              	.LVL338:
1214:source\fatfs/ff.c **** 		return FR_NO_FILE;
 3053              		.loc 1 1214 2 is_stmt 1 view .LVU1099
1214:source\fatfs/ff.c **** 		return FR_NO_FILE;
 3054              		.loc 1 1214 5 is_stmt 0 view .LVU1100
 3055 000a B3B2     		uxth	r3, r6
1205:source\fatfs/ff.c **** 	DWORD clst;
 3056              		.loc 1 1205 1 view .LVU1101
 3057 000c 0446     		mov	r4, r0
 3058 000e 8946     		mov	r9, r1
1214:source\fatfs/ff.c **** 		return FR_NO_FILE;
 3059              		.loc 1 1214 5 view .LVU1102
 3060 0010 13B9     		cbnz	r3, .L308
 3061              	.LVL339:
 3062              	.L310:
1215:source\fatfs/ff.c **** 
 3063              		.loc 1 1215 10 view .LVU1103
 3064 0012 0420     		movs	r0, #4
 3065              	.LVL340:
 3066              	.L309:
1261:source\fatfs/ff.c **** 
 3067              		.loc 1 1261 1 view .LVU1104
 3068 0014 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3069              	.LVL341:
 3070              	.L308:
1214:source\fatfs/ff.c **** 		return FR_NO_FILE;
 3071              		.loc 1 1214 26 discriminator 1 view .LVU1105
 3072 0018 D0F81032 		ldr	r3, [r0, #528]
1214:source\fatfs/ff.c **** 		return FR_NO_FILE;
 3073              		.loc 1 1214 20 discriminator 1 view .LVU1106
 3074 001c 002B     		cmp	r3, #0
 3075 001e F8D0     		beq	.L310
1217:source\fatfs/ff.c **** 		dp->sect++;					/* Next sector */
 3076              		.loc 1 1217 2 is_stmt 1 view .LVU1107
1217:source\fatfs/ff.c **** 		dp->sect++;					/* Next sector */
 3077              		.loc 1 1217 5 is_stmt 0 view .LVU1108
 3078 0020 16F00F08 		ands	r8, r6, #15
1221:source\fatfs/ff.c **** 				return FR_NO_FILE;
 3079              		.loc 1 1221 15 view .LVU1109
 3080 0024 D0F80002 		ldr	r0, [r0, #512]
 3081              	.LVL342:
1217:source\fatfs/ff.c **** 		dp->sect++;					/* Next sector */
 3082              		.loc 1 1217 5 view .LVU1110
 3083 0028 09D1     		bne	.L312
1218:source\fatfs/ff.c **** 
 3084              		.loc 1 1218 3 is_stmt 1 view .LVU1111
1220:source\fatfs/ff.c **** 			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 3085              		.loc 1 1220 10 is_stmt 0 view .LVU1112
 3086 002a D4F80C12 		ldr	r1, [r4, #524]
 3087              	.LVL343:
1218:source\fatfs/ff.c **** 
 3088              		.loc 1 1218 11 view .LVU1113
 3089 002e 0133     		adds	r3, r3, #1
 3090 0030 C4F81032 		str	r3, [r4, #528]
1220:source\fatfs/ff.c **** 			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 3091              		.loc 1 1220 3 is_stmt 1 view .LVU1114
1220:source\fatfs/ff.c **** 			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 3092              		.loc 1 1220 6 is_stmt 0 view .LVU1115
 3093 0034 69B9     		cbnz	r1, .L313
1221:source\fatfs/ff.c **** 				return FR_NO_FILE;
 3094              		.loc 1 1221 4 is_stmt 1 view .LVU1116
1221:source\fatfs/ff.c **** 				return FR_NO_FILE;
 3095              		.loc 1 1221 19 is_stmt 0 view .LVU1117
 3096 0036 B0F80832 		ldrh	r3, [r0, #520]
1221:source\fatfs/ff.c **** 				return FR_NO_FILE;
 3097              		.loc 1 1221 7 view .LVU1118
 3098 003a B342     		cmp	r3, r6
 3099 003c E9D9     		bls	.L310
 3100              	.LVL344:
 3101              	.L312:
1257:source\fatfs/ff.c **** 	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window 
 3102              		.loc 1 1257 2 is_stmt 1 view .LVU1119
1258:source\fatfs/ff.c **** 
 3103              		.loc 1 1258 27 is_stmt 0 view .LVU1120
 3104 003e D4F80032 		ldr	r3, [r4, #512]
1257:source\fatfs/ff.c **** 	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window 
 3105              		.loc 1 1257 12 view .LVU1121
 3106 0042 A4F80662 		strh	r6, [r4, #518]	@ movhi
1258:source\fatfs/ff.c **** 
 3107              		.loc 1 1258 2 is_stmt 1 view .LVU1122
1258:source\fatfs/ff.c **** 
 3108              		.loc 1 1258 27 is_stmt 0 view .LVU1123
 3109 0046 03EB4813 		add	r3, r3, r8, lsl #5
1258:source\fatfs/ff.c **** 
 3110              		.loc 1 1258 10 view .LVU1124
 3111 004a C4F81432 		str	r3, [r4, #532]
1260:source\fatfs/ff.c **** }
 3112              		.loc 1 1260 2 is_stmt 1 view .LVU1125
1260:source\fatfs/ff.c **** }
 3113              		.loc 1 1260 9 is_stmt 0 view .LVU1126
 3114 004e 0020     		movs	r0, #0
 3115 0050 E0E7     		b	.L309
 3116              	.LVL345:
 3117              	.L313:
1225:source\fatfs/ff.c **** 				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 3118              		.loc 1 1225 4 is_stmt 1 view .LVU1127
1225:source\fatfs/ff.c **** 				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 3119              		.loc 1 1225 47 is_stmt 0 view .LVU1128
 3120 0052 90F80272 		ldrb	r7, [r0, #514]	@ zero_extendqisi2
1225:source\fatfs/ff.c **** 				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 3121              		.loc 1 1225 55 view .LVU1129
 3122 0056 013F     		subs	r7, r7, #1
1225:source\fatfs/ff.c **** 				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 3123              		.loc 1 1225 7 view .LVU1130
 3124 0058 17EA1617 		ands	r7, r7, r6, lsr #4
 3125 005c EFD1     		bne	.L312
1226:source\fatfs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 3126              		.loc 1 1226 5 is_stmt 1 view .LVU1131
1226:source\fatfs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 3127              		.loc 1 1226 12 is_stmt 0 view .LVU1132
 3128 005e FFF7FEFF 		bl	get_fat
 3129              	.LVL346:
1227:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3130              		.loc 1 1227 8 view .LVU1133
 3131 0062 0128     		cmp	r0, #1
1226:source\fatfs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 3132              		.loc 1 1226 12 view .LVU1134
 3133 0064 0546     		mov	r5, r0
 3134              	.LVL347:
1227:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3135              		.loc 1 1227 5 is_stmt 1 view .LVU1135
1227:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3136              		.loc 1 1227 8 is_stmt 0 view .LVU1136
 3137 0066 01D8     		bhi	.L315
 3138              	.L318:
1227:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3139              		.loc 1 1227 27 view .LVU1137
 3140 0068 0220     		movs	r0, #2
 3141              	.LVL348:
1227:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3142              		.loc 1 1227 27 view .LVU1138
 3143 006a D3E7     		b	.L309
 3144              	.LVL349:
 3145              	.L315:
1228:source\fatfs/ff.c **** 				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 3146              		.loc 1 1228 5 is_stmt 1 view .LVU1139
1228:source\fatfs/ff.c **** 				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 3147              		.loc 1 1228 8 is_stmt 0 view .LVU1140
 3148 006c 421C     		adds	r2, r0, #1
 3149 006e 01D1     		bne	.L316
 3150              	.LVL350:
 3151              	.L319:
1228:source\fatfs/ff.c **** 				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 3152              		.loc 1 1228 36 view .LVU1141
 3153 0070 0120     		movs	r0, #1
 3154 0072 CFE7     		b	.L309
 3155              	.LVL351:
 3156              	.L316:
1229:source\fatfs/ff.c **** #if !_FS_READONLY
 3157              		.loc 1 1229 5 is_stmt 1 view .LVU1142
1229:source\fatfs/ff.c **** #if !_FS_READONLY
 3158              		.loc 1 1229 19 is_stmt 0 view .LVU1143
 3159 0074 D4F80002 		ldr	r0, [r4, #512]
 3160              	.LVL352:
1229:source\fatfs/ff.c **** #if !_FS_READONLY
 3161              		.loc 1 1229 8 view .LVU1144
 3162 0078 D0F81432 		ldr	r3, [r0, #532]
 3163 007c AB42     		cmp	r3, r5
 3164 007e 2FD8     		bhi	.L317
1231:source\fatfs/ff.c **** 					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 3165              		.loc 1 1231 6 is_stmt 1 view .LVU1145
1231:source\fatfs/ff.c **** 					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 3166              		.loc 1 1231 9 is_stmt 0 view .LVU1146
 3167 0080 B9F1000F 		cmp	r9, #0
 3168 0084 C5D0     		beq	.L310
1232:source\fatfs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3169              		.loc 1 1232 6 is_stmt 1 view .LVU1147
1232:source\fatfs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3170              		.loc 1 1232 13 is_stmt 0 view .LVU1148
 3171 0086 D4F80C12 		ldr	r1, [r4, #524]
 3172 008a FFF7FEFF 		bl	create_chain
 3173              	.LVL353:
1233:source\fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 3174              		.loc 1 1233 6 is_stmt 1 view .LVU1149
1233:source\fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 3175              		.loc 1 1233 9 is_stmt 0 view .LVU1150
 3176 008e 0546     		mov	r5, r0
 3177 0090 0028     		cmp	r0, #0
 3178 0092 3ED0     		beq	.L322
1234:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3179              		.loc 1 1234 6 is_stmt 1 view .LVU1151
1234:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3180              		.loc 1 1234 9 is_stmt 0 view .LVU1152
 3181 0094 0128     		cmp	r0, #1
 3182 0096 E7D0     		beq	.L318
1235:source\fatfs/ff.c **** 					/* Clean-up stretched table */
 3183              		.loc 1 1235 6 is_stmt 1 view .LVU1153
1235:source\fatfs/ff.c **** 					/* Clean-up stretched table */
 3184              		.loc 1 1235 9 is_stmt 0 view .LVU1154
 3185 0098 431C     		adds	r3, r0, #1
 3186 009a E9D0     		beq	.L319
1237:source\fatfs/ff.c **** 					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 3187              		.loc 1 1237 6 is_stmt 1 view .LVU1155
1237:source\fatfs/ff.c **** 					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 3188              		.loc 1 1237 10 is_stmt 0 view .LVU1156
 3189 009c D4F80002 		ldr	r0, [r4, #512]
 3190              	.LVL354:
1237:source\fatfs/ff.c **** 					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 3191              		.loc 1 1237 10 view .LVU1157
 3192 00a0 FFF7FEFF 		bl	sync_window
 3193              	.LVL355:
1237:source\fatfs/ff.c **** 					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 3194              		.loc 1 1237 9 view .LVU1158
 3195 00a4 0146     		mov	r1, r0
 3196 00a6 0028     		cmp	r0, #0
 3197 00a8 E2D1     		bne	.L319
1238:source\fatfs/ff.c **** 					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 3198              		.loc 1 1238 6 is_stmt 1 view .LVU1159
 3199 00aa D4F80002 		ldr	r0, [r4, #512]
 3200 00ae 4FF40072 		mov	r2, #512
 3201 00b2 FFF7FEFF 		bl	mem_set
 3202              	.LVL356:
1239:source\fatfs/ff.c **** 					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 3203              		.loc 1 1239 6 view .LVU1160
1239:source\fatfs/ff.c **** 					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 3204              		.loc 1 1239 24 is_stmt 0 view .LVU1161
 3205 00b6 D4F80022 		ldr	r2, [r4, #512]
 3206 00ba 2946     		mov	r1, r5
 3207 00bc 1046     		mov	r0, r2
 3208 00be FFF7FEFF 		bl	clust2sect
 3209              	.LVL357:
1241:source\fatfs/ff.c **** 						if (sync_window(dp->fs)) return FR_DISK_ERR;
 3210              		.loc 1 1241 21 view .LVU1162
 3211 00c2 4FF00109 		mov	r9, #1
 3212              	.LVL358:
1239:source\fatfs/ff.c **** 					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 3213              		.loc 1 1239 22 view .LVU1163
 3214 00c6 C2F82C02 		str	r0, [r2, #556]
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3215              		.loc 1 1240 6 is_stmt 1 view .LVU1164
 3216              	.LVL359:
 3217              	.L320:
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3218              		.loc 1 1240 20 discriminator 1 view .LVU1165
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3219              		.loc 1 1240 24 is_stmt 0 discriminator 1 view .LVU1166
 3220 00ca D4F80002 		ldr	r0, [r4, #512]
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3221              		.loc 1 1240 28 discriminator 1 view .LVU1167
 3222 00ce 90F80232 		ldrb	r3, [r0, #514]	@ zero_extendqisi2
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3223              		.loc 1 1240 20 discriminator 1 view .LVU1168
 3224 00d2 BB42     		cmp	r3, r7
 3225 00d4 0ED8     		bhi	.L321
1245:source\fatfs/ff.c **** #else
 3226              		.loc 1 1245 6 is_stmt 1 view .LVU1169
1245:source\fatfs/ff.c **** #else
 3227              		.loc 1 1245 22 is_stmt 0 view .LVU1170
 3228 00d6 D0F82C32 		ldr	r3, [r0, #556]
 3229 00da DB1B     		subs	r3, r3, r7
 3230 00dc C0F82C32 		str	r3, [r0, #556]
 3231              	.LVL360:
 3232              	.L317:
1251:source\fatfs/ff.c **** 				dp->sect = clust2sect(dp->fs, clst);
 3233              		.loc 1 1251 5 is_stmt 1 view .LVU1171
1252:source\fatfs/ff.c **** 			}
 3234              		.loc 1 1252 16 is_stmt 0 view .LVU1172
 3235 00e0 D4F80002 		ldr	r0, [r4, #512]
1251:source\fatfs/ff.c **** 				dp->sect = clust2sect(dp->fs, clst);
 3236              		.loc 1 1251 15 view .LVU1173
 3237 00e4 C4F80C52 		str	r5, [r4, #524]
1252:source\fatfs/ff.c **** 			}
 3238              		.loc 1 1252 5 is_stmt 1 view .LVU1174
1252:source\fatfs/ff.c **** 			}
 3239              		.loc 1 1252 16 is_stmt 0 view .LVU1175
 3240 00e8 2946     		mov	r1, r5
 3241 00ea FFF7FEFF 		bl	clust2sect
 3242              	.LVL361:
1252:source\fatfs/ff.c **** 			}
 3243              		.loc 1 1252 14 view .LVU1176
 3244 00ee C4F81002 		str	r0, [r4, #528]
 3245 00f2 A4E7     		b	.L312
 3246              	.LVL362:
 3247              	.L321:
1241:source\fatfs/ff.c **** 						if (sync_window(dp->fs)) return FR_DISK_ERR;
 3248              		.loc 1 1241 7 is_stmt 1 view .LVU1177
1241:source\fatfs/ff.c **** 						if (sync_window(dp->fs)) return FR_DISK_ERR;
 3249              		.loc 1 1241 21 is_stmt 0 view .LVU1178
 3250 00f4 80F80492 		strb	r9, [r0, #516]
1242:source\fatfs/ff.c **** 						dp->fs->winsect++;
 3251              		.loc 1 1242 7 is_stmt 1 view .LVU1179
1242:source\fatfs/ff.c **** 						dp->fs->winsect++;
 3252              		.loc 1 1242 11 is_stmt 0 view .LVU1180
 3253 00f8 FFF7FEFF 		bl	sync_window
 3254              	.LVL363:
1242:source\fatfs/ff.c **** 						dp->fs->winsect++;
 3255              		.loc 1 1242 10 view .LVU1181
 3256 00fc 0028     		cmp	r0, #0
 3257 00fe B7D1     		bne	.L319
1243:source\fatfs/ff.c **** 					}
 3258              		.loc 1 1243 7 is_stmt 1 discriminator 2 view .LVU1182
1243:source\fatfs/ff.c **** 					}
 3259              		.loc 1 1243 9 is_stmt 0 discriminator 2 view .LVU1183
 3260 0100 D4F80022 		ldr	r2, [r4, #512]
1243:source\fatfs/ff.c **** 					}
 3261              		.loc 1 1243 22 discriminator 2 view .LVU1184
 3262 0104 D2F82C32 		ldr	r3, [r2, #556]
 3263 0108 0133     		adds	r3, r3, #1
 3264 010a C2F82C32 		str	r3, [r2, #556]
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3265              		.loc 1 1240 38 is_stmt 1 discriminator 2 view .LVU1185
 3266 010e 0137     		adds	r7, r7, #1
 3267              	.LVL364:
1240:source\fatfs/ff.c **** 						dp->fs->wflag = 1;
 3268              		.loc 1 1240 38 is_stmt 0 discriminator 2 view .LVU1186
 3269 0110 DBE7     		b	.L320
 3270              	.LVL365:
 3271              	.L322:
1233:source\fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 3272              		.loc 1 1233 28 view .LVU1187
 3273 0112 0720     		movs	r0, #7
 3274              	.LVL366:
1233:source\fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 3275              		.loc 1 1233 28 view .LVU1188
 3276 0114 7EE7     		b	.L309
 3277              		.cfi_endproc
 3278              	.LFE142:
 3280              		.section	.text.dir_find,"ax",%progbits
 3281              		.align	1
 3282              		.syntax unified
 3283              		.thumb
 3284              		.thumb_func
 3286              	dir_find:
 3287              	.LVL367:
 3288              	.LFB151:
1531:source\fatfs/ff.c **** 	FRESULT res;
 3289              		.loc 1 1531 1 is_stmt 1 view -0
 3290              		.cfi_startproc
 3291              		@ args = 0, pretend = 0, frame = 8
 3292              		@ frame_needed = 0, uses_anonymous_args = 0
1532:source\fatfs/ff.c **** 	BYTE c, *dir;
 3293              		.loc 1 1532 2 view .LVU1190
1533:source\fatfs/ff.c **** #if _USE_LFN
 3294              		.loc 1 1533 2 view .LVU1191
1535:source\fatfs/ff.c **** #endif
 3295              		.loc 1 1535 2 view .LVU1192
1538:source\fatfs/ff.c **** 	if (res != FR_OK) return res;
 3296              		.loc 1 1538 2 view .LVU1193
1531:source\fatfs/ff.c **** 	FRESULT res;
 3297              		.loc 1 1531 1 is_stmt 0 view .LVU1194
 3298 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3299              		.cfi_def_cfa_offset 48
 3300              		.cfi_offset 4, -36
 3301              		.cfi_offset 5, -32
 3302              		.cfi_offset 6, -28
 3303              		.cfi_offset 7, -24
 3304              		.cfi_offset 8, -20
 3305              		.cfi_offset 9, -16
 3306              		.cfi_offset 10, -12
 3307              		.cfi_offset 11, -8
 3308              		.cfi_offset 14, -4
1538:source\fatfs/ff.c **** 	if (res != FR_OK) return res;
 3309              		.loc 1 1538 8 view .LVU1195
 3310 0004 0021     		movs	r1, #0
1531:source\fatfs/ff.c **** 	FRESULT res;
 3311              		.loc 1 1531 1 view .LVU1196
 3312 0006 0446     		mov	r4, r0
1538:source\fatfs/ff.c **** 	if (res != FR_OK) return res;
 3313              		.loc 1 1538 8 view .LVU1197
 3314 0008 FFF7FEFF 		bl	dir_sdi
 3315              	.LVL368:
1539:source\fatfs/ff.c **** 
 3316              		.loc 1 1539 2 is_stmt 1 view .LVU1198
1539:source\fatfs/ff.c **** 
 3317              		.loc 1 1539 5 is_stmt 0 view .LVU1199
 3318 000c 0646     		mov	r6, r0
 3319 000e 0028     		cmp	r0, #0
 3320 0010 69D1     		bne	.L336
 3321              	.LVL369:
 3322              	.LBB34:
 3323              	.LBI34:
1528:source\fatfs/ff.c **** 	DIR* dp			/* Pointer to the directory object linked to the file name */
 3324              		.loc 1 1528 9 is_stmt 1 view .LVU1200
 3325              	.LBB35:
1542:source\fatfs/ff.c **** #endif
 3326              		.loc 1 1542 2 view .LVU1201
1542:source\fatfs/ff.c **** #endif
 3327              		.loc 1 1542 20 view .LVU1202
1542:source\fatfs/ff.c **** #endif
 3328              		.loc 1 1542 32 is_stmt 0 view .LVU1203
 3329 0012 4FF6FF7A 		movw	r10, #65535
1542:source\fatfs/ff.c **** #endif
 3330              		.loc 1 1542 12 view .LVU1204
 3331 0016 4FF0FF08 		mov	r8, #255
1542:source\fatfs/ff.c **** #endif
 3332              		.loc 1 1542 32 view .LVU1205
 3333 001a A4F824A2 		strh	r10, [r4, #548]	@ movhi
1542:source\fatfs/ff.c **** #endif
 3334              		.loc 1 1542 6 view .LVU1206
 3335 001e 4746     		mov	r7, r8
 3336              	.LVL370:
 3337              	.L356:
1544:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
 3338              		.loc 1 1544 2 is_stmt 1 view .LVU1207
1545:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 3339              		.loc 1 1545 3 view .LVU1208
1545:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 3340              		.loc 1 1545 9 is_stmt 0 view .LVU1209
 3341 0020 D4F81012 		ldr	r1, [r4, #528]
 3342 0024 D4F80002 		ldr	r0, [r4, #512]
 3343 0028 FFF7FEFF 		bl	move_window
 3344              	.LVL371:
1546:source\fatfs/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
 3345              		.loc 1 1546 3 is_stmt 1 view .LVU1210
1546:source\fatfs/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
 3346              		.loc 1 1546 6 is_stmt 0 view .LVU1211
 3347 002c 0646     		mov	r6, r0
 3348 002e 0028     		cmp	r0, #0
 3349 0030 59D1     		bne	.L336
1547:source\fatfs/ff.c **** 		c = dir[DIR_Name];
 3350              		.loc 1 1547 3 is_stmt 1 view .LVU1212
1547:source\fatfs/ff.c **** 		c = dir[DIR_Name];
 3351              		.loc 1 1547 7 is_stmt 0 view .LVU1213
 3352 0032 D4F81452 		ldr	r5, [r4, #532]
 3353              	.LVL372:
1548:source\fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3354              		.loc 1 1548 3 is_stmt 1 view .LVU1214
1548:source\fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3355              		.loc 1 1548 5 is_stmt 0 view .LVU1215
 3356 0036 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 3357              	.LVL373:
1549:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 3358              		.loc 1 1549 3 is_stmt 1 view .LVU1216
1549:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 3359              		.loc 1 1549 6 is_stmt 0 view .LVU1217
 3360 0038 002A     		cmp	r2, #0
 3361 003a 78D0     		beq	.L357
1551:source\fatfs/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 3362              		.loc 1 1551 3 is_stmt 1 view .LVU1218
1552:source\fatfs/ff.c **** 			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3363              		.loc 1 1552 6 is_stmt 0 view .LVU1219
 3364 003c E52A     		cmp	r2, #229
1551:source\fatfs/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 3365              		.loc 1 1551 10 view .LVU1220
 3366 003e E97A     		ldrb	r1, [r5, #11]	@ zero_extendqisi2
 3367              	.LVL374:
1552:source\fatfs/ff.c **** 			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3368              		.loc 1 1552 3 is_stmt 1 view .LVU1221
1552:source\fatfs/ff.c **** 			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3369              		.loc 1 1552 6 is_stmt 0 view .LVU1222
 3370 0040 05D0     		beq	.L354
1552:source\fatfs/ff.c **** 			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3371              		.loc 1 1552 17 view .LVU1223
 3372 0042 0807     		lsls	r0, r1, #28
 3373              	.LVL375:
1551:source\fatfs/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 3374              		.loc 1 1551 5 view .LVU1224
 3375 0044 01F03F03 		and	r3, r1, #63
1552:source\fatfs/ff.c **** 			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3376              		.loc 1 1552 17 view .LVU1225
 3377 0048 04D5     		bpl	.L338
1552:source\fatfs/ff.c **** 			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3378              		.loc 1 1552 34 view .LVU1226
 3379 004a 0F2B     		cmp	r3, #15
 3380 004c 04D0     		beq	.L339
 3381              	.LVL376:
 3382              	.L354:
1568:source\fatfs/ff.c **** 			}
 3383              		.loc 1 1568 5 is_stmt 1 view .LVU1227
1568:source\fatfs/ff.c **** 			}
 3384              		.loc 1 1568 17 view .LVU1228
1568:source\fatfs/ff.c **** 			}
 3385              		.loc 1 1568 29 is_stmt 0 view .LVU1229
 3386 004e A4F824A2 		strh	r10, [r4, #548]	@ movhi
 3387 0052 4EE0     		b	.L344
 3388              	.LVL377:
 3389              	.L338:
1555:source\fatfs/ff.c **** 				if (dp->lfn) {
 3390              		.loc 1 1555 4 is_stmt 1 view .LVU1230
1555:source\fatfs/ff.c **** 				if (dp->lfn) {
 3391              		.loc 1 1555 7 is_stmt 0 view .LVU1231
 3392 0054 0F2B     		cmp	r3, #15
 3393 0056 53D1     		bne	.L341
 3394              	.L339:
1556:source\fatfs/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
 3395              		.loc 1 1556 5 is_stmt 1 view .LVU1232
1556:source\fatfs/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
 3396              		.loc 1 1556 11 is_stmt 0 view .LVU1233
 3397 0058 D4F820B2 		ldr	fp, [r4, #544]
1556:source\fatfs/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
 3398              		.loc 1 1556 8 view .LVU1234
 3399 005c BBF1000F 		cmp	fp, #0
 3400 0060 3AD0     		beq	.L340
1557:source\fatfs/ff.c **** 						sum = dir[LDIR_Chksum];
 3401              		.loc 1 1557 6 is_stmt 1 view .LVU1235
1557:source\fatfs/ff.c **** 						sum = dir[LDIR_Chksum];
 3402              		.loc 1 1557 9 is_stmt 0 view .LVU1236
 3403 0062 5106     		lsls	r1, r2, #25
 3404              	.LVL378:
1557:source\fatfs/ff.c **** 						sum = dir[LDIR_Chksum];
 3405              		.loc 1 1557 9 view .LVU1237
 3406 0064 43D5     		bpl	.L342
1558:source\fatfs/ff.c **** 						c &= ~LLEF; ord = c;	/* LFN start order */
 3407              		.loc 1 1558 7 is_stmt 1 view .LVU1238
1559:source\fatfs/ff.c **** 						dp->lfn_idx = dp->index;	/* Start index of LFN */
 3408              		.loc 1 1559 9 is_stmt 0 view .LVU1239
 3409 0066 02F0BF07 		and	r7, r2, #191
 3410              	.LVL379:
1560:source\fatfs/ff.c **** 					}
 3411              		.loc 1 1560 19 view .LVU1240
 3412 006a B4F80622 		ldrh	r2, [r4, #518]
 3413              	.LVL380:
1558:source\fatfs/ff.c **** 						c &= ~LLEF; ord = c;	/* LFN start order */
 3414              		.loc 1 1558 11 view .LVU1241
 3415 006e 95F80D80 		ldrb	r8, [r5, #13]	@ zero_extendqisi2
 3416              	.LVL381:
1559:source\fatfs/ff.c **** 						dp->lfn_idx = dp->index;	/* Start index of LFN */
 3417              		.loc 1 1559 7 is_stmt 1 view .LVU1242
1559:source\fatfs/ff.c **** 						dp->lfn_idx = dp->index;	/* Start index of LFN */
 3418              		.loc 1 1559 19 view .LVU1243
1560:source\fatfs/ff.c **** 					}
 3419              		.loc 1 1560 7 view .LVU1244
1560:source\fatfs/ff.c **** 					}
 3420              		.loc 1 1560 19 is_stmt 0 view .LVU1245
 3421 0072 A4F82422 		strh	r2, [r4, #548]	@ movhi
 3422              	.LVL382:
1563:source\fatfs/ff.c **** 				}
 3423              		.loc 1 1563 6 is_stmt 1 view .LVU1246
 3424              	.L343:
1563:source\fatfs/ff.c **** 				}
 3425              		.loc 1 1563 22 is_stmt 0 view .LVU1247
 3426 0076 6A7B     		ldrb	r2, [r5, #13]	@ zero_extendqisi2
 3427 0078 4245     		cmp	r2, r8
 3428 007a 3AD1     		bne	.L344
 3429              	.LVL383:
 3430              	.LBB36:
 3431              	.LBI36:
1347:source\fatfs/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
 3432              		.loc 1 1347 5 is_stmt 1 view .LVU1248
 3433              	.LBB37:
1352:source\fatfs/ff.c **** 	WCHAR wc, uc;
 3434              		.loc 1 1352 2 view .LVU1249
1353:source\fatfs/ff.c **** 
 3435              		.loc 1 1353 2 view .LVU1250
1356:source\fatfs/ff.c **** 	s = 0; wc = 1;
 3436              		.loc 1 1356 2 view .LVU1251
1356:source\fatfs/ff.c **** 	s = 0; wc = 1;
 3437              		.loc 1 1356 11 is_stmt 0 view .LVU1252
 3438 007c 2E78     		ldrb	r6, [r5]	@ zero_extendqisi2
 3439 007e DFF8B890 		ldr	r9, .L382+4
1356:source\fatfs/ff.c **** 	s = 0; wc = 1;
 3440              		.loc 1 1356 22 view .LVU1253
 3441 0082 26F04006 		bic	r6, r6, #64
1356:source\fatfs/ff.c **** 	s = 0; wc = 1;
 3442              		.loc 1 1356 31 view .LVU1254
 3443 0086 013E     		subs	r6, r6, #1
1356:source\fatfs/ff.c **** 	s = 0; wc = 1;
 3444              		.loc 1 1356 36 view .LVU1255
 3445 0088 0D22     		movs	r2, #13
 3446 008a 5643     		muls	r6, r2, r6
 3447              	.LVL384:
1357:source\fatfs/ff.c **** 	do {
 3448              		.loc 1 1357 2 is_stmt 1 view .LVU1256
1357:source\fatfs/ff.c **** 	do {
 3449              		.loc 1 1357 9 view .LVU1257
1357:source\fatfs/ff.c **** 	do {
 3450              		.loc 1 1357 12 is_stmt 0 view .LVU1258
 3451 008c 0123     		movs	r3, #1
 3452              	.LVL385:
 3453              	.L350:
1358:source\fatfs/ff.c **** 		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 3454              		.loc 1 1358 2 is_stmt 1 view .LVU1259
1359:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 3455              		.loc 1 1359 3 view .LVU1260
1359:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 3456              		.loc 1 1359 8 is_stmt 0 view .LVU1261
 3457 008e 19F8012B 		ldrb	r2, [r9], #1	@ zero_extendqisi2
 3458              	.LVL386:
1359:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 3459              		.loc 1 1359 8 view .LVU1262
 3460 0092 A918     		adds	r1, r5, r2
 3461 0094 AA5C     		ldrb	r2, [r5, r2]	@ zero_extendqisi2
 3462 0096 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
1359:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 3463              		.loc 1 1359 6 view .LVU1263
 3464 0098 42EA0120 		orr	r0, r2, r1, lsl #8
 3465              	.LVL387:
1360:source\fatfs/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 3466              		.loc 1 1360 3 is_stmt 1 view .LVU1264
1360:source\fatfs/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 3467              		.loc 1 1360 6 is_stmt 0 view .LVU1265
 3468 009c 5BB3     		cbz	r3, .L346
 3469              	.LVL388:
1361:source\fatfs/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 3470              		.loc 1 1361 4 is_stmt 1 view .LVU1266
1361:source\fatfs/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 3471              		.loc 1 1361 9 is_stmt 0 view .LVU1267
 3472 009e FFF7FEFF 		bl	ff_wtoupper
 3473              	.LVL389:
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3474              		.loc 1 1362 4 is_stmt 1 view .LVU1268
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3475              		.loc 1 1362 7 is_stmt 0 view .LVU1269
 3476 00a2 FE2E     		cmp	r6, #254
 3477 00a4 25D8     		bhi	.L344
 3478 00a6 0190     		str	r0, [sp, #4]
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3479              		.loc 1 1362 51 view .LVU1270
 3480 00a8 711C     		adds	r1, r6, #1
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3481              		.loc 1 1362 31 view .LVU1271
 3482 00aa 3BF81600 		ldrh	r0, [fp, r6, lsl #1]
 3483              	.LVL390:
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3484              		.loc 1 1362 51 view .LVU1272
 3485 00ae 0091     		str	r1, [sp]
 3486              	.LVL391:
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3487              		.loc 1 1362 31 view .LVU1273
 3488 00b0 FFF7FEFF 		bl	ff_wtoupper
 3489              	.LVL392:
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3490              		.loc 1 1362 22 view .LVU1274
 3491 00b4 019A     		ldr	r2, [sp, #4]
 3492 00b6 8242     		cmp	r2, r0
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3493              		.loc 1 1362 31 view .LVU1275
 3494 00b8 0346     		mov	r3, r0
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3495              		.loc 1 1362 22 view .LVU1276
 3496 00ba 1AD1     		bne	.L344
1362:source\fatfs/ff.c **** 				return 0;				/* Not matched */
 3497              		.loc 1 1362 51 view .LVU1277
 3498 00bc 0099     		ldr	r1, [sp]
 3499 00be 0E46     		mov	r6, r1
 3500              	.LVL393:
 3501              	.L349:
1367:source\fatfs/ff.c **** 
 3502              		.loc 1 1367 15 is_stmt 1 view .LVU1278
1367:source\fatfs/ff.c **** 
 3503              		.loc 1 1367 15 is_stmt 0 view .LVU1279
 3504 00c0 1C4A     		ldr	r2, .L382
 3505 00c2 4A45     		cmp	r2, r9
 3506 00c4 E3D1     		bne	.L350
1369:source\fatfs/ff.c **** 		return 0;
 3507              		.loc 1 1369 2 is_stmt 1 view .LVU1280
1369:source\fatfs/ff.c **** 		return 0;
 3508              		.loc 1 1369 5 is_stmt 0 view .LVU1281
 3509 00c6 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 3510 00c8 5206     		lsls	r2, r2, #25
 3511 00ca 03D5     		bpl	.L351
1369:source\fatfs/ff.c **** 		return 0;
 3512              		.loc 1 1369 29 view .LVU1282
 3513 00cc 13B1     		cbz	r3, .L351
1369:source\fatfs/ff.c **** 		return 0;
 3514              		.loc 1 1369 35 view .LVU1283
 3515 00ce 3BF81630 		ldrh	r3, [fp, r6, lsl #1]
 3516 00d2 73B9     		cbnz	r3, .L344
 3517              	.L351:
 3518              	.LVL394:
1369:source\fatfs/ff.c **** 		return 0;
 3519              		.loc 1 1369 35 view .LVU1284
 3520              	.LBE37:
 3521              	.LBE36:
1563:source\fatfs/ff.c **** 				}
 3522              		.loc 1 1563 10 view .LVU1285
 3523 00d4 013F     		subs	r7, r7, #1
 3524              	.LVL395:
1563:source\fatfs/ff.c **** 				}
 3525              		.loc 1 1563 10 view .LVU1286
 3526 00d6 FFB2     		uxtb	r7, r7
 3527              	.LVL396:
 3528              	.L340:
1575:source\fatfs/ff.c **** 	} while (res == FR_OK);
 3529              		.loc 1 1575 3 is_stmt 1 view .LVU1287
1575:source\fatfs/ff.c **** 	} while (res == FR_OK);
 3530              		.loc 1 1575 9 is_stmt 0 view .LVU1288
 3531 00d8 0021     		movs	r1, #0
 3532 00da 2046     		mov	r0, r4
 3533 00dc FFF7FEFF 		bl	dir_next
 3534              	.LVL397:
1576:source\fatfs/ff.c **** 
 3535              		.loc 1 1576 15 is_stmt 1 view .LVU1289
 3536 00e0 0646     		mov	r6, r0
 3537 00e2 0028     		cmp	r0, #0
 3538 00e4 9CD0     		beq	.L356
 3539              	.LVL398:
 3540              	.L336:
1576:source\fatfs/ff.c **** 
 3541              		.loc 1 1576 15 is_stmt 0 view .LVU1290
 3542              	.LBE35:
 3543              	.LBE34:
1579:source\fatfs/ff.c **** 
 3544              		.loc 1 1579 1 view .LVU1291
 3545 00e6 3046     		mov	r0, r6
 3546 00e8 03B0     		add	sp, sp, #12
 3547              		.cfi_remember_state
 3548              		.cfi_def_cfa_offset 36
 3549              		@ sp needed
 3550 00ea BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3551              	.LVL399:
 3552              	.L342:
 3553              		.cfi_restore_state
 3554              	.LBB43:
 3555              	.LBB42:
1563:source\fatfs/ff.c **** 				}
 3556              		.loc 1 1563 6 is_stmt 1 view .LVU1292
1563:source\fatfs/ff.c **** 				}
 3557              		.loc 1 1563 10 is_stmt 0 view .LVU1293
 3558 00ee BA42     		cmp	r2, r7
 3559 00f0 C1D0     		beq	.L343
 3560              	.LVL400:
 3561              	.L344:
1568:source\fatfs/ff.c **** 			}
 3562              		.loc 1 1568 9 view .LVU1294
 3563 00f2 FF27     		movs	r7, #255
 3564 00f4 F0E7     		b	.L340
 3565              	.LVL401:
 3566              	.L346:
 3567              	.LBB39:
 3568              	.LBB38:
1365:source\fatfs/ff.c **** 		}
 3569              		.loc 1 1365 4 is_stmt 1 view .LVU1295
1365:source\fatfs/ff.c **** 		}
 3570              		.loc 1 1365 7 is_stmt 0 view .LVU1296
 3571 00f6 4FF6FF72 		movw	r2, #65535
 3572 00fa 9042     		cmp	r0, r2
 3573 00fc E0D0     		beq	.L349
 3574 00fe F8E7     		b	.L344
 3575              	.LVL402:
 3576              	.L341:
1365:source\fatfs/ff.c **** 		}
 3577              		.loc 1 1365 7 view .LVU1297
 3578              	.LBE38:
 3579              	.LBE39:
1566:source\fatfs/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 3580              		.loc 1 1566 5 is_stmt 1 view .LVU1298
1566:source\fatfs/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 3581              		.loc 1 1566 8 is_stmt 0 view .LVU1299
 3582 0100 27B9     		cbnz	r7, .L353
1566:source\fatfs/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 3583              		.loc 1 1566 24 view .LVU1300
 3584 0102 2846     		mov	r0, r5
 3585 0104 FFF7FEFF 		bl	sum_sfn
 3586              	.LVL403:
1566:source\fatfs/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 3587              		.loc 1 1566 14 view .LVU1301
 3588 0108 4045     		cmp	r0, r8
 3589 010a ECD0     		beq	.L336
 3590              	.L353:
1567:source\fatfs/ff.c **** 				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3591              		.loc 1 1567 5 is_stmt 1 view .LVU1302
1567:source\fatfs/ff.c **** 				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3592              		.loc 1 1567 13 is_stmt 0 view .LVU1303
 3593 010c D4F81832 		ldr	r3, [r4, #536]
 3594 0110 DE7A     		ldrb	r6, [r3, #11]	@ zero_extendqisi2
1567:source\fatfs/ff.c **** 				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 3595              		.loc 1 1567 8 view .LVU1304
 3596 0112 16F00106 		ands	r6, r6, #1
 3597 0116 9AD1     		bne	.L354
 3598 0118 05F10B00 		add	r0, r5, #11
 3599              	.LVL404:
 3600              	.L355:
 3601              	.LBB40:
 3602              	.LBB41:
 610:source\fatfs/ff.c **** 	return r;
 3603              		.loc 1 610 15 is_stmt 1 view .LVU1305
 610:source\fatfs/ff.c **** 	return r;
 3604              		.loc 1 610 15 is_stmt 0 view .LVU1306
 3605 011c A842     		cmp	r0, r5
 3606 011e E2D0     		beq	.L336
 3607              	.LVL405:
 610:source\fatfs/ff.c **** 	return r;
 3608              		.loc 1 610 15 view .LVU1307
 3609 0120 15F8011B 		ldrb	r1, [r5], #1	@ zero_extendqisi2
 3610              	.LVL406:
 610:source\fatfs/ff.c **** 	return r;
 3611              		.loc 1 610 15 view .LVU1308
 3612 0124 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 3613              	.LVL407:
 610:source\fatfs/ff.c **** 	return r;
 3614              		.loc 1 610 15 view .LVU1309
 3615 0128 9142     		cmp	r1, r2
 3616 012a F7D0     		beq	.L355
 3617 012c 8FE7     		b	.L354
 3618              	.LVL408:
 3619              	.L357:
 610:source\fatfs/ff.c **** 	return r;
 3620              		.loc 1 610 15 view .LVU1310
 3621              	.LBE41:
 3622              	.LBE40:
1549:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 3623              		.loc 1 1549 21 view .LVU1311
 3624 012e 0426     		movs	r6, #4
 3625 0130 D9E7     		b	.L336
 3626              	.L383:
 3627 0132 00BF     		.align	2
 3628              	.L382:
 3629 0134 0D000000 		.word	LfnOfs+13
 3630 0138 00000000 		.word	LfnOfs
 3631              	.LBE42:
 3632              	.LBE43:
 3633              		.cfi_endproc
 3634              	.LFE151:
 3636              		.section	.rodata.follow_path.str1.1,"aMS",%progbits,1
 3637              	.LC0:
 3638 0000 222A3A3C 		.ascii	"\"*:<>?|\177\000"
 3638      3E3F7C7F 
 3638      00
 3639              	.LC1:
 3640 0009 2B2C3B3D 		.ascii	"+,;=[]\000"
 3640      5B5D00
 3641              		.section	.text.follow_path,"ax",%progbits
 3642              		.align	1
 3643              		.syntax unified
 3644              		.thumb
 3645              		.thumb_func
 3647              	follow_path:
 3648              	.LVL409:
 3649              	.LFB157:
2129:source\fatfs/ff.c **** 	FRESULT res;
 3650              		.loc 1 2129 1 is_stmt 1 view -0
 3651              		.cfi_startproc
 3652              		@ args = 0, pretend = 0, frame = 8
 3653              		@ frame_needed = 0, uses_anonymous_args = 0
2130:source\fatfs/ff.c **** 	BYTE *dir, ns;
 3654              		.loc 1 2130 2 view .LVU1313
2131:source\fatfs/ff.c **** 
 3655              		.loc 1 2131 2 view .LVU1314
2141:source\fatfs/ff.c **** 		path++;
 3656              		.loc 1 2141 2 view .LVU1315
2129:source\fatfs/ff.c **** 	FRESULT res;
 3657              		.loc 1 2129 1 is_stmt 0 view .LVU1316
 3658 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3659              		.cfi_def_cfa_offset 48
 3660              		.cfi_offset 4, -36
 3661              		.cfi_offset 5, -32
 3662              		.cfi_offset 6, -28
 3663              		.cfi_offset 7, -24
 3664              		.cfi_offset 8, -20
 3665              		.cfi_offset 9, -16
 3666              		.cfi_offset 10, -12
 3667              		.cfi_offset 11, -8
 3668              		.cfi_offset 14, -4
2141:source\fatfs/ff.c **** 		path++;
 3669              		.loc 1 2141 6 view .LVU1317
 3670 0004 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
2141:source\fatfs/ff.c **** 		path++;
 3671              		.loc 1 2141 5 view .LVU1318
 3672 0006 2F2B     		cmp	r3, #47
2129:source\fatfs/ff.c **** 	FRESULT res;
 3673              		.loc 1 2129 1 view .LVU1319
 3674 0008 0746     		mov	r7, r0
 3675 000a 8846     		mov	r8, r1
2141:source\fatfs/ff.c **** 		path++;
 3676              		.loc 1 2141 5 view .LVU1320
 3677 000c 01D0     		beq	.L385
2141:source\fatfs/ff.c **** 		path++;
 3678              		.loc 1 2141 19 discriminator 1 view .LVU1321
 3679 000e 5C2B     		cmp	r3, #92
 3680 0010 01D1     		bne	.L386
 3681              	.L385:
2142:source\fatfs/ff.c **** 	dp->sclust = 0;							/* Always start from the root directory */
 3682              		.loc 1 2142 3 is_stmt 1 view .LVU1322
2142:source\fatfs/ff.c **** 	dp->sclust = 0;							/* Always start from the root directory */
 3683              		.loc 1 2142 7 is_stmt 0 view .LVU1323
 3684 0012 08F10108 		add	r8, r8, #1
 3685              	.LVL410:
 3686              	.L386:
2143:source\fatfs/ff.c **** #endif
 3687              		.loc 1 2143 2 is_stmt 1 view .LVU1324
2143:source\fatfs/ff.c **** #endif
 3688              		.loc 1 2143 13 is_stmt 0 view .LVU1325
 3689 0016 0023     		movs	r3, #0
 3690 0018 C7F80832 		str	r3, [r7, #520]
2146:source\fatfs/ff.c **** 		res = dir_sdi(dp, 0);
 3691              		.loc 1 2146 2 is_stmt 1 view .LVU1326
2146:source\fatfs/ff.c **** 		res = dir_sdi(dp, 0);
 3692              		.loc 1 2146 5 is_stmt 0 view .LVU1327
 3693 001c 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
 3694 0020 1F2B     		cmp	r3, #31
 3695 0022 00F20A81 		bhi	.L475
2147:source\fatfs/ff.c **** 		dp->dir = 0;
 3696              		.loc 1 2147 3 is_stmt 1 view .LVU1328
2147:source\fatfs/ff.c **** 		dp->dir = 0;
 3697              		.loc 1 2147 9 is_stmt 0 view .LVU1329
 3698 0026 0021     		movs	r1, #0
 3699 0028 3846     		mov	r0, r7
 3700              	.LVL411:
2147:source\fatfs/ff.c **** 		dp->dir = 0;
 3701              		.loc 1 2147 9 view .LVU1330
 3702 002a FFF7FEFF 		bl	dir_sdi
 3703              	.LVL412:
2148:source\fatfs/ff.c **** 	} else {								/* Follow path */
 3704              		.loc 1 2148 3 is_stmt 1 view .LVU1331
2148:source\fatfs/ff.c **** 	} else {								/* Follow path */
 3705              		.loc 1 2148 11 is_stmt 0 view .LVU1332
 3706 002e 0023     		movs	r3, #0
 3707 0030 C7F81432 		str	r3, [r7, #532]
 3708              	.LVL413:
 3709              	.L438:
2177:source\fatfs/ff.c **** 
 3710              		.loc 1 2177 1 view .LVU1333
 3711 0034 03B0     		add	sp, sp, #12
 3712              		.cfi_remember_state
 3713              		.cfi_def_cfa_offset 36
 3714              		@ sp needed
 3715 0036 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3716              	.LVL414:
 3717              	.L435:
 3718              		.cfi_restore_state
 3719              	.LBB50:
 3720              	.LBB51:
1929:source\fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 3721              		.loc 1 1929 11 view .LVU1334
 3722 003a C146     		mov	r9, r8
 3723              	.LVL415:
 3724              	.L392:
1943:source\fatfs/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 3725              		.loc 1 1943 3 is_stmt 1 view .LVU1335
1943:source\fatfs/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 3726              		.loc 1 1943 7 is_stmt 0 view .LVU1336
 3727 003c 0121     		movs	r1, #1
 3728 003e 2046     		mov	r0, r4
 3729 0040 FFF7FEFF 		bl	ff_convert
 3730              	.LVL416:
1944:source\fatfs/ff.c **** #endif
 3731              		.loc 1 1944 3 is_stmt 1 view .LVU1337
1944:source\fatfs/ff.c **** #endif
 3732              		.loc 1 1944 6 is_stmt 0 view .LVU1338
 3733 0044 0028     		cmp	r0, #0
 3734 0046 00F02C81 		beq	.L391
1946:source\fatfs/ff.c **** 			return FR_INVALID_NAME;
 3735              		.loc 1 1946 3 is_stmt 1 view .LVU1339
1946:source\fatfs/ff.c **** 			return FR_INVALID_NAME;
 3736              		.loc 1 1946 6 is_stmt 0 view .LVU1340
 3737 004a 7F28     		cmp	r0, #127
 3738 004c 06D8     		bhi	.L393
 3739 004e 9E49     		ldr	r1, .L495
 3740              	.L394:
 3741              	.LVL417:
 3742              	.LBB52:
 3743              	.LBB53:
 617:source\fatfs/ff.c **** 	return *str;
 3744              		.loc 1 617 14 is_stmt 1 view .LVU1341
 617:source\fatfs/ff.c **** 	return *str;
 3745              		.loc 1 617 9 is_stmt 0 view .LVU1342
 3746 0050 11F8012B 		ldrb	r2, [r1], #1	@ zero_extendqisi2
 3747              	.LVL418:
 617:source\fatfs/ff.c **** 	return *str;
 3748              		.loc 1 617 14 view .LVU1343
 3749 0054 12B1     		cbz	r2, .L393
 617:source\fatfs/ff.c **** 	return *str;
 3750              		.loc 1 617 14 view .LVU1344
 3751 0056 8242     		cmp	r2, r0
 3752 0058 FAD1     		bne	.L394
 3753 005a 22E1     		b	.L391
 3754              	.LVL419:
 3755              	.L393:
 617:source\fatfs/ff.c **** 	return *str;
 3756              		.loc 1 617 14 view .LVU1345
 3757              	.LBE53:
 3758              	.LBE52:
1948:source\fatfs/ff.c **** 	}
 3759              		.loc 1 1948 3 is_stmt 1 view .LVU1346
1948:source\fatfs/ff.c **** 	}
 3760              		.loc 1 1948 13 is_stmt 0 view .LVU1347
 3761 005c 2BF81500 		strh	r0, [fp, r5, lsl #1]	@ movhi
1928:source\fatfs/ff.c **** 		w = p[si++];					/* Get a character */
 3762              		.loc 1 1928 2 is_stmt 1 view .LVU1348
 3763 0060 0135     		adds	r5, r5, #1
 3764              	.LVL420:
1929:source\fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 3765              		.loc 1 1929 5 is_stmt 0 view .LVU1349
 3766 0062 F7E0     		b	.L395
 3767              	.LVL421:
 3768              	.L390:
1950:source\fatfs/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 3769              		.loc 1 1950 2 is_stmt 1 view .LVU1350
1950:source\fatfs/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 3770              		.loc 1 1950 10 is_stmt 0 view .LVU1351
 3771 0064 B044     		add	r8, r8, r6
 3772              	.LVL422:
1951:source\fatfs/ff.c **** #if _FS_RPATH
 3773              		.loc 1 1951 2 is_stmt 1 view .LVU1352
1962:source\fatfs/ff.c **** 		w = lfn[di - 1];
 3774              		.loc 1 1962 2 view .LVU1353
 3775 0066 ABF10206 		sub	r6, fp, #2
 3776              	.LVL423:
 3777              	.L396:
1962:source\fatfs/ff.c **** 		w = lfn[di - 1];
 3778              		.loc 1 1962 9 view .LVU1354
 3779 006a 002D     		cmp	r5, #0
 3780 006c 00F01981 		beq	.L391
1963:source\fatfs/ff.c **** 		if (w != ' ' && w != '.') break;
 3781              		.loc 1 1963 3 view .LVU1355
1963:source\fatfs/ff.c **** 		if (w != ' ' && w != '.') break;
 3782              		.loc 1 1963 5 is_stmt 0 view .LVU1356
 3783 0070 36F81520 		ldrh	r2, [r6, r5, lsl #1]
 3784              	.LVL424:
1964:source\fatfs/ff.c **** 		di--;
 3785              		.loc 1 1964 3 is_stmt 1 view .LVU1357
1964:source\fatfs/ff.c **** 		di--;
 3786              		.loc 1 1964 6 is_stmt 0 view .LVU1358
 3787 0074 202A     		cmp	r2, #32
 3788 0076 01D0     		beq	.L397
1964:source\fatfs/ff.c **** 		di--;
 3789              		.loc 1 1964 16 view .LVU1359
 3790 0078 2E2A     		cmp	r2, #46
 3791 007a 01D1     		bne	.L398
 3792              	.L397:
1965:source\fatfs/ff.c **** 	}
 3793              		.loc 1 1965 3 is_stmt 1 view .LVU1360
1965:source\fatfs/ff.c **** 	}
 3794              		.loc 1 1965 5 is_stmt 0 view .LVU1361
 3795 007c 013D     		subs	r5, r5, #1
 3796              	.LVL425:
1965:source\fatfs/ff.c **** 	}
 3797              		.loc 1 1965 5 view .LVU1362
 3798 007e F4E7     		b	.L396
 3799              	.L398:
1967:source\fatfs/ff.c **** 
 3800              		.loc 1 1967 2 is_stmt 1 view .LVU1363
1969:source\fatfs/ff.c **** 
 3801              		.loc 1 1969 2 view .LVU1364
1969:source\fatfs/ff.c **** 
 3802              		.loc 1 1969 10 is_stmt 0 view .LVU1365
 3803 0080 4FF00003 		mov	r3, #0	@ movhi
1972:source\fatfs/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 3804              		.loc 1 1972 2 view .LVU1366
 3805 0084 2021     		movs	r1, #32
1969:source\fatfs/ff.c **** 
 3806              		.loc 1 1969 10 view .LVU1367
 3807 0086 2BF81530 		strh	r3, [fp, r5, lsl #1]	@ movhi
1972:source\fatfs/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 3808              		.loc 1 1972 2 is_stmt 1 view .LVU1368
 3809 008a D7F81802 		ldr	r0, [r7, #536]
 3810 008e 0B22     		movs	r2, #11
 3811              	.LVL426:
1972:source\fatfs/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 3812              		.loc 1 1972 2 is_stmt 0 view .LVU1369
 3813 0090 FFF7FEFF 		bl	mem_set
 3814              	.LVL427:
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 3815              		.loc 1 1973 2 is_stmt 1 view .LVU1370
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 3816              		.loc 1 1973 10 is_stmt 0 view .LVU1371
 3817 0094 0021     		movs	r1, #0
 3818              	.LVL428:
 3819              	.L400:
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 3820              		.loc 1 1973 30 is_stmt 1 view .LVU1372
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 3821              		.loc 1 1973 18 is_stmt 0 view .LVU1373
 3822 0096 3BF81120 		ldrh	r2, [fp, r1, lsl #1]
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 3823              		.loc 1 1973 30 view .LVU1374
 3824 009a 202A     		cmp	r2, #32
 3825 009c 25D0     		beq	.L401
 3826 009e 2E2A     		cmp	r2, #46
 3827 00a0 23D0     		beq	.L401
1951:source\fatfs/ff.c **** #if _FS_RPATH
 3828              		.loc 1 1951 5 view .LVU1375
 3829 00a2 1F2C     		cmp	r4, #31
 3830 00a4 8CBF     		ite	hi
 3831 00a6 0024     		movhi	r4, #0
 3832              	.LVL429:
1951:source\fatfs/ff.c **** #if _FS_RPATH
 3833              		.loc 1 1951 5 view .LVU1376
 3834 00a8 0124     		movls	r4, #1
 3835 00aa A400     		lsls	r4, r4, #2
1974:source\fatfs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 3836              		.loc 1 1974 2 is_stmt 1 view .LVU1377
1974:source\fatfs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 3837              		.loc 1 1974 5 is_stmt 0 view .LVU1378
 3838 00ac 09B1     		cbz	r1, .L403
1974:source\fatfs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 3839              		.loc 1 1974 10 is_stmt 1 view .LVU1379
1974:source\fatfs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 3840              		.loc 1 1974 13 is_stmt 0 view .LVU1380
 3841 00ae 44F00304 		orr	r4, r4, #3
 3842              	.LVL430:
1975:source\fatfs/ff.c **** 
 3843              		.loc 1 1975 12 is_stmt 1 view .LVU1381
 3844              	.L403:
1975:source\fatfs/ff.c **** 
 3845              		.loc 1 1975 12 is_stmt 0 view .LVU1382
 3846 00b2 36F81520 		ldrh	r2, [r6, r5, lsl #1]
 3847 00b6 2E2A     		cmp	r2, #46
 3848 00b8 01D0     		beq	.L404
1975:source\fatfs/ff.c **** 
 3849              		.loc 1 1975 35 is_stmt 1 view .LVU1383
 3850              	.LVL431:
1975:source\fatfs/ff.c **** 
 3851              		.loc 1 1975 12 view .LVU1384
 3852 00ba 013D     		subs	r5, r5, #1
 3853              	.LVL432:
1975:source\fatfs/ff.c **** 
 3854              		.loc 1 1975 12 is_stmt 0 view .LVU1385
 3855 00bc F9D1     		bne	.L403
 3856              	.L404:
2023:source\fatfs/ff.c **** 	}
 3857              		.loc 1 2023 15 view .LVU1386
 3858 00be 4FF00009 		mov	r9, #0
 3859 00c2 4FF0080A 		mov	r10, #8
 3860 00c6 4E46     		mov	r6, r9
 3861              	.LVL433:
 3862              	.L406:
1978:source\fatfs/ff.c **** 		w = lfn[si++];					/* Get an LFN character */
 3863              		.loc 1 1978 2 is_stmt 1 view .LVU1387
1979:source\fatfs/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
 3864              		.loc 1 1979 3 view .LVU1388
1979:source\fatfs/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
 3865              		.loc 1 1979 5 is_stmt 0 view .LVU1389
 3866 00c8 3BF81100 		ldrh	r0, [fp, r1, lsl #1]
1979:source\fatfs/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
 3867              		.loc 1 1979 13 view .LVU1390
 3868 00cc 4A1C     		adds	r2, r1, #1
 3869              	.LVL434:
1980:source\fatfs/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 3870              		.loc 1 1980 3 is_stmt 1 view .LVU1391
1980:source\fatfs/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 3871              		.loc 1 1980 6 is_stmt 0 view .LVU1392
 3872 00ce 0028     		cmp	r0, #0
 3873 00d0 00F09680 		beq	.L407
1981:source\fatfs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
 3874              		.loc 1 1981 3 is_stmt 1 view .LVU1393
1981:source\fatfs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
 3875              		.loc 1 1981 6 is_stmt 0 view .LVU1394
 3876 00d4 2028     		cmp	r0, #32
 3877 00d6 03D0     		beq	.L408
1981:source\fatfs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
 3878              		.loc 1 1981 16 view .LVU1395
 3879 00d8 2E28     		cmp	r0, #46
 3880 00da 08D1     		bne	.L409
1981:source\fatfs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
 3881              		.loc 1 1981 29 view .LVU1396
 3882 00dc AA42     		cmp	r2, r5
 3883 00de 0AD0     		beq	.L410
 3884              	.L408:
1982:source\fatfs/ff.c **** 		}
 3885              		.loc 1 1982 4 is_stmt 1 view .LVU1397
1982:source\fatfs/ff.c **** 		}
 3886              		.loc 1 1982 7 is_stmt 0 view .LVU1398
 3887 00e0 44F00304 		orr	r4, r4, #3
 3888              	.LVL435:
1982:source\fatfs/ff.c **** 		}
 3889              		.loc 1 1982 7 view .LVU1399
 3890 00e4 E4B2     		uxtb	r4, r4
 3891              	.LVL436:
1982:source\fatfs/ff.c **** 		}
 3892              		.loc 1 1982 28 is_stmt 1 view .LVU1400
 3893              	.L411:
2023:source\fatfs/ff.c **** 	}
 3894              		.loc 1 2023 15 is_stmt 0 view .LVU1401
 3895 00e6 1146     		mov	r1, r2
 3896 00e8 EEE7     		b	.L406
 3897              	.LVL437:
 3898              	.L401:
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 3899              		.loc 1 1973 51 is_stmt 1 view .LVU1402
 3900 00ea 0131     		adds	r1, r1, #1
 3901              	.LVL438:
1973:source\fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
 3902              		.loc 1 1973 51 is_stmt 0 view .LVU1403
 3903 00ec D3E7     		b	.L400
 3904              	.LVL439:
 3905              	.L409:
1985:source\fatfs/ff.c **** 			if (ni == 11) {				/* Long extension */
 3906              		.loc 1 1985 3 is_stmt 1 view .LVU1404
1985:source\fatfs/ff.c **** 			if (ni == 11) {				/* Long extension */
 3907              		.loc 1 1985 6 is_stmt 0 view .LVU1405
 3908 00ee D145     		cmp	r9, r10
 3909 00f0 05D2     		bcs	.L412
1985:source\fatfs/ff.c **** 			if (ni == 11) {				/* Long extension */
 3910              		.loc 1 1985 15 view .LVU1406
 3911 00f2 AA42     		cmp	r2, r5
 3912 00f4 4AD1     		bne	.L493
 3913              	.L410:
1986:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
 3914              		.loc 1 1986 4 is_stmt 1 view .LVU1407
1986:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
 3915              		.loc 1 1986 7 is_stmt 0 view .LVU1408
 3916 00f6 BAF10B0F 		cmp	r10, #11
 3917 00fa 3FD1     		bne	.L417
 3918 00fc 02E0     		b	.L432
 3919              	.L412:
1986:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
 3920              		.loc 1 1986 4 is_stmt 1 view .LVU1409
1986:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
 3921              		.loc 1 1986 7 is_stmt 0 view .LVU1410
 3922 00fe BAF10B0F 		cmp	r10, #11
 3923 0102 35D1     		bne	.L414
 3924              	.L432:
1987:source\fatfs/ff.c **** 			}
 3925              		.loc 1 1987 5 is_stmt 1 view .LVU1411
 3926              	.LVL440:
1987:source\fatfs/ff.c **** 			}
 3927              		.loc 1 1987 29 view .LVU1412
2026:source\fatfs/ff.c **** 
 3928              		.loc 1 2026 2 view .LVU1413
2026:source\fatfs/ff.c **** 
 3929              		.loc 1 2026 8 is_stmt 0 view .LVU1414
 3930 0104 D7F81832 		ldr	r3, [r7, #536]
2026:source\fatfs/ff.c **** 
 3931              		.loc 1 2026 5 view .LVU1415
 3932 0108 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3933              	.LVL441:
2026:source\fatfs/ff.c **** 
 3934              		.loc 1 2026 5 view .LVU1416
 3935 010a E52A     		cmp	r2, #229
 3936 010c 01D1     		bne	.L416
2026:source\fatfs/ff.c **** 
 3937              		.loc 1 2026 25 is_stmt 1 view .LVU1417
2026:source\fatfs/ff.c **** 
 3938              		.loc 1 2026 35 is_stmt 0 view .LVU1418
 3939 010e 0522     		movs	r2, #5
 3940 0110 1A70     		strb	r2, [r3]
2028:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 3941              		.loc 1 2028 2 is_stmt 1 view .LVU1419
 3942              	.L416:
1987:source\fatfs/ff.c **** 			}
 3943              		.loc 1 1987 8 is_stmt 0 view .LVU1420
 3944 0112 44F00304 		orr	r4, r4, #3
 3945              	.LVL442:
1987:source\fatfs/ff.c **** 			}
 3946              		.loc 1 1987 8 view .LVU1421
 3947 0116 E4B2     		uxtb	r4, r4
 3948              	.LVL443:
 3949              	.L425:
2029:source\fatfs/ff.c **** 		cf |= NS_LFN;
 3950              		.loc 1 2029 2 is_stmt 1 view .LVU1422
 3951 0118 06F00C03 		and	r3, r6, #12
2029:source\fatfs/ff.c **** 		cf |= NS_LFN;
 3952              		.loc 1 2029 5 is_stmt 0 view .LVU1423
 3953 011c 0C2B     		cmp	r3, #12
 3954 011e 03D0     		beq	.L427
2029:source\fatfs/ff.c **** 		cf |= NS_LFN;
 3955              		.loc 1 2029 25 view .LVU1424
 3956 0120 06F00302 		and	r2, r6, #3
 3957 0124 032A     		cmp	r2, #3
 3958 0126 02D1     		bne	.L428
 3959              	.L427:
2030:source\fatfs/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
 3960              		.loc 1 2030 3 is_stmt 1 view .LVU1425
2030:source\fatfs/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
 3961              		.loc 1 2030 6 is_stmt 0 view .LVU1426
 3962 0128 44F00204 		orr	r4, r4, #2
 3963 012c E4B2     		uxtb	r4, r4
 3964              	.LVL444:
 3965              	.L428:
2031:source\fatfs/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 3966              		.loc 1 2031 2 is_stmt 1 view .LVU1427
2031:source\fatfs/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 3967              		.loc 1 2031 5 is_stmt 0 view .LVU1428
 3968 012e A107     		lsls	r1, r4, #30
 3969              	.LVL445:
2031:source\fatfs/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 3970              		.loc 1 2031 5 view .LVU1429
 3971 0130 0BD4     		bmi	.L429
2032:source\fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 3972              		.loc 1 2032 3 is_stmt 1 view .LVU1430
2032:source\fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 3973              		.loc 1 2032 6 is_stmt 0 view .LVU1431
 3974 0132 06F00306 		and	r6, r6, #3
 3975              	.LVL446:
2032:source\fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 3976              		.loc 1 2032 6 view .LVU1432
 3977 0136 012E     		cmp	r6, #1
2032:source\fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 3978              		.loc 1 2032 27 is_stmt 1 view .LVU1433
2032:source\fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 3979              		.loc 1 2032 30 is_stmt 0 view .LVU1434
 3980 0138 04BF     		itt	eq
 3981 013a 44F01004 		orreq	r4, r4, #16
 3982              	.LVL447:
2032:source\fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 3983              		.loc 1 2032 30 view .LVU1435
 3984 013e E4B2     		uxtbeq	r4, r4
 3985              	.LVL448:
2033:source\fatfs/ff.c **** 	}
 3986              		.loc 1 2033 3 is_stmt 1 view .LVU1436
2033:source\fatfs/ff.c **** 	}
 3987              		.loc 1 2033 6 is_stmt 0 view .LVU1437
 3988 0140 042B     		cmp	r3, #4
2033:source\fatfs/ff.c **** 	}
 3989              		.loc 1 2033 27 is_stmt 1 view .LVU1438
2033:source\fatfs/ff.c **** 	}
 3990              		.loc 1 2033 30 is_stmt 0 view .LVU1439
 3991 0142 04BF     		itt	eq
 3992 0144 44F00804 		orreq	r4, r4, #8
 3993              	.LVL449:
2033:source\fatfs/ff.c **** 	}
 3994              		.loc 1 2033 30 view .LVU1440
 3995 0148 E4B2     		uxtbeq	r4, r4
 3996              	.LVL450:
 3997              	.L429:
2036:source\fatfs/ff.c **** 
 3998              		.loc 1 2036 2 is_stmt 1 view .LVU1441
2036:source\fatfs/ff.c **** 
 3999              		.loc 1 2036 4 is_stmt 0 view .LVU1442
 4000 014a D7F81832 		ldr	r3, [r7, #536]
 4001              	.LBE51:
 4002              	.LBE50:
2153:source\fatfs/ff.c **** 			ns = dp->fn[NSFLAG];
 4003              		.loc 1 2153 10 view .LVU1443
 4004 014e 3846     		mov	r0, r7
 4005              	.LVL451:
 4006              	.LBB62:
 4007              	.LBB58:
2036:source\fatfs/ff.c **** 
 4008              		.loc 1 2036 17 view .LVU1444
 4009 0150 DC72     		strb	r4, [r3, #11]
2038:source\fatfs/ff.c **** 
 4010              		.loc 1 2038 2 is_stmt 1 view .LVU1445
 4011              	.LVL452:
2038:source\fatfs/ff.c **** 
 4012              		.loc 1 2038 2 is_stmt 0 view .LVU1446
 4013              	.LBE58:
 4014              	.LBE62:
2152:source\fatfs/ff.c **** 			res = dir_find(dp);				/* Find an object with the sagment name */
 4015              		.loc 1 2152 4 is_stmt 1 view .LVU1447
2153:source\fatfs/ff.c **** 			ns = dp->fn[NSFLAG];
 4016              		.loc 1 2153 4 view .LVU1448
2153:source\fatfs/ff.c **** 			ns = dp->fn[NSFLAG];
 4017              		.loc 1 2153 10 is_stmt 0 view .LVU1449
 4018 0152 FFF7FEFF 		bl	dir_find
 4019              	.LVL453:
2154:source\fatfs/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 4020              		.loc 1 2154 4 is_stmt 1 view .LVU1450
2154:source\fatfs/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 4021              		.loc 1 2154 7 is_stmt 0 view .LVU1451
 4022 0156 D7F81832 		ldr	r3, [r7, #536]
 4023 015a DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 4024              	.LVL454:
2155:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 4025              		.loc 1 2155 4 is_stmt 1 view .LVU1452
2155:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 4026              		.loc 1 2155 7 is_stmt 0 view .LVU1453
 4027 015c 0028     		cmp	r0, #0
 4028 015e 5CD0     		beq	.L431
2156:source\fatfs/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 4029              		.loc 1 2156 5 is_stmt 1 view .LVU1454
2156:source\fatfs/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 4030              		.loc 1 2156 8 is_stmt 0 view .LVU1455
 4031 0160 0428     		cmp	r0, #4
 4032 0162 7FF467AF 		bne	.L438
2157:source\fatfs/ff.c **** 						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
 4033              		.loc 1 2157 6 is_stmt 1 view .LVU1456
2162:source\fatfs/ff.c **** 					}
 4034              		.loc 1 2162 7 view .LVU1457
2162:source\fatfs/ff.c **** 					}
 4035              		.loc 1 2162 32 is_stmt 0 view .LVU1458
 4036 0166 13F0040F 		tst	r3, #4
 4037 016a 08BF     		it	eq
 4038 016c 0520     		moveq	r0, #5
 4039              	.LVL455:
2162:source\fatfs/ff.c **** 					}
 4040              		.loc 1 2162 32 view .LVU1459
 4041 016e 61E7     		b	.L438
 4042              	.LVL456:
 4043              	.L414:
 4044              	.LBB63:
 4045              	.LBB59:
1989:source\fatfs/ff.c **** 			if (si > di) break;			/* No extension */
 4046              		.loc 1 1989 4 is_stmt 1 view .LVU1460
1989:source\fatfs/ff.c **** 			if (si > di) break;			/* No extension */
 4047              		.loc 1 1989 7 is_stmt 0 view .LVU1461
 4048 0170 AA42     		cmp	r2, r5
 4049 0172 03D0     		beq	.L417
1989:source\fatfs/ff.c **** 			if (si > di) break;			/* No extension */
 4050              		.loc 1 1989 18 is_stmt 1 view .LVU1462
1989:source\fatfs/ff.c **** 			if (si > di) break;			/* No extension */
 4051              		.loc 1 1989 21 is_stmt 0 view .LVU1463
 4052 0174 44F00304 		orr	r4, r4, #3
 4053              	.LVL457:
1989:source\fatfs/ff.c **** 			if (si > di) break;			/* No extension */
 4054              		.loc 1 1989 21 view .LVU1464
 4055 0178 E4B2     		uxtb	r4, r4
 4056              	.LVL458:
1990:source\fatfs/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
 4057              		.loc 1 1990 4 is_stmt 1 view .LVU1465
1990:source\fatfs/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
 4058              		.loc 1 1990 7 is_stmt 0 view .LVU1466
 4059 017a 41D8     		bhi	.L407
 4060              	.L417:
1991:source\fatfs/ff.c **** 			b <<= 2; continue;
 4061              		.loc 1 1991 4 is_stmt 1 view .LVU1467
 4062              	.LVL459:
1991:source\fatfs/ff.c **** 			b <<= 2; continue;
 4063              		.loc 1 1991 13 view .LVU1468
1991:source\fatfs/ff.c **** 			b <<= 2; continue;
 4064              		.loc 1 1991 20 view .LVU1469
1992:source\fatfs/ff.c **** 		}
 4065              		.loc 1 1992 4 view .LVU1470
1992:source\fatfs/ff.c **** 		}
 4066              		.loc 1 1992 6 is_stmt 0 view .LVU1471
 4067 017c B600     		lsls	r6, r6, #2
 4068              	.LVL460:
1992:source\fatfs/ff.c **** 		}
 4069              		.loc 1 1992 6 view .LVU1472
 4070 017e F6B2     		uxtb	r6, r6
 4071              	.LVL461:
1992:source\fatfs/ff.c **** 		}
 4072              		.loc 1 1992 13 is_stmt 1 view .LVU1473
 4073 0180 2A46     		mov	r2, r5
1991:source\fatfs/ff.c **** 			b <<= 2; continue;
 4074              		.loc 1 1991 23 is_stmt 0 view .LVU1474
 4075 0182 4FF00B0A 		mov	r10, #11
1991:source\fatfs/ff.c **** 			b <<= 2; continue;
 4076              		.loc 1 1991 15 view .LVU1475
 4077 0186 4FF00809 		mov	r9, #8
1992:source\fatfs/ff.c **** 		}
 4078              		.loc 1 1992 13 view .LVU1476
 4079 018a ACE7     		b	.L411
 4080              	.LVL462:
 4081              	.L493:
1995:source\fatfs/ff.c **** #ifdef _EXCVT
 4082              		.loc 1 1995 3 is_stmt 1 view .LVU1477
1995:source\fatfs/ff.c **** #ifdef _EXCVT
 4083              		.loc 1 1995 6 is_stmt 0 view .LVU1478
 4084 018c 7F28     		cmp	r0, #127
 4085 018e 32D9     		bls	.L436
 4086 0190 0192     		str	r2, [sp, #4]
2000:source\fatfs/ff.c **** #endif
 4087              		.loc 1 2000 4 is_stmt 1 view .LVU1479
2000:source\fatfs/ff.c **** #endif
 4088              		.loc 1 2000 8 is_stmt 0 view .LVU1480
 4089 0192 FFF7FEFF 		bl	ff_wtoupper
 4090              	.LVL463:
2000:source\fatfs/ff.c **** #endif
 4091              		.loc 1 2000 8 view .LVU1481
 4092 0196 0021     		movs	r1, #0
 4093 0198 FFF7FEFF 		bl	ff_convert
 4094              	.LVL464:
2002:source\fatfs/ff.c **** 		}
 4095              		.loc 1 2002 4 is_stmt 1 view .LVU1482
2002:source\fatfs/ff.c **** 		}
 4096              		.loc 1 2002 7 is_stmt 0 view .LVU1483
 4097 019c 44F0020C 		orr	ip, r4, #2
2005:source\fatfs/ff.c **** 			if (i >= ni - 1) {
 4098              		.loc 1 2005 6 view .LVU1484
 4099 01a0 FF28     		cmp	r0, #255
 4100 01a2 019A     		ldr	r2, [sp, #4]
2002:source\fatfs/ff.c **** 		}
 4101              		.loc 1 2002 7 view .LVU1485
 4102 01a4 5FFA8CFC 		uxtb	ip, ip
 4103              	.LVL465:
2005:source\fatfs/ff.c **** 			if (i >= ni - 1) {
 4104              		.loc 1 2005 3 is_stmt 1 view .LVU1486
2005:source\fatfs/ff.c **** 			if (i >= ni - 1) {
 4105              		.loc 1 2005 6 is_stmt 0 view .LVU1487
 4106 01a8 17D9     		bls	.L419
2006:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 4107              		.loc 1 2006 4 is_stmt 1 view .LVU1488
2006:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 4108              		.loc 1 2006 16 is_stmt 0 view .LVU1489
 4109 01aa 0AF1FF31 		add	r1, r10, #-1
2006:source\fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 4110              		.loc 1 2006 7 view .LVU1490
 4111 01ae 8945     		cmp	r9, r1
 4112 01b0 04D3     		bcc	.L420
2007:source\fatfs/ff.c **** 			}
 4113              		.loc 1 2007 5 is_stmt 1 view .LVU1491
2007:source\fatfs/ff.c **** 			}
 4114              		.loc 1 2007 8 is_stmt 0 view .LVU1492
 4115 01b2 44F00304 		orr	r4, r4, #3
 4116 01b6 E4B2     		uxtb	r4, r4
 4117              	.LVL466:
2007:source\fatfs/ff.c **** 			}
 4118              		.loc 1 2007 29 is_stmt 1 view .LVU1493
2007:source\fatfs/ff.c **** 			}
 4119              		.loc 1 2007 37 view .LVU1494
 4120 01b8 D146     		mov	r9, r10
 4121 01ba 94E7     		b	.L411
 4122              	.LVL467:
 4123              	.L420:
2009:source\fatfs/ff.c **** 		} else {						/* SBC */
 4124              		.loc 1 2009 4 view .LVU1495
2009:source\fatfs/ff.c **** 		} else {						/* SBC */
 4125              		.loc 1 2009 16 is_stmt 0 view .LVU1496
 4126 01bc D7F81812 		ldr	r1, [r7, #536]
2009:source\fatfs/ff.c **** 		} else {						/* SBC */
 4127              		.loc 1 2009 18 view .LVU1497
 4128 01c0 040A     		lsrs	r4, r0, #8
 4129 01c2 01F80940 		strb	r4, [r1, r9]
2009:source\fatfs/ff.c **** 		} else {						/* SBC */
 4130              		.loc 1 2009 12 view .LVU1498
 4131 01c6 09F10109 		add	r9, r9, #1
 4132              	.LVL468:
 4133              	.L421:
2023:source\fatfs/ff.c **** 	}
 4134              		.loc 1 2023 3 is_stmt 1 view .LVU1499
2023:source\fatfs/ff.c **** 	}
 4135              		.loc 1 2023 15 is_stmt 0 view .LVU1500
 4136 01ca D7F81812 		ldr	r1, [r7, #536]
 4137 01ce 6446     		mov	r4, ip
2023:source\fatfs/ff.c **** 	}
 4138              		.loc 1 2023 17 view .LVU1501
 4139 01d0 01F80900 		strb	r0, [r1, r9]
2023:source\fatfs/ff.c **** 	}
 4140              		.loc 1 2023 11 view .LVU1502
 4141 01d4 09F10109 		add	r9, r9, #1
 4142              	.LVL469:
2023:source\fatfs/ff.c **** 	}
 4143              		.loc 1 2023 11 view .LVU1503
 4144 01d8 85E7     		b	.L411
 4145              	.LVL470:
 4146              	.L419:
2011:source\fatfs/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 4147              		.loc 1 2011 4 is_stmt 1 view .LVU1504
2011:source\fatfs/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 4148              		.loc 1 2011 7 is_stmt 0 view .LVU1505
 4149 01da 30B1     		cbz	r0, .L422
 4150              	.LVL471:
 4151              	.L418:
 4152              	.LBB54:
 4153              	.LBI54:
 616:source\fatfs/ff.c **** 	while (*str && *str != chr) str++;
 4154              		.loc 1 616 5 is_stmt 1 view .LVU1506
 4155              	.LBB55:
 617:source\fatfs/ff.c **** 	return *str;
 4156              		.loc 1 617 2 view .LVU1507
 4157 01dc 3B4C     		ldr	r4, .L495+4
 4158              	.LVL472:
 4159              	.L424:
 617:source\fatfs/ff.c **** 	return *str;
 4160              		.loc 1 617 14 view .LVU1508
 617:source\fatfs/ff.c **** 	return *str;
 4161              		.loc 1 617 9 is_stmt 0 view .LVU1509
 4162 01de 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 4163              	.LVL473:
 617:source\fatfs/ff.c **** 	return *str;
 4164              		.loc 1 617 14 view .LVU1510
 4165 01e2 0029     		cmp	r1, #0
 4166 01e4 61D0     		beq	.L423
 617:source\fatfs/ff.c **** 	return *str;
 4167              		.loc 1 617 14 view .LVU1511
 4168 01e6 8842     		cmp	r0, r1
 4169 01e8 F9D1     		bne	.L424
 4170              	.LVL474:
 4171              	.L422:
 617:source\fatfs/ff.c **** 	return *str;
 4172              		.loc 1 617 14 view .LVU1512
 4173              	.LBE55:
 4174              	.LBE54:
2012:source\fatfs/ff.c **** 			} else {
 4175              		.loc 1 2012 5 is_stmt 1 view .LVU1513
2012:source\fatfs/ff.c **** 			} else {
 4176              		.loc 1 2012 14 view .LVU1514
2012:source\fatfs/ff.c **** 			} else {
 4177              		.loc 1 2012 17 is_stmt 0 view .LVU1515
 4178 01ea 4CF0030C 		orr	ip, ip, #3
 4179 01ee 5FFA8CFC 		uxtb	ip, ip
 4180              	.LVL475:
2012:source\fatfs/ff.c **** 			} else {
 4181              		.loc 1 2012 7 view .LVU1516
 4182 01f2 5F20     		movs	r0, #95
2012:source\fatfs/ff.c **** 			} else {
 4183              		.loc 1 2012 17 view .LVU1517
 4184 01f4 E9E7     		b	.L421
 4185              	.LVL476:
 4186              	.L436:
2012:source\fatfs/ff.c **** 			} else {
 4187              		.loc 1 2012 17 view .LVU1518
 4188 01f6 A446     		mov	ip, r4
 4189 01f8 F0E7     		b	.L418
 4190              	.LVL477:
 4191              	.L433:
2015:source\fatfs/ff.c **** 				} else {
 4192              		.loc 1 2015 6 is_stmt 1 view .LVU1519
2015:source\fatfs/ff.c **** 				} else {
 4193              		.loc 1 2015 8 is_stmt 0 view .LVU1520
 4194 01fa 46F00206 		orr	r6, r6, #2
 4195              	.LVL478:
2015:source\fatfs/ff.c **** 				} else {
 4196              		.loc 1 2015 8 view .LVU1521
 4197 01fe E4E7     		b	.L421
 4198              	.LVL479:
 4199              	.L407:
2026:source\fatfs/ff.c **** 
 4200              		.loc 1 2026 2 is_stmt 1 view .LVU1522
2026:source\fatfs/ff.c **** 
 4201              		.loc 1 2026 8 is_stmt 0 view .LVU1523
 4202 0200 D7F81832 		ldr	r3, [r7, #536]
2026:source\fatfs/ff.c **** 
 4203              		.loc 1 2026 5 view .LVU1524
 4204 0204 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4205              	.LVL480:
2026:source\fatfs/ff.c **** 
 4206              		.loc 1 2026 5 view .LVU1525
 4207 0206 E52A     		cmp	r2, #229
2026:source\fatfs/ff.c **** 
 4208              		.loc 1 2026 25 is_stmt 1 view .LVU1526
2026:source\fatfs/ff.c **** 
 4209              		.loc 1 2026 35 is_stmt 0 view .LVU1527
 4210 0208 04BF     		itt	eq
 4211 020a 0522     		moveq	r2, #5
 4212 020c 1A70     		strbeq	r2, [r3]
2028:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 4213              		.loc 1 2028 2 is_stmt 1 view .LVU1528
2028:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 4214              		.loc 1 2028 5 is_stmt 0 view .LVU1529
 4215 020e BAF1080F 		cmp	r10, #8
2028:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 4216              		.loc 1 2028 15 is_stmt 1 view .LVU1530
2028:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 4217              		.loc 1 2028 17 is_stmt 0 view .LVU1531
 4218 0212 04BF     		itt	eq
 4219 0214 B600     		lsleq	r6, r6, #2
 4220              	.LVL481:
2028:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 4221              		.loc 1 2028 17 view .LVU1532
 4222 0216 F6B2     		uxtbeq	r6, r6
 4223              	.LVL482:
2028:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 4224              		.loc 1 2028 17 view .LVU1533
 4225 0218 7EE7     		b	.L425
 4226              	.LVL483:
 4227              	.L431:
2028:source\fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
 4228              		.loc 1 2028 17 view .LVU1534
 4229              	.LBE59:
 4230              	.LBE63:
2167:source\fatfs/ff.c **** 			dir = dp->dir;						/* Follow the sub-directory */
 4231              		.loc 1 2167 4 is_stmt 1 view .LVU1535
2167:source\fatfs/ff.c **** 			dir = dp->dir;						/* Follow the sub-directory */
 4232              		.loc 1 2167 7 is_stmt 0 view .LVU1536
 4233 021a 5A07     		lsls	r2, r3, #29
 4234 021c 3FF50AAF 		bmi	.L438
2168:source\fatfs/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 4235              		.loc 1 2168 4 is_stmt 1 view .LVU1537
2168:source\fatfs/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 4236              		.loc 1 2168 8 is_stmt 0 view .LVU1538
 4237 0220 D7F81412 		ldr	r1, [r7, #532]
 4238              	.LVL484:
2169:source\fatfs/ff.c **** 				res = FR_NO_PATH; break;
 4239              		.loc 1 2169 4 is_stmt 1 view .LVU1539
2169:source\fatfs/ff.c **** 				res = FR_NO_PATH; break;
 4240              		.loc 1 2169 7 is_stmt 0 view .LVU1540
 4241 0224 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 4242              	.LVL485:
2169:source\fatfs/ff.c **** 				res = FR_NO_PATH; break;
 4243              		.loc 1 2169 7 view .LVU1541
 4244 0226 DB06     		lsls	r3, r3, #27
 4245 0228 3DD5     		bpl	.L437
2172:source\fatfs/ff.c **** 		}
 4246              		.loc 1 2172 4 is_stmt 1 view .LVU1542
2172:source\fatfs/ff.c **** 		}
 4247              		.loc 1 2172 17 is_stmt 0 view .LVU1543
 4248 022a D7F80032 		ldr	r3, [r7, #512]
 4249 022e 93F80002 		ldrb	r0, [r3, #512]	@ zero_extendqisi2
 4250              	.LVL486:
2172:source\fatfs/ff.c **** 		}
 4251              		.loc 1 2172 17 view .LVU1544
 4252 0232 FFF7FEFF 		bl	ld_clust.isra.0
 4253              	.LVL487:
2172:source\fatfs/ff.c **** 		}
 4254              		.loc 1 2172 15 view .LVU1545
 4255 0236 C7F80802 		str	r0, [r7, #520]
2150:source\fatfs/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
 4256              		.loc 1 2150 3 is_stmt 1 view .LVU1546
 4257              	.LVL488:
 4258              	.L475:
 4259              	.LBB64:
 4260              	.LBB60:
1925:source\fatfs/ff.c **** 	lfn = dp->lfn;
 4261              		.loc 1 1925 18 is_stmt 0 view .LVU1547
 4262 023a 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
1925:source\fatfs/ff.c **** 	lfn = dp->lfn;
 4263              		.loc 1 1925 28 view .LVU1548
 4264 023e 2F2B     		cmp	r3, #47
 4265 0240 4646     		mov	r6, r8
 4266              	.LVL489:
1925:source\fatfs/ff.c **** 	lfn = dp->lfn;
 4267              		.loc 1 1925 28 is_stmt 1 view .LVU1549
 4268 0242 08F10108 		add	r8, r8, #1
 4269 0246 F8D0     		beq	.L475
 4270 0248 5C2B     		cmp	r3, #92
 4271 024a F6D0     		beq	.L475
1926:source\fatfs/ff.c **** 	si = di = 0;
 4272              		.loc 1 1926 2 view .LVU1550
1926:source\fatfs/ff.c **** 	si = di = 0;
 4273              		.loc 1 1926 6 is_stmt 0 view .LVU1551
 4274 024c 0025     		movs	r5, #0
 4275 024e D7F820B2 		ldr	fp, [r7, #544]
 4276              	.LVL490:
1927:source\fatfs/ff.c **** 	for (;;) {
 4277              		.loc 1 1927 2 is_stmt 1 view .LVU1552
1927:source\fatfs/ff.c **** 	for (;;) {
 4278              		.loc 1 1927 5 is_stmt 0 view .LVU1553
 4279 0252 A946     		mov	r9, r5
 4280              	.LVL491:
 4281              	.L395:
1928:source\fatfs/ff.c **** 		w = p[si++];					/* Get a character */
 4282              		.loc 1 1928 2 is_stmt 1 view .LVU1554
1929:source\fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 4283              		.loc 1 1929 3 view .LVU1555
1929:source\fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 4284              		.loc 1 1929 8 is_stmt 0 view .LVU1556
 4285 0254 16F80940 		ldrb	r4, [r6, r9]	@ zero_extendqisi2
1930:source\fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
 4286              		.loc 1 1930 6 view .LVU1557
 4287 0258 1F2C     		cmp	r4, #31
1929:source\fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 4288              		.loc 1 1929 11 view .LVU1558
 4289 025a 09F10108 		add	r8, r9, #1
 4290              	.LVL492:
1930:source\fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
 4291              		.loc 1 1930 3 is_stmt 1 view .LVU1559
1930:source\fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
 4292              		.loc 1 1930 6 is_stmt 0 view .LVU1560
 4293 025e 7FF601AF 		bls	.L390
1930:source\fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
 4294              		.loc 1 1930 15 view .LVU1561
 4295 0262 2F2C     		cmp	r4, #47
 4296 0264 3FF4FEAE 		beq	.L390
1930:source\fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
 4297              		.loc 1 1930 27 view .LVU1562
 4298 0268 5C2C     		cmp	r4, #92
 4299 026a 3FF4FBAE 		beq	.L390
1931:source\fatfs/ff.c **** 			return FR_INVALID_NAME;
 4300              		.loc 1 1931 3 is_stmt 1 view .LVU1563
1931:source\fatfs/ff.c **** 			return FR_INVALID_NAME;
 4301              		.loc 1 1931 6 is_stmt 0 view .LVU1564
 4302 026e FF2D     		cmp	r5, #255
 4303 0270 17D0     		beq	.L391
1934:source\fatfs/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 4304              		.loc 1 1934 3 is_stmt 1 view .LVU1565
1935:source\fatfs/ff.c **** #if _DF1S
 4305              		.loc 1 1935 3 view .LVU1566
1935:source\fatfs/ff.c **** #if _DF1S
 4306              		.loc 1 1935 7 is_stmt 0 view .LVU1567
 4307 0272 04F17F02 		add	r2, r4, #127
1935:source\fatfs/ff.c **** #if _DF1S
 4308              		.loc 1 1935 6 view .LVU1568
 4309 0276 D2B2     		uxtb	r2, r2
 4310 0278 7D2A     		cmp	r2, #125
 4311 027a 3FF6DEAE 		bhi	.L435
1937:source\fatfs/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
 4312              		.loc 1 1937 4 is_stmt 1 view .LVU1569
1937:source\fatfs/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
 4313              		.loc 1 1937 6 is_stmt 0 view .LVU1570
 4314 027e 16F80820 		ldrb	r2, [r6, r8]	@ zero_extendqisi2
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4315              		.loc 1 1939 7 view .LVU1571
 4316 0282 22F02001 		bic	r1, r2, #32
 4317 0286 4139     		subs	r1, r1, #65
1938:source\fatfs/ff.c **** 			if (!IsDBCS2(b))
 4318              		.loc 1 1938 6 view .LVU1572
 4319 0288 02EB0424 		add	r4, r2, r4, lsl #8
 4320              	.LVL493:
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4321              		.loc 1 1939 7 view .LVU1573
 4322 028c 1929     		cmp	r1, #25
1937:source\fatfs/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
 4323              		.loc 1 1937 18 view .LVU1574
 4324 028e 09F10209 		add	r9, r9, #2
 4325              	.LVL494:
1938:source\fatfs/ff.c **** 			if (!IsDBCS2(b))
 4326              		.loc 1 1938 4 is_stmt 1 view .LVU1575
1938:source\fatfs/ff.c **** 			if (!IsDBCS2(b))
 4327              		.loc 1 1938 6 is_stmt 0 view .LVU1576
 4328 0292 A4B2     		uxth	r4, r4
 4329              	.LVL495:
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4330              		.loc 1 1939 4 is_stmt 1 view .LVU1577
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4331              		.loc 1 1939 7 is_stmt 0 view .LVU1578
 4332 0294 7FF6D2AE 		bls	.L392
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4333              		.loc 1 1939 9 view .LVU1579
 4334 0298 7F32     		adds	r2, r2, #127
 4335              	.LVL496:
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4336              		.loc 1 1939 8 view .LVU1580
 4337 029a D2B2     		uxtb	r2, r2
 4338              	.LVL497:
1939:source\fatfs/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
 4339              		.loc 1 1939 8 view .LVU1581
 4340 029c 7D2A     		cmp	r2, #125
 4341 029e 7FF6CDAE 		bls	.L392
 4342              	.LVL498:
 4343              	.L391:
2012:source\fatfs/ff.c **** 			} else {
 4344              		.loc 1 2012 7 view .LVU1582
 4345 02a2 0620     		movs	r0, #6
 4346 02a4 C6E6     		b	.L438
 4347              	.LVL499:
 4348              	.L437:
2012:source\fatfs/ff.c **** 			} else {
 4349              		.loc 1 2012 7 view .LVU1583
 4350              	.LBE60:
 4351              	.LBE64:
2162:source\fatfs/ff.c **** 					}
 4352              		.loc 1 2162 32 view .LVU1584
 4353 02a6 0520     		movs	r0, #5
 4354              	.LVL500:
2176:source\fatfs/ff.c **** }
 4355              		.loc 1 2176 2 is_stmt 1 view .LVU1585
2176:source\fatfs/ff.c **** }
 4356              		.loc 1 2176 9 is_stmt 0 view .LVU1586
 4357 02a8 C4E6     		b	.L438
 4358              	.LVL501:
 4359              	.L423:
 4360              	.LBB65:
 4361              	.LBB61:
 4362              	.LBB57:
 4363              	.LBB56:
 618:source\fatfs/ff.c **** }
 4364              		.loc 1 618 2 is_stmt 1 view .LVU1587
 618:source\fatfs/ff.c **** }
 4365              		.loc 1 618 2 is_stmt 0 view .LVU1588
 4366              	.LBE56:
 4367              	.LBE57:
2014:source\fatfs/ff.c **** 					b |= 2;
 4368              		.loc 1 2014 5 is_stmt 1 view .LVU1589
2014:source\fatfs/ff.c **** 					b |= 2;
 4369              		.loc 1 2014 9 is_stmt 0 view .LVU1590
 4370 02aa A0F14101 		sub	r1, r0, #65
2014:source\fatfs/ff.c **** 					b |= 2;
 4371              		.loc 1 2014 8 view .LVU1591
 4372 02ae 89B2     		uxth	r1, r1
 4373 02b0 1929     		cmp	r1, #25
 4374 02b2 A2D9     		bls	.L433
2017:source\fatfs/ff.c **** 						b |= 1; w -= 0x20;
 4375              		.loc 1 2017 6 is_stmt 1 view .LVU1592
2017:source\fatfs/ff.c **** 						b |= 1; w -= 0x20;
 4376              		.loc 1 2017 10 is_stmt 0 view .LVU1593
 4377 02b4 A0F16101 		sub	r1, r0, #97
2017:source\fatfs/ff.c **** 						b |= 1; w -= 0x20;
 4378              		.loc 1 2017 9 view .LVU1594
 4379 02b8 89B2     		uxth	r1, r1
 4380 02ba 1929     		cmp	r1, #25
2018:source\fatfs/ff.c **** 					}
 4381              		.loc 1 2018 7 is_stmt 1 view .LVU1595
2018:source\fatfs/ff.c **** 					}
 4382              		.loc 1 2018 17 is_stmt 0 view .LVU1596
 4383 02bc 9EBF     		ittt	ls
 4384 02be 2038     		subls	r0, r0, #32
2018:source\fatfs/ff.c **** 					}
 4385              		.loc 1 2018 9 view .LVU1597
 4386 02c0 46F00106 		orrls	r6, r6, #1
 4387              	.LVL502:
2018:source\fatfs/ff.c **** 					}
 4388              		.loc 1 2018 15 is_stmt 1 view .LVU1598
2018:source\fatfs/ff.c **** 					}
 4389              		.loc 1 2018 17 is_stmt 0 view .LVU1599
 4390 02c4 80B2     		uxthls	r0, r0
 4391              	.LVL503:
2018:source\fatfs/ff.c **** 					}
 4392              		.loc 1 2018 17 view .LVU1600
 4393 02c6 80E7     		b	.L421
 4394              	.L496:
 4395              		.align	2
 4396              	.L495:
 4397 02c8 00000000 		.word	.LC0
 4398 02cc 09000000 		.word	.LC1
 4399              	.LBE61:
 4400              	.LBE65:
 4401              		.cfi_endproc
 4402              	.LFE157:
 4404              		.section	.text.dir_register,"ax",%progbits
 4405              		.align	1
 4406              		.syntax unified
 4407              		.thumb
 4408              		.thumb_func
 4410              	dir_register:
 4411              	.LVL504:
 4412              	.LFB153:
1651:source\fatfs/ff.c **** 	FRESULT res;
 4413              		.loc 1 1651 1 is_stmt 1 view -0
 4414              		.cfi_startproc
 4415              		@ args = 0, pretend = 0, frame = 24
 4416              		@ frame_needed = 0, uses_anonymous_args = 0
1652:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 4417              		.loc 1 1652 2 view .LVU1602
1654:source\fatfs/ff.c **** 	BYTE sn[12], *fn, sum;
 4418              		.loc 1 1654 2 view .LVU1603
1655:source\fatfs/ff.c **** 	WCHAR *lfn;
 4419              		.loc 1 1655 2 view .LVU1604
1656:source\fatfs/ff.c **** 
 4420              		.loc 1 1656 2 view .LVU1605
1659:source\fatfs/ff.c **** 	mem_cpy(sn, fn, 12);
 4421              		.loc 1 1659 2 view .LVU1606
1651:source\fatfs/ff.c **** 	FRESULT res;
 4422              		.loc 1 1651 1 is_stmt 0 view .LVU1607
 4423 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4424              		.cfi_def_cfa_offset 36
 4425              		.cfi_offset 4, -36
 4426              		.cfi_offset 5, -32
 4427              		.cfi_offset 6, -28
 4428              		.cfi_offset 7, -24
 4429              		.cfi_offset 8, -20
 4430              		.cfi_offset 9, -16
 4431              		.cfi_offset 10, -12
 4432              		.cfi_offset 11, -8
 4433              		.cfi_offset 14, -4
1659:source\fatfs/ff.c **** 	mem_cpy(sn, fn, 12);
 4434              		.loc 1 1659 5 view .LVU1608
 4435 0004 D0F81862 		ldr	r6, [r0, #536]
 4436              	.LVL505:
1659:source\fatfs/ff.c **** 	mem_cpy(sn, fn, 12);
 4437              		.loc 1 1659 15 is_stmt 1 view .LVU1609
1659:source\fatfs/ff.c **** 	mem_cpy(sn, fn, 12);
 4438              		.loc 1 1659 19 is_stmt 0 view .LVU1610
 4439 0008 D0F82082 		ldr	r8, [r0, #544]
 4440              	.LVL506:
1660:source\fatfs/ff.c **** 
 4441              		.loc 1 1660 2 is_stmt 1 view .LVU1611
1651:source\fatfs/ff.c **** 	FRESULT res;
 4442              		.loc 1 1651 1 is_stmt 0 view .LVU1612
 4443 000c 87B0     		sub	sp, sp, #28
 4444              		.cfi_def_cfa_offset 64
1660:source\fatfs/ff.c **** 
 4445              		.loc 1 1660 2 view .LVU1613
 4446 000e 0C22     		movs	r2, #12
1651:source\fatfs/ff.c **** 	FRESULT res;
 4447              		.loc 1 1651 1 view .LVU1614
 4448 0010 0546     		mov	r5, r0
1660:source\fatfs/ff.c **** 
 4449              		.loc 1 1660 2 view .LVU1615
 4450 0012 3146     		mov	r1, r6
 4451 0014 0DEB0200 		add	r0, sp, r2
 4452              	.LVL507:
1660:source\fatfs/ff.c **** 
 4453              		.loc 1 1660 2 view .LVU1616
 4454 0018 FFF7FEFF 		bl	mem_cpy
 4455              	.LVL508:
1662:source\fatfs/ff.c **** 		return FR_INVALID_NAME;
 4456              		.loc 1 1662 2 is_stmt 1 view .LVU1617
1665:source\fatfs/ff.c **** 		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 4457              		.loc 1 1665 2 view .LVU1618
1665:source\fatfs/ff.c **** 		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 4458              		.loc 1 1665 8 is_stmt 0 view .LVU1619
 4459 001c 9DF817A0 		ldrb	r10, [sp, #23]	@ zero_extendqisi2
1665:source\fatfs/ff.c **** 		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 4460              		.loc 1 1665 5 view .LVU1620
 4461 0020 1AF0010F 		tst	r10, #1
 4462 0024 75D0     		beq	.L498
1666:source\fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
 4463              		.loc 1 1666 3 is_stmt 1 view .LVU1621
1666:source\fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
 4464              		.loc 1 1666 14 is_stmt 0 view .LVU1622
 4465 0026 0023     		movs	r3, #0
 4466              	.LBB72:
 4467              	.LBB73:
1471:source\fatfs/ff.c **** 			}
 4468              		.loc 1 1471 26 view .LVU1623
 4469 0028 DFF85492 		ldr	r9, .L569
 4470              	.LBE73:
 4471              	.LBE72:
1666:source\fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
 4472              		.loc 1 1666 14 view .LVU1624
 4473 002c F372     		strb	r3, [r6, #11]
1666:source\fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
 4474              		.loc 1 1666 19 is_stmt 1 view .LVU1625
1667:source\fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 4475              		.loc 1 1667 10 is_stmt 0 view .LVU1626
 4476 002e 0127     		movs	r7, #1
1666:source\fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
 4477              		.loc 1 1666 27 view .LVU1627
 4478 0030 C5F82032 		str	r3, [r5, #544]
1667:source\fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 4479              		.loc 1 1667 3 is_stmt 1 view .LVU1628
 4480              	.LVL509:
1667:source\fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 4481              		.loc 1 1667 17 view .LVU1629
 4482              	.L512:
1668:source\fatfs/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 4483              		.loc 1 1668 4 view .LVU1630
 4484              	.LBB76:
 4485              	.LBI72:
1449:source\fatfs/ff.c **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
 4486              		.loc 1 1449 6 view .LVU1631
 4487              	.LBB74:
1456:source\fatfs/ff.c **** 	UINT i, j;
 4488              		.loc 1 1456 2 view .LVU1632
1457:source\fatfs/ff.c **** 	WCHAR wc;
 4489              		.loc 1 1457 2 view .LVU1633
1458:source\fatfs/ff.c **** 	DWORD sr;
 4490              		.loc 1 1458 2 view .LVU1634
1459:source\fatfs/ff.c **** 
 4491              		.loc 1 1459 2 view .LVU1635
1462:source\fatfs/ff.c **** 
 4492              		.loc 1 1462 2 view .LVU1636
 4493 0034 0B22     		movs	r2, #11
 4494 0036 03A9     		add	r1, sp, #12
 4495              	.LVL510:
1462:source\fatfs/ff.c **** 
 4496              		.loc 1 1462 2 is_stmt 0 view .LVU1637
 4497 0038 3046     		mov	r0, r6
 4498 003a FFF7FEFF 		bl	mem_cpy
 4499              	.LVL511:
1464:source\fatfs/ff.c **** 		sr = seq;
 4500              		.loc 1 1464 2 is_stmt 1 view .LVU1638
1464:source\fatfs/ff.c **** 		sr = seq;
 4501              		.loc 1 1464 5 is_stmt 0 view .LVU1639
 4502 003e 052F     		cmp	r7, #5
 4503 0040 53D9     		bls	.L537
 4504 0042 A8F10200 		sub	r0, r8, #2
 4505 0046 3B46     		mov	r3, r7
 4506              	.L500:
 4507              	.LVL512:
1466:source\fatfs/ff.c **** 			wc = *lfn++;
 4508              		.loc 1 1466 10 is_stmt 1 view .LVU1640
 4509 0048 30F8022F 		ldrh	r2, [r0, #2]!
 4510              	.LVL513:
1466:source\fatfs/ff.c **** 			wc = *lfn++;
 4511              		.loc 1 1466 10 is_stmt 0 view .LVU1641
 4512 004c 002A     		cmp	r2, #0
 4513 004e 3ED1     		bne	.L538
 4514              	.LVL514:
 4515              	.L499:
1466:source\fatfs/ff.c **** 			wc = *lfn++;
 4516              		.loc 1 1466 10 view .LVU1642
 4517 0050 03AC     		add	r4, sp, #12
 4518              	.LVL515:
1466:source\fatfs/ff.c **** 			wc = *lfn++;
 4519              		.loc 1 1466 10 view .LVU1643
 4520 0052 0721     		movs	r1, #7
 4521              	.LVL516:
 4522              	.L504:
1479:source\fatfs/ff.c **** 		c = (seq % 16) + '0';
 4523              		.loc 1 1479 2 is_stmt 1 view .LVU1644
1480:source\fatfs/ff.c **** 		if (c > '9') c += 7;
 4524              		.loc 1 1480 3 view .LVU1645
1480:source\fatfs/ff.c **** 		if (c > '9') c += 7;
 4525              		.loc 1 1480 12 is_stmt 0 view .LVU1646
 4526 0054 03F00F02 		and	r2, r3, #15
1480:source\fatfs/ff.c **** 		if (c > '9') c += 7;
 4527              		.loc 1 1480 5 view .LVU1647
 4528 0058 02F13000 		add	r0, r2, #48
 4529              	.LVL517:
1481:source\fatfs/ff.c **** 		ns[i--] = c;
 4530              		.loc 1 1481 3 is_stmt 1 view .LVU1648
1481:source\fatfs/ff.c **** 		ns[i--] = c;
 4531              		.loc 1 1481 6 is_stmt 0 view .LVU1649
 4532 005c 3928     		cmp	r0, #57
1481:source\fatfs/ff.c **** 		ns[i--] = c;
 4533              		.loc 1 1481 16 is_stmt 1 view .LVU1650
1481:source\fatfs/ff.c **** 		ns[i--] = c;
 4534              		.loc 1 1481 18 is_stmt 0 view .LVU1651
 4535 005e 88BF     		it	hi
 4536 0060 02F13700 		addhi	r0, r2, #55
 4537              	.LVL518:
1482:source\fatfs/ff.c **** 		seq /= 16;
 4538              		.loc 1 1482 3 is_stmt 1 view .LVU1652
1484:source\fatfs/ff.c **** 	ns[i] = '~';
 4539              		.loc 1 1484 11 is_stmt 0 view .LVU1653
 4540 0064 0F2B     		cmp	r3, #15
1482:source\fatfs/ff.c **** 		seq /= 16;
 4541              		.loc 1 1482 11 view .LVU1654
 4542 0066 04F8010D 		strb	r0, [r4, #-1]!
1482:source\fatfs/ff.c **** 		seq /= 16;
 4543              		.loc 1 1482 7 view .LVU1655
 4544 006a 01F1FF32 		add	r2, r1, #-1
 4545              	.LVL519:
1483:source\fatfs/ff.c **** 	} while (seq);
 4546              		.loc 1 1483 3 is_stmt 1 view .LVU1656
1483:source\fatfs/ff.c **** 	} while (seq);
 4547              		.loc 1 1483 7 is_stmt 0 view .LVU1657
 4548 006e 4FEA1310 		lsr	r0, r3, #4
 4549              	.LVL520:
1484:source\fatfs/ff.c **** 	ns[i] = '~';
 4550              		.loc 1 1484 11 is_stmt 1 view .LVU1658
 4551 0072 3CD8     		bhi	.L539
1485:source\fatfs/ff.c **** 
 4552              		.loc 1 1485 2 view .LVU1659
1485:source\fatfs/ff.c **** 
 4553              		.loc 1 1485 8 is_stmt 0 view .LVU1660
 4554 0074 02F11803 		add	r3, r2, #24
 4555 0078 6B44     		add	r3, sp, r3
 4556 007a 7E20     		movs	r0, #126
 4557              	.LVL521:
1485:source\fatfs/ff.c **** 
 4558              		.loc 1 1485 8 view .LVU1661
 4559 007c 03F8140C 		strb	r0, [r3, #-20]
 4560              	.LVL522:
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4561              		.loc 1 1488 2 is_stmt 1 view .LVU1662
1490:source\fatfs/ff.c **** 			j++;
 4562              		.loc 1 1490 15 is_stmt 0 view .LVU1663
 4563 0080 8C1E     		subs	r4, r1, #2
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4564              		.loc 1 1488 9 view .LVU1664
 4565 0082 0023     		movs	r3, #0
 4566              	.LVL523:
 4567              	.L505:
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4568              		.loc 1 1488 20 is_stmt 1 view .LVU1665
 4569 0084 9A42     		cmp	r2, r3
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4570              		.loc 1 1488 26 is_stmt 0 view .LVU1666
 4571 0086 06EB0300 		add	r0, r6, r3
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4572              		.loc 1 1488 20 view .LVU1667
 4573 008a 02D9     		bls	.L507
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4574              		.loc 1 1488 26 view .LVU1668
 4575 008c F15C     		ldrb	r1, [r6, r3]	@ zero_extendqisi2
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4576              		.loc 1 1488 20 view .LVU1669
 4577 008e 2029     		cmp	r1, #32
 4578 0090 30D1     		bne	.L508
 4579              	.L507:
 4580 0092 0346     		mov	r3, r0
 4581              	.LVL524:
 4582              	.L510:
1494:source\fatfs/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
 4583              		.loc 1 1494 2 is_stmt 1 view .LVU1670
1495:source\fatfs/ff.c **** 	} while (j < 8);
 4584              		.loc 1 1495 3 view .LVU1671
1495:source\fatfs/ff.c **** 	} while (j < 8);
 4585              		.loc 1 1495 12 is_stmt 0 view .LVU1672
 4586 0094 072A     		cmp	r2, #7
 4587 0096 9BBF     		ittet	ls
 4588 0098 02F11801 		addls	r1, r2, #24
 4589 009c 6944     		addls	r1, sp, r1
 4590 009e 2021     		movhi	r1, #32
 4591 00a0 11F8141C 		ldrbls	r1, [r1, #-20]	@ zero_extendqisi2
 4592 00a4 03F8011B 		strb	r1, [r3], #1
1496:source\fatfs/ff.c **** }
 4593              		.loc 1 1496 13 view .LVU1673
 4594 00a8 A3EB0601 		sub	r1, r3, r6
1495:source\fatfs/ff.c **** 	} while (j < 8);
 4595              		.loc 1 1495 28 view .LVU1674
 4596 00ac 98BF     		it	ls
 4597 00ae 0132     		addls	r2, r2, #1
 4598              	.LVL525:
1496:source\fatfs/ff.c **** }
 4599              		.loc 1 1496 13 is_stmt 1 view .LVU1675
 4600 00b0 0729     		cmp	r1, #7
 4601 00b2 EFD9     		bls	.L510
 4602              	.LVL526:
1496:source\fatfs/ff.c **** }
 4603              		.loc 1 1496 13 is_stmt 0 view .LVU1676
 4604              	.LBE74:
 4605              	.LBE76:
1669:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 4606              		.loc 1 1669 4 is_stmt 1 view .LVU1677
1669:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 4607              		.loc 1 1669 10 is_stmt 0 view .LVU1678
 4608 00b4 2846     		mov	r0, r5
 4609 00b6 FFF7FEFF 		bl	dir_find
 4610              	.LVL527:
 4611 00ba 0446     		mov	r4, r0
 4612              	.LVL528:
1670:source\fatfs/ff.c **** 		}
 4613              		.loc 1 1670 4 is_stmt 1 view .LVU1679
1670:source\fatfs/ff.c **** 		}
 4614              		.loc 1 1670 7 is_stmt 0 view .LVU1680
 4615 00bc 18BB     		cbnz	r0, .L511
1667:source\fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 4616              		.loc 1 1667 25 is_stmt 1 discriminator 2 view .LVU1681
 4617 00be 0137     		adds	r7, r7, #1
 4618              	.LVL529:
1667:source\fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 4619              		.loc 1 1667 17 discriminator 2 view .LVU1682
 4620 00c0 642F     		cmp	r7, #100
 4621 00c2 B7D1     		bne	.L512
 4622              	.LVL530:
 4623              	.L513:
1672:source\fatfs/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 4624              		.loc 1 1672 24 is_stmt 0 view .LVU1683
 4625 00c4 0724     		movs	r4, #7
 4626              	.LVL531:
 4627              	.L543:
1715:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
 4628              		.loc 1 1715 1 view .LVU1684
 4629 00c6 2046     		mov	r0, r4
 4630 00c8 07B0     		add	sp, sp, #28
 4631              		.cfi_remember_state
 4632              		.cfi_def_cfa_offset 36
 4633              		@ sp needed
 4634 00ca BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4635              	.LVL532:
 4636              	.L538:
 4637              		.cfi_restore_state
 4638              	.LBB77:
 4639              	.LBB75:
1715:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
 4640              		.loc 1 1715 1 view .LVU1685
 4641 00ce 1021     		movs	r1, #16
 4642              	.LVL533:
 4643              	.L502:
1469:source\fatfs/ff.c **** 				wc >>= 1;
 4644              		.loc 1 1469 5 is_stmt 1 view .LVU1686
1469:source\fatfs/ff.c **** 				wc >>= 1;
 4645              		.loc 1 1469 26 is_stmt 0 view .LVU1687
 4646 00d0 02F00104 		and	r4, r2, #1
1469:source\fatfs/ff.c **** 				wc >>= 1;
 4647              		.loc 1 1469 8 view .LVU1688
 4648 00d4 04EB4303 		add	r3, r4, r3, lsl #1
 4649              	.LVL534:
1470:source\fatfs/ff.c **** 				if (sr & 0x10000) sr ^= 0x11021;
 4650              		.loc 1 1470 5 is_stmt 1 view .LVU1689
1471:source\fatfs/ff.c **** 			}
 4651              		.loc 1 1471 8 is_stmt 0 view .LVU1690
 4652 00d8 DC03     		lsls	r4, r3, #15
1471:source\fatfs/ff.c **** 			}
 4653              		.loc 1 1471 26 view .LVU1691
 4654 00da 48BF     		it	mi
 4655 00dc 83EA0903 		eormi	r3, r3, r9
 4656              	.LVL535:
1468:source\fatfs/ff.c **** 				sr = (sr << 1) + (wc & 1);
 4657              		.loc 1 1468 18 view .LVU1692
 4658 00e0 0139     		subs	r1, r1, #1
 4659              	.LVL536:
1470:source\fatfs/ff.c **** 				if (sr & 0x10000) sr ^= 0x11021;
 4660              		.loc 1 1470 8 view .LVU1693
 4661 00e2 4FEA5202 		lsr	r2, r2, #1
 4662              	.LVL537:
1471:source\fatfs/ff.c **** 			}
 4663              		.loc 1 1471 5 is_stmt 1 view .LVU1694
1471:source\fatfs/ff.c **** 			}
 4664              		.loc 1 1471 23 view .LVU1695
1468:source\fatfs/ff.c **** 				sr = (sr << 1) + (wc & 1);
 4665              		.loc 1 1468 25 view .LVU1696
1468:source\fatfs/ff.c **** 				sr = (sr << 1) + (wc & 1);
 4666              		.loc 1 1468 18 view .LVU1697
 4667 00e6 F3D1     		bne	.L502
 4668 00e8 AEE7     		b	.L500
 4669              	.LVL538:
 4670              	.L537:
1468:source\fatfs/ff.c **** 				sr = (sr << 1) + (wc & 1);
 4671              		.loc 1 1468 18 is_stmt 0 view .LVU1698
 4672 00ea 3B46     		mov	r3, r7
 4673 00ec B0E7     		b	.L499
 4674              	.LVL539:
 4675              	.L539:
1482:source\fatfs/ff.c **** 		seq /= 16;
 4676              		.loc 1 1482 7 view .LVU1699
 4677 00ee 1146     		mov	r1, r2
1483:source\fatfs/ff.c **** 	} while (seq);
 4678              		.loc 1 1483 7 view .LVU1700
 4679 00f0 0346     		mov	r3, r0
 4680 00f2 AFE7     		b	.L504
 4681              	.LVL540:
 4682              	.L508:
1489:source\fatfs/ff.c **** 			if (j == i - 1) break;
 4683              		.loc 1 1489 3 is_stmt 1 view .LVU1701
1489:source\fatfs/ff.c **** 			if (j == i - 1) break;
 4684              		.loc 1 1489 7 is_stmt 0 view .LVU1702
 4685 00f4 7F31     		adds	r1, r1, #127
1489:source\fatfs/ff.c **** 			if (j == i - 1) break;
 4686              		.loc 1 1489 6 view .LVU1703
 4687 00f6 C9B2     		uxtb	r1, r1
 4688 00f8 7D29     		cmp	r1, #125
 4689 00fa 02D8     		bhi	.L506
1490:source\fatfs/ff.c **** 			j++;
 4690              		.loc 1 1490 4 is_stmt 1 view .LVU1704
1490:source\fatfs/ff.c **** 			j++;
 4691              		.loc 1 1490 7 is_stmt 0 view .LVU1705
 4692 00fc 9C42     		cmp	r4, r3
 4693 00fe C8D0     		beq	.L507
1491:source\fatfs/ff.c **** 		}
 4694              		.loc 1 1491 5 view .LVU1706
 4695 0100 0133     		adds	r3, r3, #1
 4696              	.LVL541:
 4697              	.L506:
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4698              		.loc 1 1488 39 is_stmt 1 view .LVU1707
 4699 0102 0133     		adds	r3, r3, #1
 4700              	.LVL542:
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4701              		.loc 1 1488 39 is_stmt 0 view .LVU1708
 4702 0104 BEE7     		b	.L505
 4703              	.LVL543:
 4704              	.L511:
1488:source\fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 4705              		.loc 1 1488 39 view .LVU1709
 4706              	.LBE75:
 4707              	.LBE77:
1672:source\fatfs/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 4708              		.loc 1 1672 3 is_stmt 1 view .LVU1710
1673:source\fatfs/ff.c **** 		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 4709              		.loc 1 1673 3 view .LVU1711
1673:source\fatfs/ff.c **** 		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 4710              		.loc 1 1673 6 is_stmt 0 view .LVU1712
 4711 0106 0428     		cmp	r0, #4
 4712 0108 DDD1     		bne	.L543
1674:source\fatfs/ff.c **** 	}
 4713              		.loc 1 1674 3 is_stmt 1 view .LVU1713
1674:source\fatfs/ff.c **** 	}
 4714              		.loc 1 1674 14 is_stmt 0 view .LVU1714
 4715 010a 86F80BA0 		strb	r10, [r6, #11]
1674:source\fatfs/ff.c **** 	}
 4716              		.loc 1 1674 28 is_stmt 1 view .LVU1715
1674:source\fatfs/ff.c **** 	}
 4717              		.loc 1 1674 36 is_stmt 0 view .LVU1716
 4718 010e C5F82082 		str	r8, [r5, #544]
 4719              	.LVL544:
 4720              	.L498:
1677:source\fatfs/ff.c **** 		for (n = 0; lfn[n]; n++) ;
 4721              		.loc 1 1677 2 is_stmt 1 view .LVU1717
1677:source\fatfs/ff.c **** 		for (n = 0; lfn[n]; n++) ;
 4722              		.loc 1 1677 5 is_stmt 0 view .LVU1718
 4723 0112 1AF0020F 		tst	r10, #2
 4724 0116 6BD1     		bne	.L541
1681:source\fatfs/ff.c **** 	}
 4725              		.loc 1 1681 8 view .LVU1719
 4726 0118 0126     		movs	r6, #1
 4727              	.LVL545:
 4728              	.L517:
1683:source\fatfs/ff.c **** 
 4729              		.loc 1 1683 2 is_stmt 1 view .LVU1720
 4730              	.LBB78:
 4731              	.LBI78:
1272:source\fatfs/ff.c **** 	DIR* dp,	/* Pointer to the directory object */
 4732              		.loc 1 1272 9 view .LVU1721
 4733              	.LBB79:
1277:source\fatfs/ff.c **** 	UINT n;
 4734              		.loc 1 1277 2 view .LVU1722
1278:source\fatfs/ff.c **** 
 4735              		.loc 1 1278 2 view .LVU1723
1281:source\fatfs/ff.c **** 	if (res == FR_OK) {
 4736              		.loc 1 1281 2 view .LVU1724
1281:source\fatfs/ff.c **** 	if (res == FR_OK) {
 4737              		.loc 1 1281 8 is_stmt 0 view .LVU1725
 4738 011a 0021     		movs	r1, #0
 4739 011c 2846     		mov	r0, r5
 4740 011e FFF7FEFF 		bl	dir_sdi
 4741              	.LVL546:
1282:source\fatfs/ff.c **** 		n = 0;
 4742              		.loc 1 1282 2 is_stmt 1 view .LVU1726
1282:source\fatfs/ff.c **** 		n = 0;
 4743              		.loc 1 1282 5 is_stmt 0 view .LVU1727
 4744 0122 0446     		mov	r4, r0
 4745 0124 0028     		cmp	r0, #0
 4746 0126 6DD1     		bne	.L520
1283:source\fatfs/ff.c **** 		do {
 4747              		.loc 1 1283 5 view .LVU1728
 4748 0128 0746     		mov	r7, r0
 4749              	.L524:
 4750              	.LVL547:
1284:source\fatfs/ff.c **** 			res = move_window(dp->fs, dp->sect);
 4751              		.loc 1 1284 3 is_stmt 1 view .LVU1729
1285:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 4752              		.loc 1 1285 4 view .LVU1730
1285:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 4753              		.loc 1 1285 10 is_stmt 0 view .LVU1731
 4754 012a D5F81012 		ldr	r1, [r5, #528]
 4755 012e D5F80002 		ldr	r0, [r5, #512]
 4756              	.LVL548:
1285:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 4757              		.loc 1 1285 10 view .LVU1732
 4758 0132 FFF7FEFF 		bl	move_window
 4759              	.LVL549:
1286:source\fatfs/ff.c **** 			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 4760              		.loc 1 1286 4 is_stmt 1 view .LVU1733
1286:source\fatfs/ff.c **** 			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 4761              		.loc 1 1286 7 is_stmt 0 view .LVU1734
 4762 0136 0446     		mov	r4, r0
 4763 0138 0028     		cmp	r0, #0
 4764 013a 63D1     		bne	.L520
1287:source\fatfs/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
 4765              		.loc 1 1287 4 is_stmt 1 view .LVU1735
1287:source\fatfs/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
 4766              		.loc 1 1287 15 is_stmt 0 view .LVU1736
 4767 013c D5F81432 		ldr	r3, [r5, #532]
 4768 0140 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1287:source\fatfs/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
 4769              		.loc 1 1287 7 view .LVU1737
 4770 0142 E52B     		cmp	r3, #229
 4771 0144 01D0     		beq	.L521
1287:source\fatfs/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
 4772              		.loc 1 1287 27 view .LVU1738
 4773 0146 002B     		cmp	r3, #0
 4774 0148 54D1     		bne	.L542
 4775              	.L521:
1288:source\fatfs/ff.c **** 			} else {
 4776              		.loc 1 1288 5 is_stmt 1 view .LVU1739
1288:source\fatfs/ff.c **** 			} else {
 4777              		.loc 1 1288 8 is_stmt 0 view .LVU1740
 4778 014a 0137     		adds	r7, r7, #1
 4779              	.LVL550:
1288:source\fatfs/ff.c **** 			} else {
 4780              		.loc 1 1288 8 view .LVU1741
 4781 014c BE42     		cmp	r6, r7
 4782 014e 52D1     		bne	.L522
 4783              	.LVL551:
1295:source\fatfs/ff.c **** 	return res;
 4784              		.loc 1 1295 2 is_stmt 1 view .LVU1742
1295:source\fatfs/ff.c **** 	return res;
 4785              		.loc 1 1295 2 is_stmt 0 view .LVU1743
 4786              	.LBE79:
 4787              	.LBE78:
1685:source\fatfs/ff.c **** 		res = dir_sdi(dp, dp->index - nent);
 4788              		.loc 1 1685 19 view .LVU1744
 4789 0150 013E     		subs	r6, r6, #1
 4790              	.LVL552:
1685:source\fatfs/ff.c **** 		res = dir_sdi(dp, dp->index - nent);
 4791              		.loc 1 1685 19 view .LVU1745
 4792 0152 73D0     		beq	.L534
1686:source\fatfs/ff.c **** 		if (res == FR_OK) {
 4793              		.loc 1 1686 3 is_stmt 1 view .LVU1746
1686:source\fatfs/ff.c **** 		if (res == FR_OK) {
 4794              		.loc 1 1686 23 is_stmt 0 view .LVU1747
 4795 0154 B5F80612 		ldrh	r1, [r5, #518]
1686:source\fatfs/ff.c **** 		if (res == FR_OK) {
 4796              		.loc 1 1686 9 view .LVU1748
 4797 0158 2846     		mov	r0, r5
 4798 015a 891B     		subs	r1, r1, r6
 4799 015c FFF7FEFF 		bl	dir_sdi
 4800              	.LVL553:
1687:source\fatfs/ff.c **** 			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 4801              		.loc 1 1687 3 is_stmt 1 view .LVU1749
1687:source\fatfs/ff.c **** 			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 4802              		.loc 1 1687 6 is_stmt 0 view .LVU1750
 4803 0160 0446     		mov	r4, r0
 4804 0162 0028     		cmp	r0, #0
 4805 0164 AFD1     		bne	.L543
1688:source\fatfs/ff.c **** 			do {					/* Store LFN entries in bottom first */
 4806              		.loc 1 1688 4 is_stmt 1 view .LVU1751
1688:source\fatfs/ff.c **** 			do {					/* Store LFN entries in bottom first */
 4807              		.loc 1 1688 10 is_stmt 0 view .LVU1752
 4808 0166 D5F81802 		ldr	r0, [r5, #536]
 4809              	.LVL554:
1688:source\fatfs/ff.c **** 			do {					/* Store LFN entries in bottom first */
 4810              		.loc 1 1688 10 view .LVU1753
 4811 016a FFF7FEFF 		bl	sum_sfn
 4812              	.LVL555:
 4813              	.LBB81:
 4814              	.LBB82:
1423:source\fatfs/ff.c **** 	dir[LDIR_Type] = 0;
 4815              		.loc 1 1423 17 view .LVU1754
 4816 016e 4FF00F08 		mov	r8, #15
 4817              	.LVL556:
1423:source\fatfs/ff.c **** 	dir[LDIR_Type] = 0;
 4818              		.loc 1 1423 17 view .LVU1755
 4819              	.LBE82:
 4820              	.LBE81:
1688:source\fatfs/ff.c **** 			do {					/* Store LFN entries in bottom first */
 4821              		.loc 1 1688 10 view .LVU1756
 4822 0172 0746     		mov	r7, r0
 4823              	.LVL557:
 4824              	.L533:
1689:source\fatfs/ff.c **** 				res = move_window(dp->fs, dp->sect);
 4825              		.loc 1 1689 4 is_stmt 1 view .LVU1757
1690:source\fatfs/ff.c **** 				if (res != FR_OK) break;
 4826              		.loc 1 1690 5 view .LVU1758
1690:source\fatfs/ff.c **** 				if (res != FR_OK) break;
 4827              		.loc 1 1690 11 is_stmt 0 view .LVU1759
 4828 0174 D5F81012 		ldr	r1, [r5, #528]
 4829 0178 D5F80002 		ldr	r0, [r5, #512]
 4830 017c FFF7FEFF 		bl	move_window
 4831              	.LVL558:
 4832 0180 0346     		mov	r3, r0
 4833 0182 0446     		mov	r4, r0
 4834              	.LVL559:
1691:source\fatfs/ff.c **** 				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 4835              		.loc 1 1691 5 is_stmt 1 view .LVU1760
1691:source\fatfs/ff.c **** 				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 4836              		.loc 1 1691 8 is_stmt 0 view .LVU1761
 4837 0184 0028     		cmp	r0, #0
 4838 0186 9ED1     		bne	.L543
1692:source\fatfs/ff.c **** 				dp->fs->wflag = 1;
 4839              		.loc 1 1692 5 is_stmt 1 view .LVU1762
 4840 0188 D5F81422 		ldr	r2, [r5, #532]
1692:source\fatfs/ff.c **** 				dp->fs->wflag = 1;
 4841              		.loc 1 1692 15 is_stmt 0 view .LVU1763
 4842 018c D5F820E2 		ldr	lr, [r5, #544]
 4843 0190 DFF8F090 		ldr	r9, .L569+4
 4844              	.LBB86:
 4845              	.LBB83:
1424:source\fatfs/ff.c **** 	ST_WORD(dir + LDIR_FstClusLO, 0);
 4846              		.loc 1 1424 17 view .LVU1764
 4847 0194 1073     		strb	r0, [r2, #12]
 4848 0196 F4B2     		uxtb	r4, r6
 4849              	.LVL560:
1424:source\fatfs/ff.c **** 	ST_WORD(dir + LDIR_FstClusLO, 0);
 4850              		.loc 1 1424 17 view .LVU1765
 4851              	.LBE83:
 4852              	.LBI81:
1411:source\fatfs/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
 4853              		.loc 1 1411 6 is_stmt 1 view .LVU1766
 4854              	.LBB84:
1418:source\fatfs/ff.c **** 	WCHAR wc;
 4855              		.loc 1 1418 2 view .LVU1767
1419:source\fatfs/ff.c **** 
 4856              		.loc 1 1419 2 view .LVU1768
1422:source\fatfs/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 4857              		.loc 1 1422 2 view .LVU1769
1427:source\fatfs/ff.c **** 	s = wc = 0;
 4858              		.loc 1 1427 16 is_stmt 0 view .LVU1770
 4859 0198 0D21     		movs	r1, #13
1425:source\fatfs/ff.c **** 
 4860              		.loc 1 1425 2 view .LVU1771
 4861 019a 9076     		strb	r0, [r2, #26]
 4862 019c D076     		strb	r0, [r2, #27]
1427:source\fatfs/ff.c **** 	s = wc = 0;
 4863              		.loc 1 1427 11 view .LVU1772
 4864 019e 601E     		subs	r0, r4, #1
 4865              	.LVL561:
1427:source\fatfs/ff.c **** 	s = wc = 0;
 4866              		.loc 1 1427 16 view .LVU1773
 4867 01a0 4843     		muls	r0, r1, r0
1422:source\fatfs/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 4868              		.loc 1 1422 19 view .LVU1774
 4869 01a2 5773     		strb	r7, [r2, #13]
1423:source\fatfs/ff.c **** 	dir[LDIR_Type] = 0;
 4870              		.loc 1 1423 2 is_stmt 1 view .LVU1775
1423:source\fatfs/ff.c **** 	dir[LDIR_Type] = 0;
 4871              		.loc 1 1423 17 is_stmt 0 view .LVU1776
 4872 01a4 82F80B80 		strb	r8, [r2, #11]
1424:source\fatfs/ff.c **** 	ST_WORD(dir + LDIR_FstClusLO, 0);
 4873              		.loc 1 1424 2 is_stmt 1 view .LVU1777
1425:source\fatfs/ff.c **** 
 4874              		.loc 1 1425 2 view .LVU1778
1425:source\fatfs/ff.c **** 
 4875              		.loc 1 1425 2 view .LVU1779
1427:source\fatfs/ff.c **** 	s = wc = 0;
 4876              		.loc 1 1427 2 view .LVU1780
 4877              	.LVL562:
1428:source\fatfs/ff.c **** 	do {
 4878              		.loc 1 1428 2 view .LVU1781
1428:source\fatfs/ff.c **** 	do {
 4879              		.loc 1 1428 4 is_stmt 0 view .LVU1782
 4880 01a8 1946     		mov	r1, r3
1430:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 4881              		.loc 1 1430 6 view .LVU1783
 4882 01aa 4FF6FF7A 		movw	r10, #65535
 4883              	.LVL563:
 4884              	.L531:
1429:source\fatfs/ff.c **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 4885              		.loc 1 1429 2 is_stmt 1 view .LVU1784
1430:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 4886              		.loc 1 1430 3 view .LVU1785
1430:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 4887              		.loc 1 1430 6 is_stmt 0 view .LVU1786
 4888 01ae 5345     		cmp	r3, r10
1430:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 4889              		.loc 1 1430 21 is_stmt 1 view .LVU1787
 4890              	.LVL564:
1430:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 4891              		.loc 1 1430 24 is_stmt 0 view .LVU1788
 4892 01b0 1CBF     		itt	ne
 4893 01b2 3EF81030 		ldrhne	r3, [lr, r0, lsl #1]
1430:source\fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 4894              		.loc 1 1430 34 view .LVU1789
 4895 01b6 0130     		addne	r0, r0, #1
 4896              	.LVL565:
 4897              	.L529:
1431:source\fatfs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 4898              		.loc 1 1431 3 is_stmt 1 view .LVU1790
 4899 01b8 19F801CB 		ldrb	ip, [r9], #1	@ zero_extendqisi2
 4900 01bc 02F80C30 		strb	r3, [r2, ip]
1431:source\fatfs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 4901              		.loc 1 1431 3 view .LVU1791
 4902 01c0 9444     		add	ip, ip, r2
 4903 01c2 4FEA132B 		lsr	fp, r3, #8
 4904 01c6 8CF801B0 		strb	fp, [ip, #1]
1432:source\fatfs/ff.c **** 	} while (++s < 13);
 4905              		.loc 1 1432 3 view .LVU1792
 4906 01ca 0131     		adds	r1, r1, #1
1432:source\fatfs/ff.c **** 	} while (++s < 13);
 4907              		.loc 1 1432 6 is_stmt 0 view .LVU1793
 4908 01cc F3B9     		cbnz	r3, .L528
 4909              	.LVL566:
1433:source\fatfs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 4910              		.loc 1 1433 15 is_stmt 1 view .LVU1794
1433:source\fatfs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 4911              		.loc 1 1433 15 is_stmt 0 view .LVU1795
 4912 01ce 0D29     		cmp	r1, #13
 4913 01d0 4FF6FF73 		movw	r3, #65535
 4914 01d4 F0D1     		bne	.L529
 4915              	.LVL567:
 4916              	.L530:
1434:source\fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 4917              		.loc 1 1434 34 is_stmt 1 view .LVU1796
1434:source\fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 4918              		.loc 1 1434 38 is_stmt 0 view .LVU1797
 4919 01d6 44F04004 		orr	r4, r4, #64
 4920              	.LVL568:
1434:source\fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 4921              		.loc 1 1434 38 view .LVU1798
 4922 01da 1FE0     		b	.L532
 4923              	.LVL569:
 4924              	.L518:
1434:source\fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 4925              		.loc 1 1434 38 view .LVU1799
 4926              	.LBE84:
 4927              	.LBE86:
1678:source\fatfs/ff.c **** 		nent = (n + 25) / 13;
 4928              		.loc 1 1678 24 is_stmt 1 discriminator 3 view .LVU1800
 4929 01dc 0136     		adds	r6, r6, #1
 4930              	.LVL570:
 4931              	.L516:
1678:source\fatfs/ff.c **** 		nent = (n + 25) / 13;
 4932              		.loc 1 1678 15 discriminator 1 view .LVU1801
 4933 01de 38F81630 		ldrh	r3, [r8, r6, lsl #1]
 4934 01e2 002B     		cmp	r3, #0
 4935 01e4 FAD1     		bne	.L518
1679:source\fatfs/ff.c **** 	} else {						/* Otherwise allocate an entry for an SFN  */
 4936              		.loc 1 1679 3 view .LVU1802
1679:source\fatfs/ff.c **** 	} else {						/* Otherwise allocate an entry for an SFN  */
 4937              		.loc 1 1679 13 is_stmt 0 view .LVU1803
 4938 01e6 1936     		adds	r6, r6, #25
 4939              	.LVL571:
1679:source\fatfs/ff.c **** 	} else {						/* Otherwise allocate an entry for an SFN  */
 4940              		.loc 1 1679 8 view .LVU1804
 4941 01e8 0D23     		movs	r3, #13
 4942 01ea B6FBF3F6 		udiv	r6, r6, r3
 4943              	.LVL572:
1679:source\fatfs/ff.c **** 	} else {						/* Otherwise allocate an entry for an SFN  */
 4944              		.loc 1 1679 8 view .LVU1805
 4945 01ee 94E7     		b	.L517
 4946              	.LVL573:
 4947              	.L541:
1678:source\fatfs/ff.c **** 		nent = (n + 25) / 13;
 4948              		.loc 1 1678 10 view .LVU1806
 4949 01f0 0026     		movs	r6, #0
 4950              	.LVL574:
1678:source\fatfs/ff.c **** 		nent = (n + 25) / 13;
 4951              		.loc 1 1678 10 view .LVU1807
 4952 01f2 F4E7     		b	.L516
 4953              	.LVL575:
 4954              	.L542:
 4955              	.LBB87:
 4956              	.LBB80:
1290:source\fatfs/ff.c **** 			}
 4957              		.loc 1 1290 7 view .LVU1808
 4958 01f4 0746     		mov	r7, r0
 4959              	.LVL576:
 4960              	.L522:
1292:source\fatfs/ff.c **** 		} while (res == FR_OK);
 4961              		.loc 1 1292 4 is_stmt 1 view .LVU1809
1292:source\fatfs/ff.c **** 		} while (res == FR_OK);
 4962              		.loc 1 1292 10 is_stmt 0 view .LVU1810
 4963 01f6 0121     		movs	r1, #1
 4964 01f8 2846     		mov	r0, r5
 4965              	.LVL577:
1292:source\fatfs/ff.c **** 		} while (res == FR_OK);
 4966              		.loc 1 1292 10 view .LVU1811
 4967 01fa FFF7FEFF 		bl	dir_next
 4968              	.LVL578:
1293:source\fatfs/ff.c **** 	}
 4969              		.loc 1 1293 16 is_stmt 1 view .LVU1812
 4970 01fe 0446     		mov	r4, r0
 4971 0200 0028     		cmp	r0, #0
 4972 0202 92D0     		beq	.L524
 4973              	.LVL579:
 4974              	.L520:
1295:source\fatfs/ff.c **** 	return res;
 4975              		.loc 1 1295 2 view .LVU1813
1295:source\fatfs/ff.c **** 	return res;
 4976              		.loc 1 1295 5 is_stmt 0 view .LVU1814
 4977 0204 042C     		cmp	r4, #4
 4978 0206 3FF45DAF 		beq	.L513
 4979 020a 5CE7     		b	.L543
 4980              	.LVL580:
 4981              	.L528:
1295:source\fatfs/ff.c **** 	return res;
 4982              		.loc 1 1295 5 view .LVU1815
 4983              	.LBE80:
 4984              	.LBE87:
 4985              	.LBB88:
 4986              	.LBB85:
1433:source\fatfs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 4987              		.loc 1 1433 15 is_stmt 1 view .LVU1816
1433:source\fatfs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 4988              		.loc 1 1433 15 is_stmt 0 view .LVU1817
 4989 020c 0D29     		cmp	r1, #13
 4990 020e CED1     		bne	.L531
1434:source\fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 4991              		.loc 1 1434 2 is_stmt 1 view .LVU1818
1434:source\fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 4992              		.loc 1 1434 5 is_stmt 0 view .LVU1819
 4993 0210 5345     		cmp	r3, r10
 4994 0212 E0D0     		beq	.L530
1434:source\fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 4995              		.loc 1 1434 19 view .LVU1820
 4996 0214 3EF81030 		ldrh	r3, [lr, r0, lsl #1]
 4997 0218 002B     		cmp	r3, #0
 4998 021a DCD0     		beq	.L530
 4999              	.LVL581:
 5000              	.L532:
1435:source\fatfs/ff.c **** }
 5001              		.loc 1 1435 2 is_stmt 1 view .LVU1821
1435:source\fatfs/ff.c **** }
 5002              		.loc 1 1435 16 is_stmt 0 view .LVU1822
 5003 021c 1470     		strb	r4, [r2]
 5004              	.LVL582:
1435:source\fatfs/ff.c **** }
 5005              		.loc 1 1435 16 view .LVU1823
 5006              	.LBE85:
 5007              	.LBE88:
1693:source\fatfs/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
 5008              		.loc 1 1693 5 is_stmt 1 view .LVU1824
1693:source\fatfs/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
 5009              		.loc 1 1693 19 is_stmt 0 view .LVU1825
 5010 021e D5F80032 		ldr	r3, [r5, #512]
 5011 0222 0122     		movs	r2, #1
 5012 0224 83F80422 		strb	r2, [r3, #516]
1694:source\fatfs/ff.c **** 			} while (res == FR_OK && --nent);
 5013              		.loc 1 1694 5 is_stmt 1 view .LVU1826
1694:source\fatfs/ff.c **** 			} while (res == FR_OK && --nent);
 5014              		.loc 1 1694 11 is_stmt 0 view .LVU1827
 5015 0228 0021     		movs	r1, #0
 5016 022a 2846     		mov	r0, r5
 5017 022c FFF7FEFF 		bl	dir_next
 5018              	.LVL583:
1695:source\fatfs/ff.c **** 		}
 5019              		.loc 1 1695 26 is_stmt 1 view .LVU1828
 5020 0230 0446     		mov	r4, r0
 5021 0232 0028     		cmp	r0, #0
 5022 0234 7FF447AF 		bne	.L543
 5023              	.LVL584:
1695:source\fatfs/ff.c **** 		}
 5024              		.loc 1 1695 26 is_stmt 0 discriminator 1 view .LVU1829
 5025 0238 013E     		subs	r6, r6, #1
 5026              	.LVL585:
1695:source\fatfs/ff.c **** 		}
 5027              		.loc 1 1695 26 discriminator 1 view .LVU1830
 5028 023a 9BD1     		bne	.L533
 5029              	.LVL586:
 5030              	.L534:
1703:source\fatfs/ff.c **** 		if (res == FR_OK) {
 5031              		.loc 1 1703 3 is_stmt 1 view .LVU1831
1703:source\fatfs/ff.c **** 		if (res == FR_OK) {
 5032              		.loc 1 1703 9 is_stmt 0 view .LVU1832
 5033 023c D5F81012 		ldr	r1, [r5, #528]
 5034 0240 D5F80002 		ldr	r0, [r5, #512]
 5035 0244 FFF7FEFF 		bl	move_window
 5036              	.LVL587:
1704:source\fatfs/ff.c **** 			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 5037              		.loc 1 1704 3 is_stmt 1 view .LVU1833
1704:source\fatfs/ff.c **** 			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 5038              		.loc 1 1704 6 is_stmt 0 view .LVU1834
 5039 0248 0446     		mov	r4, r0
 5040 024a 0028     		cmp	r0, #0
 5041 024c 7FF43BAF 		bne	.L543
1705:source\fatfs/ff.c **** 			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 5042              		.loc 1 1705 4 is_stmt 1 view .LVU1835
 5043 0250 0146     		mov	r1, r0
 5044 0252 2022     		movs	r2, #32
 5045 0254 D5F81402 		ldr	r0, [r5, #532]
 5046              	.LVL588:
1705:source\fatfs/ff.c **** 			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 5047              		.loc 1 1705 4 is_stmt 0 view .LVU1836
 5048 0258 FFF7FEFF 		bl	mem_set
 5049              	.LVL589:
1706:source\fatfs/ff.c **** #if _USE_LFN
 5050              		.loc 1 1706 4 is_stmt 1 view .LVU1837
 5051 025c 0B22     		movs	r2, #11
 5052 025e D5E98501 		ldrd	r0, r1, [r5, #532]
 5053 0262 FFF7FEFF 		bl	mem_cpy
 5054              	.LVL590:
1708:source\fatfs/ff.c **** #endif
 5055              		.loc 1 1708 4 view .LVU1838
1708:source\fatfs/ff.c **** #endif
 5056              		.loc 1 1708 31 is_stmt 0 view .LVU1839
 5057 0266 D5E98523 		ldrd	r2, r3, [r5, #532]
1708:source\fatfs/ff.c **** #endif
 5058              		.loc 1 1708 40 view .LVU1840
 5059 026a DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 5060 026c 03F01803 		and	r3, r3, #24
1708:source\fatfs/ff.c **** #endif
 5061              		.loc 1 1708 23 view .LVU1841
 5062 0270 1373     		strb	r3, [r2, #12]
1710:source\fatfs/ff.c **** 		}
 5063              		.loc 1 1710 4 is_stmt 1 view .LVU1842
1710:source\fatfs/ff.c **** 		}
 5064              		.loc 1 1710 18 is_stmt 0 view .LVU1843
 5065 0272 D5F80032 		ldr	r3, [r5, #512]
 5066 0276 0122     		movs	r2, #1
 5067 0278 83F80422 		strb	r2, [r3, #516]
 5068 027c 23E7     		b	.L543
 5069              	.L570:
 5070 027e 00BF     		.align	2
 5071              	.L569:
 5072 0280 21100100 		.word	69665
 5073 0284 00000000 		.word	LfnOfs
 5074              		.cfi_endproc
 5075              	.LFE153:
 5077              		.section	.text.dir_remove,"ax",%progbits
 5078              		.align	1
 5079              		.syntax unified
 5080              		.thumb
 5081              		.thumb_func
 5083              	dir_remove:
 5084              	.LVL591:
 5085              	.LFB154:
1729:source\fatfs/ff.c **** 	FRESULT res;
 5086              		.loc 1 1729 1 is_stmt 1 view -0
 5087              		.cfi_startproc
 5088              		@ args = 0, pretend = 0, frame = 0
 5089              		@ frame_needed = 0, uses_anonymous_args = 0
1730:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 5090              		.loc 1 1730 2 view .LVU1845
1732:source\fatfs/ff.c **** 
 5091              		.loc 1 1732 2 view .LVU1846
1734:source\fatfs/ff.c **** 	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN en
 5092              		.loc 1 1734 2 view .LVU1847
1729:source\fatfs/ff.c **** 	FRESULT res;
 5093              		.loc 1 1729 1 is_stmt 0 view .LVU1848
 5094 0000 70B5     		push	{r4, r5, r6, lr}
 5095              		.cfi_def_cfa_offset 16
 5096              		.cfi_offset 4, -16
 5097              		.cfi_offset 5, -12
 5098              		.cfi_offset 6, -8
 5099              		.cfi_offset 14, -4
1735:source\fatfs/ff.c **** 	if (res == FR_OK) {
 5100              		.loc 1 1735 23 view .LVU1849
 5101 0002 B0F82412 		ldrh	r1, [r0, #548]
1734:source\fatfs/ff.c **** 	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN en
 5102              		.loc 1 1734 8 view .LVU1850
 5103 0006 B0F80652 		ldrh	r5, [r0, #518]
 5104              	.LVL592:
1735:source\fatfs/ff.c **** 	if (res == FR_OK) {
 5105              		.loc 1 1735 2 is_stmt 1 view .LVU1851
1735:source\fatfs/ff.c **** 	if (res == FR_OK) {
 5106              		.loc 1 1735 8 is_stmt 0 view .LVU1852
 5107 000a 4FF6FF73 		movw	r3, #65535
 5108 000e 9942     		cmp	r1, r3
 5109 0010 08BF     		it	eq
 5110 0012 2946     		moveq	r1, r5
1729:source\fatfs/ff.c **** 	FRESULT res;
 5111              		.loc 1 1729 1 view .LVU1853
 5112 0014 0446     		mov	r4, r0
1735:source\fatfs/ff.c **** 	if (res == FR_OK) {
 5113              		.loc 1 1735 8 view .LVU1854
 5114 0016 FFF7FEFF 		bl	dir_sdi
 5115              	.LVL593:
1736:source\fatfs/ff.c **** 		do {
 5116              		.loc 1 1736 2 is_stmt 1 view .LVU1855
1736:source\fatfs/ff.c **** 		do {
 5117              		.loc 1 1736 5 is_stmt 0 view .LVU1856
 5118 001a 0146     		mov	r1, r0
 5119 001c 10BB     		cbnz	r0, .L573
1741:source\fatfs/ff.c **** 			dp->fs->wflag = 1;
 5120              		.loc 1 1741 13 view .LVU1857
 5121 001e E526     		movs	r6, #229
 5122              	.L575:
1737:source\fatfs/ff.c **** 			res = move_window(dp->fs, dp->sect);
 5123              		.loc 1 1737 3 is_stmt 1 view .LVU1858
1738:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 5124              		.loc 1 1738 4 view .LVU1859
1738:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 5125              		.loc 1 1738 10 is_stmt 0 view .LVU1860
 5126 0020 D4F81012 		ldr	r1, [r4, #528]
 5127 0024 D4F80002 		ldr	r0, [r4, #512]
 5128              	.LVL594:
1738:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 5129              		.loc 1 1738 10 view .LVU1861
 5130 0028 FFF7FEFF 		bl	move_window
 5131              	.LVL595:
1739:source\fatfs/ff.c **** 			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 5132              		.loc 1 1739 4 is_stmt 1 view .LVU1862
1739:source\fatfs/ff.c **** 			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 5133              		.loc 1 1739 7 is_stmt 0 view .LVU1863
 5134 002c 0146     		mov	r1, r0
 5135 002e B0B9     		cbnz	r0, .L574
1740:source\fatfs/ff.c **** 			*dp->dir = DDEM;
 5136              		.loc 1 1740 4 is_stmt 1 view .LVU1864
 5137 0030 2022     		movs	r2, #32
 5138 0032 D4F81402 		ldr	r0, [r4, #532]
 5139              	.LVL596:
1740:source\fatfs/ff.c **** 			*dp->dir = DDEM;
 5140              		.loc 1 1740 4 is_stmt 0 view .LVU1865
 5141 0036 FFF7FEFF 		bl	mem_set
 5142              	.LVL597:
1741:source\fatfs/ff.c **** 			dp->fs->wflag = 1;
 5143              		.loc 1 1741 4 is_stmt 1 view .LVU1866
1741:source\fatfs/ff.c **** 			dp->fs->wflag = 1;
 5144              		.loc 1 1741 7 is_stmt 0 view .LVU1867
 5145 003a D4F81432 		ldr	r3, [r4, #532]
1741:source\fatfs/ff.c **** 			dp->fs->wflag = 1;
 5146              		.loc 1 1741 13 view .LVU1868
 5147 003e 1E70     		strb	r6, [r3]
1742:source\fatfs/ff.c **** 			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 5148              		.loc 1 1742 4 is_stmt 1 view .LVU1869
1742:source\fatfs/ff.c **** 			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 5149              		.loc 1 1742 18 is_stmt 0 view .LVU1870
 5150 0040 D4F80032 		ldr	r3, [r4, #512]
 5151 0044 0122     		movs	r2, #1
 5152 0046 83F80422 		strb	r2, [r3, #516]
1743:source\fatfs/ff.c **** 			res = dir_next(dp, 0);		/* Next entry */
 5153              		.loc 1 1743 4 is_stmt 1 view .LVU1871
1743:source\fatfs/ff.c **** 			res = dir_next(dp, 0);		/* Next entry */
 5154              		.loc 1 1743 7 is_stmt 0 view .LVU1872
 5155 004a B4F80632 		ldrh	r3, [r4, #518]
 5156 004e AB42     		cmp	r3, r5
 5157 0050 08D2     		bcs	.L573
1744:source\fatfs/ff.c **** 		} while (res == FR_OK);
 5158              		.loc 1 1744 4 is_stmt 1 view .LVU1873
1744:source\fatfs/ff.c **** 		} while (res == FR_OK);
 5159              		.loc 1 1744 10 is_stmt 0 view .LVU1874
 5160 0052 2046     		mov	r0, r4
 5161 0054 FFF7FEFF 		bl	dir_next
 5162              	.LVL598:
1745:source\fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
 5163              		.loc 1 1745 16 is_stmt 1 view .LVU1875
 5164 0058 0146     		mov	r1, r0
 5165 005a 0028     		cmp	r0, #0
 5166 005c E0D0     		beq	.L575
 5167              	.L574:
 5168              	.LVL599:
1746:source\fatfs/ff.c **** 	}
 5169              		.loc 1 1746 3 view .LVU1876
1746:source\fatfs/ff.c **** 	}
 5170              		.loc 1 1746 30 is_stmt 0 view .LVU1877
 5171 005e 0429     		cmp	r1, #4
 5172 0060 08BF     		it	eq
 5173 0062 0221     		moveq	r1, #2
 5174              	.LVL600:
 5175              	.L573:
1761:source\fatfs/ff.c **** }
 5176              		.loc 1 1761 2 is_stmt 1 view .LVU1878
1762:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
 5177              		.loc 1 1762 1 is_stmt 0 view .LVU1879
 5178 0064 0846     		mov	r0, r1
 5179 0066 70BD     		pop	{r4, r5, r6, pc}
1762:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
 5180              		.loc 1 1762 1 view .LVU1880
 5181              		.cfi_endproc
 5182              	.LFE154:
 5184              		.section	.text.dir_read.constprop.0,"ax",%progbits
 5185              		.align	1
 5186              		.syntax unified
 5187              		.thumb
 5188              		.thumb_func
 5190              	dir_read.constprop.0:
 5191              	.LVL601:
 5192              	.LFB197:
1589:source\fatfs/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
 5193              		.loc 1 1589 9 is_stmt 1 view -0
 5194              		.cfi_startproc
 5195              		@ args = 0, pretend = 0, frame = 0
 5196              		@ frame_needed = 0, uses_anonymous_args = 0
1589:source\fatfs/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
 5197              		.loc 1 1589 9 is_stmt 0 view .LVU1882
 5198 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5199              		.cfi_def_cfa_offset 32
 5200              		.cfi_offset 3, -32
 5201              		.cfi_offset 4, -28
 5202              		.cfi_offset 5, -24
 5203              		.cfi_offset 6, -20
 5204              		.cfi_offset 7, -16
 5205              		.cfi_offset 8, -12
 5206              		.cfi_offset 9, -8
 5207              		.cfi_offset 14, -4
1597:source\fatfs/ff.c **** #endif
 5208              		.loc 1 1597 19 view .LVU1883
 5209 0004 FF26     		movs	r6, #255
1589:source\fatfs/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
 5210              		.loc 1 1589 9 view .LVU1884
 5211 0006 0746     		mov	r7, r0
1597:source\fatfs/ff.c **** #endif
 5212              		.loc 1 1597 7 view .LVU1885
 5213 0008 3546     		mov	r5, r6
1600:source\fatfs/ff.c **** 	while (dp->sect) {
 5214              		.loc 1 1600 6 view .LVU1886
 5215 000a 0424     		movs	r4, #4
 5216              	.LVL602:
 5217              	.L580:
1601:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
 5218              		.loc 1 1601 9 is_stmt 1 view .LVU1887
1601:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
 5219              		.loc 1 1601 11 is_stmt 0 view .LVU1888
 5220 000c D7F81012 		ldr	r1, [r7, #528]
1601:source\fatfs/ff.c **** 		res = move_window(dp->fs, dp->sect);
 5221              		.loc 1 1601 9 view .LVU1889
 5222 0010 19B9     		cbnz	r1, .L598
 5223              	.LVL603:
1634:source\fatfs/ff.c **** 
 5224              		.loc 1 1634 2 is_stmt 1 view .LVU1890
1634:source\fatfs/ff.c **** 
 5225              		.loc 1 1634 5 is_stmt 0 view .LVU1891
 5226 0012 002C     		cmp	r4, #0
 5227 0014 6FD0     		beq	.L611
 5228              	.LVL604:
 5229              	.L612:
1634:source\fatfs/ff.c **** 
 5230              		.loc 1 1634 5 view .LVU1892
 5231 0016 0424     		movs	r4, #4
 5232 0018 59E0     		b	.L599
 5233              	.L598:
1602:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 5234              		.loc 1 1602 3 is_stmt 1 view .LVU1893
1602:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 5235              		.loc 1 1602 9 is_stmt 0 view .LVU1894
 5236 001a D7F80002 		ldr	r0, [r7, #512]
 5237 001e FFF7FEFF 		bl	move_window
 5238              	.LVL605:
1603:source\fatfs/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
 5239              		.loc 1 1603 3 is_stmt 1 view .LVU1895
1603:source\fatfs/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
 5240              		.loc 1 1603 6 is_stmt 0 view .LVU1896
 5241 0022 0446     		mov	r4, r0
 5242 0024 0028     		cmp	r0, #0
 5243 0026 52D1     		bne	.L599
1604:source\fatfs/ff.c **** 		c = dir[DIR_Name];
 5244              		.loc 1 1604 3 is_stmt 1 view .LVU1897
1604:source\fatfs/ff.c **** 		c = dir[DIR_Name];
 5245              		.loc 1 1604 7 is_stmt 0 view .LVU1898
 5246 0028 D7F81402 		ldr	r0, [r7, #532]
 5247              	.LVL606:
1605:source\fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 5248              		.loc 1 1605 3 is_stmt 1 view .LVU1899
1605:source\fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 5249              		.loc 1 1605 5 is_stmt 0 view .LVU1900
 5250 002c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 5251              	.LVL607:
1606:source\fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
 5252              		.loc 1 1606 3 is_stmt 1 view .LVU1901
1606:source\fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
 5253              		.loc 1 1606 6 is_stmt 0 view .LVU1902
 5254 002e 002B     		cmp	r3, #0
 5255 0030 F1D0     		beq	.L612
1607:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 5256              		.loc 1 1607 3 is_stmt 1 view .LVU1903
1609:source\fatfs/ff.c **** 			ord = 0xFF;
 5257              		.loc 1 1609 6 is_stmt 0 view .LVU1904
 5258 0032 E52B     		cmp	r3, #229
1607:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 5259              		.loc 1 1607 10 view .LVU1905
 5260 0034 C27A     		ldrb	r2, [r0, #11]	@ zero_extendqisi2
 5261              	.LVL608:
1609:source\fatfs/ff.c **** 			ord = 0xFF;
 5262              		.loc 1 1609 3 is_stmt 1 view .LVU1906
1609:source\fatfs/ff.c **** 			ord = 0xFF;
 5263              		.loc 1 1609 6 is_stmt 0 view .LVU1907
 5264 0036 50D0     		beq	.L605
1609:source\fatfs/ff.c **** 			ord = 0xFF;
 5265              		.loc 1 1609 17 view .LVU1908
 5266 0038 2E2B     		cmp	r3, #46
 5267 003a 4ED0     		beq	.L605
1607:source\fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 5268              		.loc 1 1607 5 view .LVU1909
 5269 003c 02F03F01 		and	r1, r2, #63
1609:source\fatfs/ff.c **** 			ord = 0xFF;
 5270              		.loc 1 1609 57 view .LVU1910
 5271 0040 02F01F02 		and	r2, r2, #31
1609:source\fatfs/ff.c **** 			ord = 0xFF;
 5272              		.loc 1 1609 45 view .LVU1911
 5273 0044 082A     		cmp	r2, #8
 5274 0046 48D0     		beq	.L605
1612:source\fatfs/ff.c **** 				if (c & LLEF) {			/* Is it start of LFN sequence? */
 5275              		.loc 1 1612 4 is_stmt 1 view .LVU1912
1612:source\fatfs/ff.c **** 				if (c & LLEF) {			/* Is it start of LFN sequence? */
 5276              		.loc 1 1612 7 is_stmt 0 view .LVU1913
 5277 0048 0F29     		cmp	r1, #15
 5278 004a 4BD1     		bne	.L583
1613:source\fatfs/ff.c **** 					sum = dir[LDIR_Chksum];
 5279              		.loc 1 1613 5 is_stmt 1 view .LVU1914
1613:source\fatfs/ff.c **** 					sum = dir[LDIR_Chksum];
 5280              		.loc 1 1613 8 is_stmt 0 view .LVU1915
 5281 004c 5906     		lsls	r1, r3, #25
 5282 004e 42D5     		bpl	.L584
1614:source\fatfs/ff.c **** 					c &= ~LLEF; ord = c;
 5283              		.loc 1 1614 6 is_stmt 1 view .LVU1916
1615:source\fatfs/ff.c **** 					dp->lfn_idx = dp->index;
 5284              		.loc 1 1615 8 is_stmt 0 view .LVU1917
 5285 0050 03F0BF05 		and	r5, r3, #191
 5286              	.LVL609:
1616:source\fatfs/ff.c **** 				}
 5287              		.loc 1 1616 18 view .LVU1918
 5288 0054 B7F80632 		ldrh	r3, [r7, #518]
 5289              	.LVL610:
1614:source\fatfs/ff.c **** 					c &= ~LLEF; ord = c;
 5290              		.loc 1 1614 10 view .LVU1919
 5291 0058 467B     		ldrb	r6, [r0, #13]	@ zero_extendqisi2
 5292              	.LVL611:
1615:source\fatfs/ff.c **** 					dp->lfn_idx = dp->index;
 5293              		.loc 1 1615 6 is_stmt 1 view .LVU1920
1615:source\fatfs/ff.c **** 					dp->lfn_idx = dp->index;
 5294              		.loc 1 1615 18 view .LVU1921
1616:source\fatfs/ff.c **** 				}
 5295              		.loc 1 1616 6 view .LVU1922
1616:source\fatfs/ff.c **** 				}
 5296              		.loc 1 1616 18 is_stmt 0 view .LVU1923
 5297 005a A7F82432 		strh	r3, [r7, #548]	@ movhi
 5298              	.LVL612:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5299              		.loc 1 1619 5 is_stmt 1 view .LVU1924
 5300              	.L585:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5301              		.loc 1 1619 21 is_stmt 0 view .LVU1925
 5302 005e 437B     		ldrb	r3, [r0, #13]	@ zero_extendqisi2
 5303 0060 B342     		cmp	r3, r6
 5304 0062 3AD1     		bne	.L605
 5305              	.LBB91:
 5306              	.LBB92:
1387:source\fatfs/ff.c **** 
 5307              		.loc 1 1387 22 view .LVU1926
 5308 0064 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 5309              	.LBE92:
 5310              	.LBE91:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5311              		.loc 1 1619 51 view .LVU1927
 5312 0066 D7F82042 		ldr	r4, [r7, #544]
 5313              	.LVL613:
 5314              	.LBB95:
 5315              	.LBI91:
1378:source\fatfs/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
 5316              		.loc 1 1378 5 is_stmt 1 view .LVU1928
 5317              	.LBB93:
1383:source\fatfs/ff.c **** 	WCHAR wc, uc;
 5318              		.loc 1 1383 2 view .LVU1929
1384:source\fatfs/ff.c **** 
 5319              		.loc 1 1384 2 view .LVU1930
1387:source\fatfs/ff.c **** 
 5320              		.loc 1 1387 2 view .LVU1931
 5321 006a DFF890C0 		ldr	ip, .L613
1387:source\fatfs/ff.c **** 
 5322              		.loc 1 1387 22 is_stmt 0 view .LVU1932
 5323 006e 03F03F03 		and	r3, r3, #63
1387:source\fatfs/ff.c **** 
 5324              		.loc 1 1387 30 view .LVU1933
 5325 0072 013B     		subs	r3, r3, #1
1387:source\fatfs/ff.c **** 
 5326              		.loc 1 1387 35 view .LVU1934
 5327 0074 0D22     		movs	r2, #13
 5328 0076 5343     		muls	r3, r2, r3
 5329              	.LVL614:
1389:source\fatfs/ff.c **** 	do {
 5330              		.loc 1 1389 2 is_stmt 1 view .LVU1935
1389:source\fatfs/ff.c **** 	do {
 5331              		.loc 1 1389 9 view .LVU1936
1389:source\fatfs/ff.c **** 	do {
 5332              		.loc 1 1389 12 is_stmt 0 view .LVU1937
 5333 0078 4FF0010E 		mov	lr, #1
1389:source\fatfs/ff.c **** 	do {
 5334              		.loc 1 1389 4 view .LVU1938
 5335 007c 0021     		movs	r1, #0
1396:source\fatfs/ff.c **** 		}
 5336              		.loc 1 1396 7 view .LVU1939
 5337 007e 4FF6FF78 		movw	r8, #65535
 5338              	.LVL615:
 5339              	.L592:
1390:source\fatfs/ff.c **** 		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 5340              		.loc 1 1390 2 is_stmt 1 view .LVU1940
1391:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 5341              		.loc 1 1391 3 view .LVU1941
1391:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 5342              		.loc 1 1391 8 is_stmt 0 view .LVU1942
 5343 0082 1CF8012B 		ldrb	r2, [ip], #1	@ zero_extendqisi2
 5344 0086 00EB0209 		add	r9, r0, r2
 5345 008a 825C     		ldrb	r2, [r0, r2]	@ zero_extendqisi2
 5346 008c 99F80190 		ldrb	r9, [r9, #1]	@ zero_extendqisi2
1391:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 5347              		.loc 1 1391 6 view .LVU1943
 5348 0090 42EA0922 		orr	r2, r2, r9, lsl #8
 5349              	.LVL616:
1392:source\fatfs/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 5350              		.loc 1 1392 3 is_stmt 1 view .LVU1944
1392:source\fatfs/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 5351              		.loc 1 1392 6 is_stmt 0 view .LVU1945
 5352 0094 BEF1000F 		cmp	lr, #0
 5353 0098 21D0     		beq	.L587
1393:source\fatfs/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
 5354              		.loc 1 1393 4 is_stmt 1 view .LVU1946
1393:source\fatfs/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
 5355              		.loc 1 1393 7 is_stmt 0 view .LVU1947
 5356 009a FE2B     		cmp	r3, #254
 5357 009c 1DD8     		bhi	.L605
1394:source\fatfs/ff.c **** 		} else {
 5358              		.loc 1 1394 4 is_stmt 1 view .LVU1948
 5359              	.LVL617:
1394:source\fatfs/ff.c **** 		} else {
 5360              		.loc 1 1394 16 is_stmt 0 view .LVU1949
 5361 009e 24F81320 		strh	r2, [r4, r3, lsl #1]	@ movhi
1391:source\fatfs/ff.c **** 		if (wc) {	/* Last character has not been processed */
 5362              		.loc 1 1391 6 view .LVU1950
 5363 00a2 9646     		mov	lr, r2
1394:source\fatfs/ff.c **** 		} else {
 5364              		.loc 1 1394 12 view .LVU1951
 5365 00a4 0133     		adds	r3, r3, #1
 5366              	.LVL618:
 5367              	.L590:
1398:source\fatfs/ff.c **** 
 5368              		.loc 1 1398 15 is_stmt 1 view .LVU1952
 5369 00a6 0131     		adds	r1, r1, #1
 5370              	.LVL619:
1398:source\fatfs/ff.c **** 
 5371              		.loc 1 1398 15 is_stmt 0 view .LVU1953
 5372 00a8 0D29     		cmp	r1, #13
 5373 00aa EAD1     		bne	.L592
1400:source\fatfs/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 5374              		.loc 1 1400 2 is_stmt 1 view .LVU1954
1400:source\fatfs/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 5375              		.loc 1 1400 5 is_stmt 0 view .LVU1955
 5376 00ac 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 5377              	.LVL620:
1400:source\fatfs/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 5378              		.loc 1 1400 5 view .LVU1956
 5379 00ae 5206     		lsls	r2, r2, #25
 5380 00b0 04D5     		bpl	.L593
1401:source\fatfs/ff.c **** 		lfnbuf[i] = 0;
 5381              		.loc 1 1401 3 is_stmt 1 view .LVU1957
1401:source\fatfs/ff.c **** 		lfnbuf[i] = 0;
 5382              		.loc 1 1401 6 is_stmt 0 view .LVU1958
 5383 00b2 FE2B     		cmp	r3, #254
 5384 00b4 11D8     		bhi	.L605
1402:source\fatfs/ff.c **** 	}
 5385              		.loc 1 1402 3 is_stmt 1 view .LVU1959
1402:source\fatfs/ff.c **** 	}
 5386              		.loc 1 1402 13 is_stmt 0 view .LVU1960
 5387 00b6 0022     		movs	r2, #0
 5388 00b8 24F81320 		strh	r2, [r4, r3, lsl #1]	@ movhi
 5389              	.LVL621:
 5390              	.L593:
1402:source\fatfs/ff.c **** 	}
 5391              		.loc 1 1402 13 view .LVU1961
 5392              	.LBE93:
 5393              	.LBE95:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5394              		.loc 1 1619 9 view .LVU1962
 5395 00bc 013D     		subs	r5, r5, #1
 5396              	.LVL622:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5397              		.loc 1 1619 9 view .LVU1963
 5398 00be EDB2     		uxtb	r5, r5
 5399              	.LVL623:
 5400              	.L582:
1630:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 5401              		.loc 1 1630 3 is_stmt 1 view .LVU1964
1630:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 5402              		.loc 1 1630 9 is_stmt 0 view .LVU1965
 5403 00c0 0021     		movs	r1, #0
 5404 00c2 3846     		mov	r0, r7
 5405              	.LVL624:
1630:source\fatfs/ff.c **** 		if (res != FR_OK) break;
 5406              		.loc 1 1630 9 view .LVU1966
 5407 00c4 FFF7FEFF 		bl	dir_next
 5408              	.LVL625:
1631:source\fatfs/ff.c **** 	}
 5409              		.loc 1 1631 3 is_stmt 1 view .LVU1967
1631:source\fatfs/ff.c **** 	}
 5410              		.loc 1 1631 6 is_stmt 0 view .LVU1968
 5411 00c8 0446     		mov	r4, r0
 5412 00ca 0028     		cmp	r0, #0
 5413 00cc 9ED0     		beq	.L580
 5414              	.LVL626:
 5415              	.L599:
1634:source\fatfs/ff.c **** 
 5416              		.loc 1 1634 20 is_stmt 1 view .LVU1969
1634:source\fatfs/ff.c **** 
 5417              		.loc 1 1634 29 is_stmt 0 view .LVU1970
 5418 00ce 0023     		movs	r3, #0
 5419 00d0 C7F81032 		str	r3, [r7, #528]
 5420              	.LVL627:
1636:source\fatfs/ff.c **** }
 5421              		.loc 1 1636 2 is_stmt 1 view .LVU1971
1636:source\fatfs/ff.c **** }
 5422              		.loc 1 1636 9 is_stmt 0 view .LVU1972
 5423 00d4 0FE0     		b	.L611
 5424              	.LVL628:
 5425              	.L584:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5426              		.loc 1 1619 5 is_stmt 1 view .LVU1973
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5427              		.loc 1 1619 9 is_stmt 0 view .LVU1974
 5428 00d6 AB42     		cmp	r3, r5
 5429 00d8 C1D0     		beq	.L585
 5430              	.LVL629:
 5431              	.L605:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5432              		.loc 1 1619 9 view .LVU1975
 5433 00da FF25     		movs	r5, #255
 5434              	.LVL630:
1619:source\fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 5435              		.loc 1 1619 9 view .LVU1976
 5436 00dc F0E7     		b	.L582
 5437              	.LVL631:
 5438              	.L587:
 5439              	.LBB96:
 5440              	.LBB94:
1396:source\fatfs/ff.c **** 		}
 5441              		.loc 1 1396 4 is_stmt 1 view .LVU1977
1396:source\fatfs/ff.c **** 		}
 5442              		.loc 1 1396 7 is_stmt 0 view .LVU1978
 5443 00de 4245     		cmp	r2, r8
 5444 00e0 E1D0     		beq	.L590
 5445 00e2 FAE7     		b	.L605
 5446              	.LVL632:
 5447              	.L583:
1396:source\fatfs/ff.c **** 		}
 5448              		.loc 1 1396 7 view .LVU1979
 5449              	.LBE94:
 5450              	.LBE96:
1621:source\fatfs/ff.c **** 					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 5451              		.loc 1 1621 5 is_stmt 1 view .LVU1980
1621:source\fatfs/ff.c **** 					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 5452              		.loc 1 1621 8 is_stmt 0 view .LVU1981
 5453 00e4 1DB9     		cbnz	r5, .L595
1621:source\fatfs/ff.c **** 					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 5454              		.loc 1 1621 23 view .LVU1982
 5455 00e6 FFF7FEFF 		bl	sum_sfn
 5456              	.LVL633:
1621:source\fatfs/ff.c **** 					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 5457              		.loc 1 1621 13 view .LVU1983
 5458 00ea B042     		cmp	r0, r6
 5459 00ec 03D0     		beq	.L611
 5460              	.L595:
1622:source\fatfs/ff.c **** 				break;
 5461              		.loc 1 1622 6 is_stmt 1 view .LVU1984
1622:source\fatfs/ff.c **** 				break;
 5462              		.loc 1 1622 18 is_stmt 0 view .LVU1985
 5463 00ee 4FF6FF73 		movw	r3, #65535
 5464 00f2 A7F82432 		strh	r3, [r7, #548]	@ movhi
 5465              	.LVL634:
1634:source\fatfs/ff.c **** 
 5466              		.loc 1 1634 2 is_stmt 1 view .LVU1986
 5467              	.L611:
1637:source\fatfs/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
 5468              		.loc 1 1637 1 is_stmt 0 view .LVU1987
 5469 00f6 2046     		mov	r0, r4
 5470 00f8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5471              	.LVL635:
 5472              	.L614:
1637:source\fatfs/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
 5473              		.loc 1 1637 1 view .LVU1988
 5474              		.align	2
 5475              	.L613:
 5476 00fc 00000000 		.word	LfnOfs
 5477              		.cfi_endproc
 5478              	.LFE197:
 5480              		.section	.text.remove_chain,"ax",%progbits
 5481              		.align	1
 5482              		.syntax unified
 5483              		.thumb
 5484              		.thumb_func
 5486              	remove_chain:
 5487              	.LVL636:
 5488              	.LFB138:
1014:source\fatfs/ff.c **** 	FRESULT res;
 5489              		.loc 1 1014 1 is_stmt 1 view -0
 5490              		.cfi_startproc
 5491              		@ args = 0, pretend = 0, frame = 0
 5492              		@ frame_needed = 0, uses_anonymous_args = 0
1015:source\fatfs/ff.c **** 	DWORD nxt;
 5493              		.loc 1 1015 2 view .LVU1990
1016:source\fatfs/ff.c **** #if _USE_TRIM
 5494              		.loc 1 1016 2 view .LVU1991
1021:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 5495              		.loc 1 1021 2 view .LVU1992
1021:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 5496              		.loc 1 1021 5 is_stmt 0 view .LVU1993
 5497 0000 0129     		cmp	r1, #1
1014:source\fatfs/ff.c **** 	FRESULT res;
 5498              		.loc 1 1014 1 view .LVU1994
 5499 0002 70B5     		push	{r4, r5, r6, lr}
 5500              		.cfi_def_cfa_offset 16
 5501              		.cfi_offset 4, -16
 5502              		.cfi_offset 5, -12
 5503              		.cfi_offset 6, -8
 5504              		.cfi_offset 14, -4
1014:source\fatfs/ff.c **** 	FRESULT res;
 5505              		.loc 1 1014 1 view .LVU1995
 5506 0004 0446     		mov	r4, r0
 5507 0006 0D46     		mov	r5, r1
1021:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 5508              		.loc 1 1021 5 view .LVU1996
 5509 0008 01D8     		bhi	.L616
 5510              	.LVL637:
 5511              	.L618:
1022:source\fatfs/ff.c **** 
 5512              		.loc 1 1022 7 view .LVU1997
 5513 000a 0220     		movs	r0, #2
 5514              	.L617:
 5515              	.LVL638:
1051:source\fatfs/ff.c **** }
 5516              		.loc 1 1051 2 is_stmt 1 view .LVU1998
1052:source\fatfs/ff.c **** #endif
 5517              		.loc 1 1052 1 is_stmt 0 view .LVU1999
 5518 000c 70BD     		pop	{r4, r5, r6, pc}
 5519              	.LVL639:
 5520              	.L616:
1021:source\fatfs/ff.c **** 		res = FR_INT_ERR;
 5521              		.loc 1 1021 15 discriminator 1 view .LVU2000
 5522 000e D0F81432 		ldr	r3, [r0, #532]
 5523 0012 8B42     		cmp	r3, r1
 5524 0014 F9D9     		bls	.L618
 5525              	.LVL640:
 5526              	.L619:
1026:source\fatfs/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 5527              		.loc 1 1026 15 is_stmt 1 view .LVU2001
 5528 0016 D4F81432 		ldr	r3, [r4, #532]
 5529 001a AB42     		cmp	r3, r5
 5530 001c 05D9     		bls	.L623
1027:source\fatfs/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 5531              		.loc 1 1027 4 view .LVU2002
1027:source\fatfs/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 5532              		.loc 1 1027 10 is_stmt 0 view .LVU2003
 5533 001e 2946     		mov	r1, r5
 5534 0020 2046     		mov	r0, r4
 5535 0022 FFF7FEFF 		bl	get_fat
 5536              	.LVL641:
1028:source\fatfs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 5537              		.loc 1 1028 4 is_stmt 1 view .LVU2004
1028:source\fatfs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 5538              		.loc 1 1028 7 is_stmt 0 view .LVU2005
 5539 0026 0646     		mov	r6, r0
 5540 0028 08B9     		cbnz	r0, .L620
 5541              	.LVL642:
 5542              	.L623:
1022:source\fatfs/ff.c **** 
 5543              		.loc 1 1022 7 view .LVU2006
 5544 002a 0020     		movs	r0, #0
 5545 002c EEE7     		b	.L617
 5546              	.LVL643:
 5547              	.L620:
1029:source\fatfs/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 5548              		.loc 1 1029 4 is_stmt 1 view .LVU2007
1029:source\fatfs/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 5549              		.loc 1 1029 7 is_stmt 0 view .LVU2008
 5550 002e 0128     		cmp	r0, #1
 5551 0030 EBD0     		beq	.L618
1030:source\fatfs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 5552              		.loc 1 1030 4 is_stmt 1 view .LVU2009
1030:source\fatfs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 5553              		.loc 1 1030 7 is_stmt 0 view .LVU2010
 5554 0032 411C     		adds	r1, r0, #1
 5555 0034 15D0     		beq	.L624
1031:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 5556              		.loc 1 1031 4 is_stmt 1 view .LVU2011
1031:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 5557              		.loc 1 1031 10 is_stmt 0 view .LVU2012
 5558 0036 0022     		movs	r2, #0
 5559 0038 2946     		mov	r1, r5
 5560 003a 2046     		mov	r0, r4
 5561              	.LVL644:
1031:source\fatfs/ff.c **** 			if (res != FR_OK) break;
 5562              		.loc 1 1031 10 view .LVU2013
 5563 003c FFF7FEFF 		bl	put_fat
 5564              	.LVL645:
1032:source\fatfs/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 5565              		.loc 1 1032 4 is_stmt 1 view .LVU2014
1032:source\fatfs/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 5566              		.loc 1 1032 7 is_stmt 0 view .LVU2015
 5567 0040 0028     		cmp	r0, #0
 5568 0042 E3D1     		bne	.L617
1033:source\fatfs/ff.c **** 				fs->free_clust++;
 5569              		.loc 1 1033 4 is_stmt 1 view .LVU2016
1033:source\fatfs/ff.c **** 				fs->free_clust++;
 5570              		.loc 1 1033 10 is_stmt 0 view .LVU2017
 5571 0044 D4F81032 		ldr	r3, [r4, #528]
1033:source\fatfs/ff.c **** 				fs->free_clust++;
 5572              		.loc 1 1033 7 view .LVU2018
 5573 0048 5A1C     		adds	r2, r3, #1
 5574 004a 08D0     		beq	.L621
1034:source\fatfs/ff.c **** 				fs->fsi_flag |= 1;
 5575              		.loc 1 1034 5 is_stmt 1 view .LVU2019
1034:source\fatfs/ff.c **** 				fs->fsi_flag |= 1;
 5576              		.loc 1 1034 19 is_stmt 0 view .LVU2020
 5577 004c 0133     		adds	r3, r3, #1
 5578 004e C4F81032 		str	r3, [r4, #528]
1035:source\fatfs/ff.c **** 			}
 5579              		.loc 1 1035 5 is_stmt 1 view .LVU2021
1035:source\fatfs/ff.c **** 			}
 5580              		.loc 1 1035 18 is_stmt 0 view .LVU2022
 5581 0052 94F80532 		ldrb	r3, [r4, #517]	@ zero_extendqisi2
 5582 0056 43F00103 		orr	r3, r3, #1
 5583 005a 84F80532 		strb	r3, [r4, #517]
 5584              	.L621:
1014:source\fatfs/ff.c **** 	FRESULT res;
 5585              		.loc 1 1014 1 view .LVU2023
 5586 005e 3546     		mov	r5, r6
 5587              	.LVL646:
1014:source\fatfs/ff.c **** 	FRESULT res;
 5588              		.loc 1 1014 1 view .LVU2024
 5589 0060 D9E7     		b	.L619
 5590              	.LVL647:
 5591              	.L624:
1030:source\fatfs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 5592              		.loc 1 1030 33 view .LVU2025
 5593 0062 0120     		movs	r0, #1
 5594              	.LVL648:
1030:source\fatfs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 5595              		.loc 1 1030 33 view .LVU2026
 5596 0064 D2E7     		b	.L617
 5597              		.cfi_endproc
 5598              	.LFE138:
 5600              		.section	.text.f_mount,"ax",%progbits
 5601              		.align	1
 5602              		.global	f_mount
 5603              		.syntax unified
 5604              		.thumb
 5605              		.thumb_func
 5607              	f_mount:
 5608              	.LVL649:
 5609              	.LFB162:
2459:source\fatfs/ff.c **** 
2460:source\fatfs/ff.c **** 
2461:source\fatfs/ff.c **** 
2462:source\fatfs/ff.c **** 
2463:source\fatfs/ff.c **** /*--------------------------------------------------------------------------
2464:source\fatfs/ff.c **** 
2465:source\fatfs/ff.c ****    Public Functions
2466:source\fatfs/ff.c **** 
2467:source\fatfs/ff.c **** --------------------------------------------------------------------------*/
2468:source\fatfs/ff.c **** 
2469:source\fatfs/ff.c **** 
2470:source\fatfs/ff.c **** 
2471:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2472:source\fatfs/ff.c **** /* Mount/Unmount a Logical Drive                                         */
2473:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2474:source\fatfs/ff.c **** 
2475:source\fatfs/ff.c **** FRESULT f_mount (
2476:source\fatfs/ff.c **** 	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
2477:source\fatfs/ff.c **** 	const TCHAR* path,		/* Logical drive number to be mounted/unmounted */
2478:source\fatfs/ff.c **** 	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
2479:source\fatfs/ff.c **** )
2480:source\fatfs/ff.c **** {
 5610              		.loc 1 2480 1 is_stmt 1 view -0
 5611              		.cfi_startproc
 5612              		@ args = 0, pretend = 0, frame = 16
 5613              		@ frame_needed = 0, uses_anonymous_args = 0
2481:source\fatfs/ff.c **** 	FATFS *cfs;
 5614              		.loc 1 2481 2 view .LVU2028
2482:source\fatfs/ff.c **** 	int vol;
 5615              		.loc 1 2482 2 view .LVU2029
2483:source\fatfs/ff.c **** 	FRESULT res;
 5616              		.loc 1 2483 2 view .LVU2030
2484:source\fatfs/ff.c **** 	const TCHAR *rp = path;
 5617              		.loc 1 2484 2 view .LVU2031
2480:source\fatfs/ff.c **** 	FATFS *cfs;
 5618              		.loc 1 2480 1 is_stmt 0 view .LVU2032
 5619 0000 30B5     		push	{r4, r5, lr}
 5620              		.cfi_def_cfa_offset 12
 5621              		.cfi_offset 4, -12
 5622              		.cfi_offset 5, -8
 5623              		.cfi_offset 14, -4
 5624 0002 85B0     		sub	sp, sp, #20
 5625              		.cfi_def_cfa_offset 32
2480:source\fatfs/ff.c **** 	FATFS *cfs;
 5626              		.loc 1 2480 1 view .LVU2033
 5627 0004 CDE90010 		strd	r1, r0, [sp]
2485:source\fatfs/ff.c **** 
2486:source\fatfs/ff.c **** 
2487:source\fatfs/ff.c **** 	vol = get_ldnumber(&rp);
 5628              		.loc 1 2487 8 view .LVU2034
 5629 0008 03A8     		add	r0, sp, #12
 5630              	.LVL650:
2484:source\fatfs/ff.c **** 
 5631              		.loc 1 2484 15 view .LVU2035
 5632 000a 0391     		str	r1, [sp, #12]
 5633              		.loc 1 2487 2 is_stmt 1 view .LVU2036
2480:source\fatfs/ff.c **** 	FATFS *cfs;
 5634              		.loc 1 2480 1 is_stmt 0 view .LVU2037
 5635 000c 1446     		mov	r4, r2
 5636              		.loc 1 2487 8 view .LVU2038
 5637 000e FFF7FEFF 		bl	get_ldnumber
 5638              	.LVL651:
2488:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 5639              		.loc 1 2488 2 is_stmt 1 view .LVU2039
 5640              		.loc 1 2488 5 is_stmt 0 view .LVU2040
 5641 0012 011E     		subs	r1, r0, #0
 5642 0014 1BDB     		blt	.L637
2489:source\fatfs/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 5643              		.loc 1 2489 2 is_stmt 1 view .LVU2041
 5644              		.loc 1 2489 6 is_stmt 0 view .LVU2042
 5645 0016 0F4D     		ldr	r5, .L641
 5646 0018 55F82100 		ldr	r0, [r5, r1, lsl #2]
 5647              	.LVL652:
2490:source\fatfs/ff.c **** 
2491:source\fatfs/ff.c **** 	if (cfs) {
 5648              		.loc 1 2491 2 is_stmt 1 view .LVU2043
 5649              		.loc 1 2491 5 is_stmt 0 view .LVU2044
 5650 001c 20B1     		cbz	r0, .L633
2492:source\fatfs/ff.c **** #if _FS_LOCK
2493:source\fatfs/ff.c **** 		clear_lock(cfs);
 5651              		.loc 1 2493 3 is_stmt 1 view .LVU2045
 5652 001e FFF7FEFF 		bl	clear_lock
 5653              	.LVL653:
2494:source\fatfs/ff.c **** #endif
2495:source\fatfs/ff.c **** #if _FS_REENTRANT						/* Discard sync object of the current volume */
2496:source\fatfs/ff.c **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
2497:source\fatfs/ff.c **** #endif
2498:source\fatfs/ff.c **** 		cfs->fs_type = 0;				/* Clear old fs object */
 5654              		.loc 1 2498 3 view .LVU2046
 5655              		.loc 1 2498 16 is_stmt 0 view .LVU2047
 5656 0022 0023     		movs	r3, #0
 5657 0024 80F80032 		strb	r3, [r0, #512]
 5658              	.L633:
2499:source\fatfs/ff.c **** 	}
2500:source\fatfs/ff.c **** 
2501:source\fatfs/ff.c **** 	if (fs) {
 5659              		.loc 1 2501 2 is_stmt 1 view .LVU2048
 5660              		.loc 1 2501 6 is_stmt 0 view .LVU2049
 5661 0028 019B     		ldr	r3, [sp, #4]
 5662              		.loc 1 2501 5 view .LVU2050
 5663 002a 23B9     		cbnz	r3, .L634
2502:source\fatfs/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
2503:source\fatfs/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
2504:source\fatfs/ff.c **** 		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
2505:source\fatfs/ff.c **** #endif
2506:source\fatfs/ff.c **** 	}
2507:source\fatfs/ff.c **** 	FatFs[vol] = fs;					/* Register new fs object */
 5664              		.loc 1 2507 2 is_stmt 1 view .LVU2051
 5665              		.loc 1 2507 13 is_stmt 0 view .LVU2052
 5666 002c 45F82130 		str	r3, [r5, r1, lsl #2]
2508:source\fatfs/ff.c **** 
2509:source\fatfs/ff.c **** 	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 5667              		.loc 1 2509 2 is_stmt 1 view .LVU2053
 5668              	.L635:
 5669              		.loc 1 2509 30 is_stmt 0 view .LVU2054
 5670 0030 0020     		movs	r0, #0
 5671              	.LVL654:
 5672              	.L632:
2510:source\fatfs/ff.c **** 
2511:source\fatfs/ff.c **** 	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
2512:source\fatfs/ff.c **** 	LEAVE_FF(fs, res);
2513:source\fatfs/ff.c **** }
 5673              		.loc 1 2513 1 view .LVU2055
 5674 0032 05B0     		add	sp, sp, #20
 5675              		.cfi_remember_state
 5676              		.cfi_def_cfa_offset 12
 5677              		@ sp needed
 5678 0034 30BD     		pop	{r4, r5, pc}
 5679              	.LVL655:
 5680              	.L634:
 5681              		.cfi_restore_state
2502:source\fatfs/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
 5682              		.loc 1 2502 3 is_stmt 1 view .LVU2056
2502:source\fatfs/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
 5683              		.loc 1 2502 15 is_stmt 0 view .LVU2057
 5684 0036 0022     		movs	r2, #0
2509:source\fatfs/ff.c **** 
 5685              		.loc 1 2509 10 view .LVU2058
 5686 0038 012C     		cmp	r4, #1
2507:source\fatfs/ff.c **** 
 5687              		.loc 1 2507 13 view .LVU2059
 5688 003a 45F82130 		str	r3, [r5, r1, lsl #2]
2502:source\fatfs/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
 5689              		.loc 1 2502 15 view .LVU2060
 5690 003e 83F80022 		strb	r2, [r3, #512]
2507:source\fatfs/ff.c **** 
 5691              		.loc 1 2507 2 is_stmt 1 view .LVU2061
2509:source\fatfs/ff.c **** 
 5692              		.loc 1 2509 2 view .LVU2062
2509:source\fatfs/ff.c **** 
 5693              		.loc 1 2509 10 is_stmt 0 view .LVU2063
 5694 0042 F5D1     		bne	.L635
2511:source\fatfs/ff.c **** 	LEAVE_FF(fs, res);
 5695              		.loc 1 2511 2 is_stmt 1 view .LVU2064
2511:source\fatfs/ff.c **** 	LEAVE_FF(fs, res);
 5696              		.loc 1 2511 8 is_stmt 0 view .LVU2065
 5697 0044 6946     		mov	r1, sp
 5698              	.LVL656:
2511:source\fatfs/ff.c **** 	LEAVE_FF(fs, res);
 5699              		.loc 1 2511 8 view .LVU2066
 5700 0046 01A8     		add	r0, sp, #4
 5701              	.LVL657:
2511:source\fatfs/ff.c **** 	LEAVE_FF(fs, res);
 5702              		.loc 1 2511 8 view .LVU2067
 5703 0048 FFF7FEFF 		bl	find_volume
 5704              	.LVL658:
2512:source\fatfs/ff.c **** }
 5705              		.loc 1 2512 2 is_stmt 1 view .LVU2068
 5706 004c F1E7     		b	.L632
 5707              	.LVL659:
 5708              	.L637:
2488:source\fatfs/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 5709              		.loc 1 2488 22 is_stmt 0 view .LVU2069
 5710 004e 0B20     		movs	r0, #11
 5711              	.LVL660:
2488:source\fatfs/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 5712              		.loc 1 2488 22 view .LVU2070
 5713 0050 EFE7     		b	.L632
 5714              	.L642:
 5715 0052 00BF     		.align	2
 5716              	.L641:
 5717 0054 00000000 		.word	FatFs
 5718              		.cfi_endproc
 5719              	.LFE162:
 5721              		.section	.text.f_open,"ax",%progbits
 5722              		.align	1
 5723              		.global	f_open
 5724              		.syntax unified
 5725              		.thumb
 5726              		.thumb_func
 5728              	f_open:
 5729              	.LVL661:
 5730              	.LFB163:
2514:source\fatfs/ff.c **** 
2515:source\fatfs/ff.c **** 
2516:source\fatfs/ff.c **** 
2517:source\fatfs/ff.c **** 
2518:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2519:source\fatfs/ff.c **** /* Open or Create a File                                                 */
2520:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2521:source\fatfs/ff.c **** 
2522:source\fatfs/ff.c **** FRESULT f_open (
2523:source\fatfs/ff.c **** 	FIL* fp,			/* Pointer to the blank file object */
2524:source\fatfs/ff.c **** 	const TCHAR* path,	/* Pointer to the file name */
2525:source\fatfs/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
2526:source\fatfs/ff.c **** )
2527:source\fatfs/ff.c **** {
 5731              		.loc 1 2527 1 is_stmt 1 view -0
 5732              		.cfi_startproc
 5733              		@ args = 0, pretend = 0, frame = 576
 5734              		@ frame_needed = 0, uses_anonymous_args = 0
2528:source\fatfs/ff.c **** 	FRESULT res;
 5735              		.loc 1 2528 2 view .LVU2072
2529:source\fatfs/ff.c **** 	DIR dj;
 5736              		.loc 1 2529 2 view .LVU2073
2530:source\fatfs/ff.c **** 	BYTE *dir;
 5737              		.loc 1 2530 2 view .LVU2074
2531:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 5738              		.loc 1 2531 2 view .LVU2075
 5739              		.loc 1 2531 2 view .LVU2076
2532:source\fatfs/ff.c **** #if !_FS_READONLY
2533:source\fatfs/ff.c **** 	DWORD dw, cl;
 5740              		.loc 1 2533 2 view .LVU2077
2534:source\fatfs/ff.c **** #endif
2535:source\fatfs/ff.c **** 
2536:source\fatfs/ff.c **** 
2537:source\fatfs/ff.c **** 	if (!fp) return FR_INVALID_OBJECT;
 5741              		.loc 1 2537 2 view .LVU2078
2527:source\fatfs/ff.c **** 	FRESULT res;
 5742              		.loc 1 2527 1 is_stmt 0 view .LVU2079
 5743 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 5744              		.cfi_def_cfa_offset 36
 5745              		.cfi_offset 4, -36
 5746              		.cfi_offset 5, -32
 5747              		.cfi_offset 6, -28
 5748              		.cfi_offset 7, -24
 5749              		.cfi_offset 8, -20
 5750              		.cfi_offset 9, -16
 5751              		.cfi_offset 10, -12
 5752              		.cfi_offset 11, -8
 5753              		.cfi_offset 14, -4
 5754 0004 ADF5117D 		sub	sp, sp, #580
 5755              		.cfi_def_cfa_offset 616
2527:source\fatfs/ff.c **** 	FRESULT res;
 5756              		.loc 1 2527 1 view .LVU2080
 5757 0008 9246     		mov	r10, r2
 5758 000a 0191     		str	r1, [sp, #4]
 5759              		.loc 1 2537 5 view .LVU2081
 5760 000c 0546     		mov	r5, r0
 5761 000e 0028     		cmp	r0, #0
 5762 0010 00F0EA80 		beq	.L656
2538:source\fatfs/ff.c **** 	fp->fs = 0;			/* Clear file object */
 5763              		.loc 1 2538 2 is_stmt 1 view .LVU2082
 5764              		.loc 1 2538 9 is_stmt 0 view .LVU2083
 5765 0014 0023     		movs	r3, #0
2539:source\fatfs/ff.c **** 
2540:source\fatfs/ff.c **** 	/* Get logical drive number */
2541:source\fatfs/ff.c **** #if !_FS_READONLY
2542:source\fatfs/ff.c **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
2543:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 5766              		.loc 1 2543 8 view .LVU2084
 5767 0016 02F01E0B 		and	fp, r2, #30
2538:source\fatfs/ff.c **** 	fp->fs = 0;			/* Clear file object */
 5768              		.loc 1 2538 9 view .LVU2085
 5769 001a C0F80032 		str	r3, [r0, #512]
2542:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 5770              		.loc 1 2542 2 is_stmt 1 view .LVU2086
 5771              	.LVL662:
 5772              		.loc 1 2543 2 view .LVU2087
 5773              		.loc 1 2543 8 is_stmt 0 view .LVU2088
 5774 001e 5A46     		mov	r2, fp
 5775              	.LVL663:
 5776              		.loc 1 2543 8 view .LVU2089
 5777 0020 01A9     		add	r1, sp, #4
 5778              	.LVL664:
 5779              		.loc 1 2543 8 view .LVU2090
 5780 0022 86A8     		add	r0, sp, #536
 5781              	.LVL665:
 5782              		.loc 1 2543 8 view .LVU2091
 5783 0024 FFF7FEFF 		bl	find_volume
 5784              	.LVL666:
2544:source\fatfs/ff.c **** #else
2545:source\fatfs/ff.c **** 	mode &= FA_READ;
2546:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
2547:source\fatfs/ff.c **** #endif
2548:source\fatfs/ff.c **** 	if (res == FR_OK) {
 5785              		.loc 1 2548 2 is_stmt 1 view .LVU2092
 5786              		.loc 1 2548 5 is_stmt 0 view .LVU2093
 5787 0028 0646     		mov	r6, r0
 5788 002a 0028     		cmp	r0, #0
 5789 002c 40F09B80 		bne	.L644
2549:source\fatfs/ff.c **** 		INIT_BUF(dj);
 5790              		.loc 1 2549 3 is_stmt 1 view .LVU2094
 5791 0030 4FF40070 		mov	r0, #512
 5792              	.LVL667:
 5793              		.loc 1 2549 3 is_stmt 0 view .LVU2095
 5794 0034 FFF7FEFF 		bl	ff_memalloc
 5795              	.LVL668:
 5796              		.loc 1 2549 3 is_stmt 1 view .LVU2096
 5797 0038 8046     		mov	r8, r0
 5798 003a 0028     		cmp	r0, #0
 5799 003c 00F0D680 		beq	.L657
 5800              		.loc 1 2549 3 is_stmt 0 discriminator 2 view .LVU2097
 5801 0040 8E90     		str	r0, [sp, #568]
 5802 0042 03AB     		add	r3, sp, #12
2550:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 5803              		.loc 1 2550 9 discriminator 2 view .LVU2098
 5804 0044 0199     		ldr	r1, [sp, #4]
2549:source\fatfs/ff.c **** 		INIT_BUF(dj);
 5805              		.loc 1 2549 3 discriminator 2 view .LVU2099
 5806 0046 8C93     		str	r3, [sp, #560]
 5807              		.loc 1 2550 9 discriminator 2 view .LVU2100
 5808 0048 06A8     		add	r0, sp, #24
 5809              	.LVL669:
 5810              		.loc 1 2550 9 discriminator 2 view .LVU2101
 5811 004a FFF7FEFF 		bl	follow_path
 5812              	.LVL670:
2542:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 5813              		.loc 1 2542 7 discriminator 2 view .LVU2102
 5814 004e 0AF01F07 		and	r7, r10, #31
2549:source\fatfs/ff.c **** 		INIT_BUF(dj);
 5815              		.loc 1 2549 3 is_stmt 1 discriminator 2 view .LVU2103
2549:source\fatfs/ff.c **** 		INIT_BUF(dj);
 5816              		.loc 1 2549 3 discriminator 2 view .LVU2104
2549:source\fatfs/ff.c **** 		INIT_BUF(dj);
 5817              		.loc 1 2549 15 discriminator 2 view .LVU2105
 5818              		.loc 1 2550 3 discriminator 2 view .LVU2106
 5819              	.LVL671:
2551:source\fatfs/ff.c **** 		dir = dj.dir;
 5820              		.loc 1 2551 3 discriminator 2 view .LVU2107
 5821              		.loc 1 2551 7 is_stmt 0 discriminator 2 view .LVU2108
 5822 0052 DDF82C92 		ldr	r9, [sp, #556]
 5823              	.LVL672:
2552:source\fatfs/ff.c **** #if !_FS_READONLY	/* R/W configuration */
2553:source\fatfs/ff.c **** 		if (res == FR_OK) {
 5824              		.loc 1 2553 3 is_stmt 1 discriminator 2 view .LVU2109
 5825              		.loc 1 2553 6 is_stmt 0 discriminator 2 view .LVU2110
 5826 0056 0446     		mov	r4, r0
 5827 0058 38B1     		cbz	r0, .L645
 5828              	.LVL673:
2554:source\fatfs/ff.c **** 			if (!dir)	/* Default directory itself */
2555:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
2556:source\fatfs/ff.c **** #if _FS_LOCK
2557:source\fatfs/ff.c **** 			else
2558:source\fatfs/ff.c **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2559:source\fatfs/ff.c **** #endif
2560:source\fatfs/ff.c **** 		}
2561:source\fatfs/ff.c **** 		/* Create or Open a file */
2562:source\fatfs/ff.c **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 5829              		.loc 1 2562 3 is_stmt 1 view .LVU2111
 5830              		.loc 1 2562 6 is_stmt 0 view .LVU2112
 5831 005a 1AF01C0F 		tst	r10, #28
 5832 005e 15D1     		bne	.L646
 5833              	.LVL674:
 5834              	.L647:
2563:source\fatfs/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
2564:source\fatfs/ff.c **** 				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
2565:source\fatfs/ff.c **** #if _FS_LOCK
2566:source\fatfs/ff.c **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2567:source\fatfs/ff.c **** #else
2568:source\fatfs/ff.c **** 					res = dir_register(&dj);
2569:source\fatfs/ff.c **** #endif
2570:source\fatfs/ff.c **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
2571:source\fatfs/ff.c **** 				dir = dj.dir;					/* New entry */
2572:source\fatfs/ff.c **** 			}
2573:source\fatfs/ff.c **** 			else {								/* Any object is already existing */
2574:source\fatfs/ff.c **** 				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2575:source\fatfs/ff.c **** 					res = FR_DENIED;
2576:source\fatfs/ff.c **** 				} else {
2577:source\fatfs/ff.c **** 					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
2578:source\fatfs/ff.c **** 						res = FR_EXIST;
2579:source\fatfs/ff.c **** 				}
2580:source\fatfs/ff.c **** 			}
2581:source\fatfs/ff.c **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2582:source\fatfs/ff.c **** 				dw = GET_FATTIME();				/* Created time */
2583:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_CrtTime, dw);
2584:source\fatfs/ff.c **** 				dir[DIR_Attr] = 0;				/* Reset attribute */
2585:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
2586:source\fatfs/ff.c **** 				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
2587:source\fatfs/ff.c **** 				st_clust(dir, 0);				/* cluster = 0 */
2588:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
2589:source\fatfs/ff.c **** 				if (cl) {						/* Remove the cluster chain if exist */
2590:source\fatfs/ff.c **** 					dw = dj.fs->winsect;
2591:source\fatfs/ff.c **** 					res = remove_chain(dj.fs, cl);
2592:source\fatfs/ff.c **** 					if (res == FR_OK) {
2593:source\fatfs/ff.c **** 						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
2594:source\fatfs/ff.c **** 						res = move_window(dj.fs, dw);
2595:source\fatfs/ff.c **** 					}
2596:source\fatfs/ff.c **** 				}
2597:source\fatfs/ff.c **** 			}
2598:source\fatfs/ff.c **** 		}
2599:source\fatfs/ff.c **** 		else {	/* Open an existing file */
2600:source\fatfs/ff.c **** 			if (res == FR_OK) {					/* Follow succeeded */
2601:source\fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
2602:source\fatfs/ff.c **** 					res = FR_NO_FILE;
2603:source\fatfs/ff.c **** 				} else {
2604:source\fatfs/ff.c **** 					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
2605:source\fatfs/ff.c **** 						res = FR_DENIED;
2606:source\fatfs/ff.c **** 				}
2607:source\fatfs/ff.c **** 			}
2608:source\fatfs/ff.c **** 		}
2609:source\fatfs/ff.c **** 		if (res == FR_OK) {
2610:source\fatfs/ff.c **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2611:source\fatfs/ff.c **** 				mode |= FA__WRITTEN;
2612:source\fatfs/ff.c **** 			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
2613:source\fatfs/ff.c **** 			fp->dir_ptr = dir;
2614:source\fatfs/ff.c **** #if _FS_LOCK
2615:source\fatfs/ff.c **** 			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2616:source\fatfs/ff.c **** 			if (!fp->lockid) res = FR_INT_ERR;
2617:source\fatfs/ff.c **** #endif
2618:source\fatfs/ff.c **** 		}
2619:source\fatfs/ff.c **** 
2620:source\fatfs/ff.c **** #else				/* R/O configuration */
2621:source\fatfs/ff.c **** 		if (res == FR_OK) {					/* Follow succeeded */
2622:source\fatfs/ff.c **** 			dir = dj.dir;
2623:source\fatfs/ff.c **** 			if (!dir) {						/* Current directory itself */
2624:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
2625:source\fatfs/ff.c **** 			} else {
2626:source\fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
2627:source\fatfs/ff.c **** 					res = FR_NO_FILE;
2628:source\fatfs/ff.c **** 			}
2629:source\fatfs/ff.c **** 		}
2630:source\fatfs/ff.c **** #endif
2631:source\fatfs/ff.c **** 		FREE_BUF();
 5835              		.loc 1 2631 3 is_stmt 1 view .LVU2113
 5836 0060 4046     		mov	r0, r8
 5837 0062 FFF7FEFF 		bl	ff_memfree
 5838              	.LVL675:
2632:source\fatfs/ff.c **** 
2633:source\fatfs/ff.c **** 		if (res == FR_OK) {
 5839              		.loc 1 2633 3 view .LVU2114
2631:source\fatfs/ff.c **** 
 5840              		.loc 1 2631 3 is_stmt 0 view .LVU2115
 5841 0066 2646     		mov	r6, r4
 5842 0068 7DE0     		b	.L644
 5843              	.LVL676:
 5844              	.L645:
2554:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
 5845              		.loc 1 2554 4 is_stmt 1 view .LVU2116
2554:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
 5846              		.loc 1 2554 7 is_stmt 0 view .LVU2117
 5847 006a B9F1000F 		cmp	r9, #0
 5848 006e 00F0B580 		beq	.L658
2558:source\fatfs/ff.c **** #endif
 5849              		.loc 1 2558 5 is_stmt 1 view .LVU2118
2558:source\fatfs/ff.c **** #endif
 5850              		.loc 1 2558 11 is_stmt 0 view .LVU2119
 5851 0072 BBF10001 		subs	r1, fp, #0
 5852 0076 18BF     		it	ne
 5853 0078 0121     		movne	r1, #1
 5854 007a 06A8     		add	r0, sp, #24
 5855              	.LVL677:
2558:source\fatfs/ff.c **** #endif
 5856              		.loc 1 2558 11 view .LVU2120
 5857 007c FFF7FEFF 		bl	chk_lock
 5858              	.LVL678:
2562:source\fatfs/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 5859              		.loc 1 2562 6 view .LVU2121
 5860 0080 1AF01C0F 		tst	r10, #28
2558:source\fatfs/ff.c **** #endif
 5861              		.loc 1 2558 11 view .LVU2122
 5862 0084 0446     		mov	r4, r0
 5863              	.LVL679:
2562:source\fatfs/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 5864              		.loc 1 2562 3 is_stmt 1 view .LVU2123
2562:source\fatfs/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 5865              		.loc 1 2562 6 is_stmt 0 view .LVU2124
 5866 0086 7DD0     		beq	.L648
2563:source\fatfs/ff.c **** 				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 5867              		.loc 1 2563 4 is_stmt 1 view .LVU2125
2563:source\fatfs/ff.c **** 				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 5868              		.loc 1 2563 7 is_stmt 0 view .LVU2126
 5869 0088 0028     		cmp	r0, #0
 5870 008a 71D0     		beq	.L649
 5871              	.LVL680:
 5872              	.L646:
2564:source\fatfs/ff.c **** #if _FS_LOCK
 5873              		.loc 1 2564 5 is_stmt 1 view .LVU2127
2564:source\fatfs/ff.c **** #if _FS_LOCK
 5874              		.loc 1 2564 8 is_stmt 0 view .LVU2128
 5875 008c 042C     		cmp	r4, #4
 5876 008e E7D1     		bne	.L647
 5877              	.LVL681:
 5878              	.LBB101:
 5879              	.LBB102:
 692:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 5880              		.loc 1 692 27 is_stmt 1 view .LVU2129
 692:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 5881              		.loc 1 692 38 is_stmt 0 view .LVU2130
 5882 0090 574B     		ldr	r3, .L682
 692:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 5883              		.loc 1 692 27 view .LVU2131
 5884 0092 1A68     		ldr	r2, [r3]
 5885 0094 1AB1     		cbz	r2, .L650
 692:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 5886              		.loc 1 692 44 is_stmt 1 view .LVU2132
 5887              	.LVL682:
 692:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 5888              		.loc 1 692 27 view .LVU2133
 5889 0096 DB68     		ldr	r3, [r3, #12]
 5890 0098 002B     		cmp	r3, #0
 5891 009a 40F0A180 		bne	.L659
 5892              	.LVL683:
 5893              	.L650:
 692:source\fatfs/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 5894              		.loc 1 692 27 is_stmt 0 view .LVU2134
 5895              	.LBE102:
 5896              	.LBE101:
2566:source\fatfs/ff.c **** #else
 5897              		.loc 1 2566 25 discriminator 1 view .LVU2135
 5898 009e 06A8     		add	r0, sp, #24
 5899 00a0 FFF7FEFF 		bl	dir_register
 5900              	.LVL684:
2570:source\fatfs/ff.c **** 				dir = dj.dir;					/* New entry */
 5901              		.loc 1 2570 5 is_stmt 1 discriminator 1 view .LVU2136
2570:source\fatfs/ff.c **** 				dir = dj.dir;					/* New entry */
 5902              		.loc 1 2570 10 is_stmt 0 discriminator 1 view .LVU2137
 5903 00a4 47F00807 		orr	r7, r7, #8
 5904              	.LVL685:
2571:source\fatfs/ff.c **** 			}
 5905              		.loc 1 2571 5 is_stmt 1 discriminator 1 view .LVU2138
2571:source\fatfs/ff.c **** 			}
 5906              		.loc 1 2571 9 is_stmt 0 discriminator 1 view .LVU2139
 5907 00a8 DDF82C92 		ldr	r9, [sp, #556]
 5908              	.LVL686:
2581:source\fatfs/ff.c **** 				dw = GET_FATTIME();				/* Created time */
 5909              		.loc 1 2581 4 is_stmt 1 discriminator 1 view .LVU2140
2581:source\fatfs/ff.c **** 				dw = GET_FATTIME();				/* Created time */
 5910              		.loc 1 2581 7 is_stmt 0 discriminator 1 view .LVU2141
 5911 00ac 0446     		mov	r4, r0
 5912 00ae 0028     		cmp	r0, #0
 5913 00b0 D6D1     		bne	.L647
 5914              	.LVL687:
 5915              	.L651:
2581:source\fatfs/ff.c **** 				dw = GET_FATTIME();				/* Created time */
 5916              		.loc 1 2581 21 discriminator 1 view .LVU2142
 5917 00b2 3C07     		lsls	r4, r7, #28
2586:source\fatfs/ff.c **** 				st_clust(dir, 0);				/* cluster = 0 */
 5918              		.loc 1 2586 10 discriminator 1 view .LVU2143
 5919 00b4 DDF818B2 		ldr	fp, [sp, #536]
2581:source\fatfs/ff.c **** 				dw = GET_FATTIME();				/* Created time */
 5920              		.loc 1 2581 21 discriminator 1 view .LVU2144
 5921 00b8 42D5     		bpl	.L654
2582:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_CrtTime, dw);
 5922              		.loc 1 2582 5 is_stmt 1 view .LVU2145
2582:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_CrtTime, dw);
 5923              		.loc 1 2582 10 is_stmt 0 view .LVU2146
 5924 00ba FFF7FEFF 		bl	get_fattime
 5925              	.LVL688:
2583:source\fatfs/ff.c **** 				dir[DIR_Attr] = 0;				/* Reset attribute */
 5926              		.loc 1 2583 5 is_stmt 1 view .LVU2147
 5927 00be C0F30723 		ubfx	r3, r0, #8, #8
2584:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 5928              		.loc 1 2584 19 is_stmt 0 view .LVU2148
 5929 00c2 0024     		movs	r4, #0
2583:source\fatfs/ff.c **** 				dir[DIR_Attr] = 0;				/* Reset attribute */
 5930              		.loc 1 2583 5 view .LVU2149
 5931 00c4 89F80E00 		strb	r0, [r9, #14]
2583:source\fatfs/ff.c **** 				dir[DIR_Attr] = 0;				/* Reset attribute */
 5932              		.loc 1 2583 5 is_stmt 1 view .LVU2150
 5933 00c8 89F80F30 		strb	r3, [r9, #15]
2583:source\fatfs/ff.c **** 				dir[DIR_Attr] = 0;				/* Reset attribute */
 5934              		.loc 1 2583 5 view .LVU2151
 5935 00cc 030C     		lsrs	r3, r0, #16
 5936 00ce 000E     		lsrs	r0, r0, #24
 5937              	.LVL689:
2583:source\fatfs/ff.c **** 				dir[DIR_Attr] = 0;				/* Reset attribute */
 5938              		.loc 1 2583 5 is_stmt 0 view .LVU2152
 5939 00d0 89F81030 		strb	r3, [r9, #16]
2583:source\fatfs/ff.c **** 				dir[DIR_Attr] = 0;				/* Reset attribute */
 5940              		.loc 1 2583 5 is_stmt 1 view .LVU2153
 5941 00d4 89F81100 		strb	r0, [r9, #17]
2584:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 5942              		.loc 1 2584 5 view .LVU2154
2584:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 5943              		.loc 1 2584 19 is_stmt 0 view .LVU2155
 5944 00d8 89F80B40 		strb	r4, [r9, #11]
2585:source\fatfs/ff.c **** 				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 5945              		.loc 1 2585 5 is_stmt 1 view .LVU2156
 5946 00dc 89F81C40 		strb	r4, [r9, #28]
2585:source\fatfs/ff.c **** 				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 5947              		.loc 1 2585 5 view .LVU2157
 5948 00e0 89F81D40 		strb	r4, [r9, #29]
2585:source\fatfs/ff.c **** 				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 5949              		.loc 1 2585 5 view .LVU2158
 5950 00e4 89F81E40 		strb	r4, [r9, #30]
2585:source\fatfs/ff.c **** 				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 5951              		.loc 1 2585 5 view .LVU2159
 5952 00e8 89F81F40 		strb	r4, [r9, #31]
2586:source\fatfs/ff.c **** 				st_clust(dir, 0);				/* cluster = 0 */
 5953              		.loc 1 2586 5 view .LVU2160
2586:source\fatfs/ff.c **** 				st_clust(dir, 0);				/* cluster = 0 */
 5954              		.loc 1 2586 10 is_stmt 0 view .LVU2161
 5955 00ec 9BF80002 		ldrb	r0, [fp, #512]	@ zero_extendqisi2
 5956 00f0 4946     		mov	r1, r9
 5957 00f2 FFF7FEFF 		bl	ld_clust.isra.0
 5958              	.LVL690:
2587:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 5959              		.loc 1 2587 5 is_stmt 1 view .LVU2162
 5960              	.LBB103:
 5961              	.LBI103:
1325:source\fatfs/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
 5962              		.loc 1 1325 6 view .LVU2163
 5963              	.LBB104:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 5964              		.loc 1 1330 2 view .LVU2164
 5965              	.LBE104:
 5966              	.LBE103:
2588:source\fatfs/ff.c **** 				if (cl) {						/* Remove the cluster chain if exist */
 5967              		.loc 1 2588 18 is_stmt 0 view .LVU2165
 5968 00f6 0123     		movs	r3, #1
 5969              	.LBB106:
 5970              	.LBB105:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 5971              		.loc 1 1330 2 view .LVU2166
 5972 00f8 89F81A40 		strb	r4, [r9, #26]
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 5973              		.loc 1 1330 2 is_stmt 1 view .LVU2167
 5974 00fc 89F81B40 		strb	r4, [r9, #27]
1331:source\fatfs/ff.c **** }
 5975              		.loc 1 1331 2 view .LVU2168
 5976 0100 89F81440 		strb	r4, [r9, #20]
1331:source\fatfs/ff.c **** }
 5977              		.loc 1 1331 2 view .LVU2169
 5978 0104 89F81540 		strb	r4, [r9, #21]
 5979              	.LVL691:
1331:source\fatfs/ff.c **** }
 5980              		.loc 1 1331 2 is_stmt 0 view .LVU2170
 5981              	.LBE105:
 5982              	.LBE106:
2588:source\fatfs/ff.c **** 				if (cl) {						/* Remove the cluster chain if exist */
 5983              		.loc 1 2588 5 is_stmt 1 view .LVU2171
2589:source\fatfs/ff.c **** 					dw = dj.fs->winsect;
 5984              		.loc 1 2589 8 is_stmt 0 view .LVU2172
 5985 0108 0146     		mov	r1, r0
2588:source\fatfs/ff.c **** 				if (cl) {						/* Remove the cluster chain if exist */
 5986              		.loc 1 2588 18 view .LVU2173
 5987 010a 8BF80432 		strb	r3, [fp, #516]
2589:source\fatfs/ff.c **** 					dw = dj.fs->winsect;
 5988              		.loc 1 2589 5 is_stmt 1 view .LVU2174
2589:source\fatfs/ff.c **** 					dw = dj.fs->winsect;
 5989              		.loc 1 2589 8 is_stmt 0 view .LVU2175
 5990 010e 98B1     		cbz	r0, .L653
2590:source\fatfs/ff.c **** 					res = remove_chain(dj.fs, cl);
 5991              		.loc 1 2590 6 is_stmt 1 view .LVU2176
2591:source\fatfs/ff.c **** 					if (res == FR_OK) {
 5992              		.loc 1 2591 12 is_stmt 0 view .LVU2177
 5993 0110 0090     		str	r0, [sp]
 5994 0112 5846     		mov	r0, fp
 5995              	.LVL692:
2590:source\fatfs/ff.c **** 					res = remove_chain(dj.fs, cl);
 5996              		.loc 1 2590 9 view .LVU2178
 5997 0114 DBF82CA2 		ldr	r10, [fp, #556]
 5998              	.LVL693:
2591:source\fatfs/ff.c **** 					if (res == FR_OK) {
 5999              		.loc 1 2591 6 is_stmt 1 view .LVU2179
2591:source\fatfs/ff.c **** 					if (res == FR_OK) {
 6000              		.loc 1 2591 12 is_stmt 0 view .LVU2180
 6001 0118 FFF7FEFF 		bl	remove_chain
 6002              	.LVL694:
2592:source\fatfs/ff.c **** 						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 6003              		.loc 1 2592 6 is_stmt 1 view .LVU2181
2592:source\fatfs/ff.c **** 						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 6004              		.loc 1 2592 9 is_stmt 0 view .LVU2182
 6005 011c 0099     		ldr	r1, [sp]
 6006 011e 0446     		mov	r4, r0
 6007 0120 0028     		cmp	r0, #0
 6008 0122 9DD1     		bne	.L647
2593:source\fatfs/ff.c **** 						res = move_window(dj.fs, dw);
 6009              		.loc 1 2593 7 is_stmt 1 view .LVU2183
2593:source\fatfs/ff.c **** 						res = move_window(dj.fs, dw);
 6010              		.loc 1 2593 30 is_stmt 0 view .LVU2184
 6011 0124 0139     		subs	r1, r1, #1
2593:source\fatfs/ff.c **** 						res = move_window(dj.fs, dw);
 6012              		.loc 1 2593 25 view .LVU2185
 6013 0126 CBF80C12 		str	r1, [fp, #524]
2594:source\fatfs/ff.c **** 					}
 6014              		.loc 1 2594 7 is_stmt 1 view .LVU2186
2594:source\fatfs/ff.c **** 					}
 6015              		.loc 1 2594 13 is_stmt 0 view .LVU2187
 6016 012a 5846     		mov	r0, fp
 6017              	.LVL695:
2594:source\fatfs/ff.c **** 					}
 6018              		.loc 1 2594 13 view .LVU2188
 6019 012c 5146     		mov	r1, r10
 6020 012e FFF7FEFF 		bl	move_window
 6021              	.LVL696:
2609:source\fatfs/ff.c **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 6022              		.loc 1 2609 3 is_stmt 1 view .LVU2189
2609:source\fatfs/ff.c **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 6023              		.loc 1 2609 6 is_stmt 0 view .LVU2190
 6024 0132 0446     		mov	r4, r0
 6025 0134 0028     		cmp	r0, #0
 6026 0136 93D1     		bne	.L647
 6027              	.LVL697:
 6028              	.L653:
2610:source\fatfs/ff.c **** 				mode |= FA__WRITTEN;
 6029              		.loc 1 2610 4 is_stmt 1 view .LVU2191
2610:source\fatfs/ff.c **** 				mode |= FA__WRITTEN;
 6030              		.loc 1 2610 7 is_stmt 0 view .LVU2192
 6031 0138 3B07     		lsls	r3, r7, #28
2611:source\fatfs/ff.c **** 			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 6032              		.loc 1 2611 5 is_stmt 1 view .LVU2193
2611:source\fatfs/ff.c **** 			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 6033              		.loc 1 2611 10 is_stmt 0 view .LVU2194
 6034 013a 48BF     		it	mi
 6035 013c 47F02007 		orrmi	r7, r7, #32
 6036              	.LVL698:
 6037              	.L654:
2612:source\fatfs/ff.c **** 			fp->dir_ptr = dir;
 6038              		.loc 1 2612 4 is_stmt 1 view .LVU2195
2612:source\fatfs/ff.c **** 			fp->dir_ptr = dir;
 6039              		.loc 1 2612 21 is_stmt 0 view .LVU2196
 6040 0140 869C     		ldr	r4, [sp, #536]
2612:source\fatfs/ff.c **** 			fp->dir_ptr = dir;
 6041              		.loc 1 2612 17 view .LVU2197
 6042 0142 D4F82C32 		ldr	r3, [r4, #556]
2615:source\fatfs/ff.c **** 			if (!fp->lockid) res = FR_INT_ERR;
 6043              		.loc 1 2615 17 view .LVU2198
 6044 0146 012F     		cmp	r7, #1
2613:source\fatfs/ff.c **** #if _FS_LOCK
 6045              		.loc 1 2613 16 view .LVU2199
 6046 0148 C5E98739 		strd	r3, r9, [r5, #540]
2615:source\fatfs/ff.c **** 			if (!fp->lockid) res = FR_INT_ERR;
 6047              		.loc 1 2615 4 is_stmt 1 view .LVU2200
2615:source\fatfs/ff.c **** 			if (!fp->lockid) res = FR_INT_ERR;
 6048              		.loc 1 2615 17 is_stmt 0 view .LVU2201
 6049 014c 94BF     		ite	ls
 6050 014e 0021     		movls	r1, #0
 6051 0150 0121     		movhi	r1, #1
 6052 0152 06A8     		add	r0, sp, #24
 6053 0154 FFF7FEFF 		bl	inc_lock
 6054              	.LVL699:
2615:source\fatfs/ff.c **** 			if (!fp->lockid) res = FR_INT_ERR;
 6055              		.loc 1 2615 15 view .LVU2202
 6056 0158 C5F82802 		str	r0, [r5, #552]
2616:source\fatfs/ff.c **** #endif
 6057              		.loc 1 2616 4 is_stmt 1 view .LVU2203
2616:source\fatfs/ff.c **** #endif
 6058              		.loc 1 2616 7 is_stmt 0 view .LVU2204
 6059 015c 00BB     		cbnz	r0, .L655
2616:source\fatfs/ff.c **** #endif
 6060              		.loc 1 2616 21 is_stmt 1 view .LVU2205
 6061              	.LVL700:
2631:source\fatfs/ff.c **** 
 6062              		.loc 1 2631 3 view .LVU2206
 6063 015e 4046     		mov	r0, r8
 6064 0160 FFF7FEFF 		bl	ff_memfree
 6065              	.LVL701:
 6066              		.loc 1 2633 3 view .LVU2207
2616:source\fatfs/ff.c **** #endif
 6067              		.loc 1 2616 25 is_stmt 0 view .LVU2208
 6068 0164 0226     		movs	r6, #2
 6069              	.LVL702:
 6070              	.L644:
2634:source\fatfs/ff.c **** 			fp->flag = mode;					/* File access mode */
2635:source\fatfs/ff.c **** 			fp->err = 0;						/* Clear error flag */
2636:source\fatfs/ff.c **** 			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
2637:source\fatfs/ff.c **** 			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
2638:source\fatfs/ff.c **** 			fp->fptr = 0;						/* File pointer */
2639:source\fatfs/ff.c **** 			fp->dsect = 0;
2640:source\fatfs/ff.c **** #if _USE_FASTSEEK
2641:source\fatfs/ff.c **** 			fp->cltbl = 0;						/* Normal seek mode */
2642:source\fatfs/ff.c **** #endif
2643:source\fatfs/ff.c **** 			fp->fs = dj.fs;	 					/* Validate file object */
2644:source\fatfs/ff.c **** 			fp->id = fp->fs->id;
2645:source\fatfs/ff.c **** 		}
2646:source\fatfs/ff.c **** 	}
2647:source\fatfs/ff.c **** 
2648:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
2649:source\fatfs/ff.c **** }
 6071              		.loc 1 2649 1 view .LVU2209
 6072 0166 3046     		mov	r0, r6
 6073 0168 0DF5117D 		add	sp, sp, #580
 6074              		.cfi_remember_state
 6075              		.cfi_def_cfa_offset 36
 6076              		@ sp needed
 6077 016c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6078              	.LVL703:
 6079              	.L649:
 6080              		.cfi_restore_state
2574:source\fatfs/ff.c **** 					res = FR_DENIED;
 6081              		.loc 1 2574 5 is_stmt 1 view .LVU2210
2574:source\fatfs/ff.c **** 					res = FR_DENIED;
 6082              		.loc 1 2574 8 is_stmt 0 view .LVU2211
 6083 0170 99F80B30 		ldrb	r3, [r9, #11]	@ zero_extendqisi2
 6084 0174 13F0110F 		tst	r3, #17
 6085 0178 10D1     		bne	.L663
2577:source\fatfs/ff.c **** 						res = FR_EXIST;
 6086              		.loc 1 2577 6 is_stmt 1 view .LVU2212
2577:source\fatfs/ff.c **** 						res = FR_EXIST;
 6087              		.loc 1 2577 9 is_stmt 0 view .LVU2213
 6088 017a 1AF0040F 		tst	r10, #4
 6089 017e 98D0     		beq	.L651
2578:source\fatfs/ff.c **** 				}
 6090              		.loc 1 2578 11 view .LVU2214
 6091 0180 0824     		movs	r4, #8
 6092 0182 6DE7     		b	.L647
 6093              	.L648:
2600:source\fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 6094              		.loc 1 2600 4 is_stmt 1 view .LVU2215
2600:source\fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 6095              		.loc 1 2600 7 is_stmt 0 view .LVU2216
 6096 0184 0028     		cmp	r0, #0
 6097 0186 7FF46BAF 		bne	.L647
2601:source\fatfs/ff.c **** 					res = FR_NO_FILE;
 6098              		.loc 1 2601 5 is_stmt 1 view .LVU2217
2601:source\fatfs/ff.c **** 					res = FR_NO_FILE;
 6099              		.loc 1 2601 12 is_stmt 0 view .LVU2218
 6100 018a 99F80B30 		ldrb	r3, [r9, #11]	@ zero_extendqisi2
2601:source\fatfs/ff.c **** 					res = FR_NO_FILE;
 6101              		.loc 1 2601 8 view .LVU2219
 6102 018e D806     		lsls	r0, r3, #27
 6103              	.LVL704:
2601:source\fatfs/ff.c **** 					res = FR_NO_FILE;
 6104              		.loc 1 2601 8 view .LVU2220
 6105 0190 28D4     		bmi	.L662
2604:source\fatfs/ff.c **** 						res = FR_DENIED;
 6106              		.loc 1 2604 6 is_stmt 1 view .LVU2221
2604:source\fatfs/ff.c **** 						res = FR_DENIED;
 6107              		.loc 1 2604 9 is_stmt 0 view .LVU2222
 6108 0192 1AF0020F 		tst	r10, #2
 6109 0196 CFD0     		beq	.L653
2604:source\fatfs/ff.c **** 						res = FR_DENIED;
 6110              		.loc 1 2604 28 discriminator 1 view .LVU2223
 6111 0198 DA07     		lsls	r2, r3, #31
 6112 019a CDD5     		bpl	.L653
 6113              	.L663:
2575:source\fatfs/ff.c **** 				} else {
 6114              		.loc 1 2575 10 view .LVU2224
 6115 019c 0724     		movs	r4, #7
 6116 019e 5FE7     		b	.L647
 6117              	.LVL705:
 6118              	.L655:
2631:source\fatfs/ff.c **** 
 6119              		.loc 1 2631 3 is_stmt 1 view .LVU2225
 6120 01a0 4046     		mov	r0, r8
 6121 01a2 FFF7FEFF 		bl	ff_memfree
 6122              	.LVL706:
2633:source\fatfs/ff.c **** 			fp->flag = mode;					/* File access mode */
 6123              		.loc 1 2633 3 view .LVU2226
2634:source\fatfs/ff.c **** 			fp->err = 0;						/* Clear error flag */
 6124              		.loc 1 2634 4 view .LVU2227
2634:source\fatfs/ff.c **** 			fp->err = 0;						/* Clear error flag */
 6125              		.loc 1 2634 13 is_stmt 0 view .LVU2228
 6126 01a6 85F80672 		strb	r7, [r5, #518]
2635:source\fatfs/ff.c **** 			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 6127              		.loc 1 2635 4 is_stmt 1 view .LVU2229
2635:source\fatfs/ff.c **** 			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 6128              		.loc 1 2635 12 is_stmt 0 view .LVU2230
 6129 01aa 0027     		movs	r7, #0
 6130 01ac 85F80772 		strb	r7, [r5, #519]
2636:source\fatfs/ff.c **** 			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 6131              		.loc 1 2636 4 is_stmt 1 view .LVU2231
2636:source\fatfs/ff.c **** 			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 6132              		.loc 1 2636 17 is_stmt 0 view .LVU2232
 6133 01b0 94F80002 		ldrb	r0, [r4, #512]	@ zero_extendqisi2
 6134 01b4 4946     		mov	r1, r9
 6135 01b6 FFF7FEFF 		bl	ld_clust.isra.0
 6136              	.LVL707:
2636:source\fatfs/ff.c **** 			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 6137              		.loc 1 2636 15 view .LVU2233
 6138 01ba C5F81002 		str	r0, [r5, #528]
2637:source\fatfs/ff.c **** 			fp->fptr = 0;						/* File pointer */
 6139              		.loc 1 2637 4 is_stmt 1 view .LVU2234
2637:source\fatfs/ff.c **** 			fp->fptr = 0;						/* File pointer */
 6140              		.loc 1 2637 16 is_stmt 0 view .LVU2235
 6141 01be D9F81C30 		ldr	r3, [r9, #28]	@ unaligned
2639:source\fatfs/ff.c **** #if _USE_FASTSEEK
 6142              		.loc 1 2639 14 view .LVU2236
 6143 01c2 C5F81872 		str	r7, [r5, #536]
2638:source\fatfs/ff.c **** 			fp->dsect = 0;
 6144              		.loc 1 2638 13 view .LVU2237
 6145 01c6 C5E98273 		strd	r7, r3, [r5, #520]
2639:source\fatfs/ff.c **** #if _USE_FASTSEEK
 6146              		.loc 1 2639 4 is_stmt 1 view .LVU2238
2641:source\fatfs/ff.c **** #endif
 6147              		.loc 1 2641 4 view .LVU2239
2644:source\fatfs/ff.c **** 		}
 6148              		.loc 1 2644 11 is_stmt 0 view .LVU2240
 6149 01ca B4F80632 		ldrh	r3, [r4, #518]
2641:source\fatfs/ff.c **** #endif
 6150              		.loc 1 2641 14 view .LVU2241
 6151 01ce C5F82472 		str	r7, [r5, #548]
2643:source\fatfs/ff.c **** 			fp->id = fp->fs->id;
 6152              		.loc 1 2643 4 is_stmt 1 view .LVU2242
2643:source\fatfs/ff.c **** 			fp->id = fp->fs->id;
 6153              		.loc 1 2643 11 is_stmt 0 view .LVU2243
 6154 01d2 C5F80042 		str	r4, [r5, #512]
2644:source\fatfs/ff.c **** 		}
 6155              		.loc 1 2644 4 is_stmt 1 view .LVU2244
2644:source\fatfs/ff.c **** 		}
 6156              		.loc 1 2644 11 is_stmt 0 view .LVU2245
 6157 01d6 A5F80432 		strh	r3, [r5, #516]	@ movhi
 6158 01da C4E7     		b	.L644
 6159              	.LVL708:
 6160              	.L658:
2555:source\fatfs/ff.c **** #if _FS_LOCK
 6161              		.loc 1 2555 9 view .LVU2246
 6162 01dc 0624     		movs	r4, #6
 6163 01de 3FE7     		b	.L647
 6164              	.LVL709:
 6165              	.L659:
2566:source\fatfs/ff.c **** #else
 6166              		.loc 1 2566 43 view .LVU2247
 6167 01e0 1224     		movs	r4, #18
 6168 01e2 3DE7     		b	.L647
 6169              	.LVL710:
 6170              	.L662:
2602:source\fatfs/ff.c **** 				} else {
 6171              		.loc 1 2602 10 view .LVU2248
 6172 01e4 0424     		movs	r4, #4
 6173 01e6 3BE7     		b	.L647
 6174              	.LVL711:
 6175              	.L656:
2537:source\fatfs/ff.c **** 	fp->fs = 0;			/* Clear file object */
 6176              		.loc 1 2537 18 view .LVU2249
 6177 01e8 0926     		movs	r6, #9
 6178 01ea BCE7     		b	.L644
 6179              	.LVL712:
 6180              	.L657:
2549:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 6181              		.loc 1 2549 3 view .LVU2250
 6182 01ec 1126     		movs	r6, #17
 6183 01ee BAE7     		b	.L644
 6184              	.L683:
 6185              		.align	2
 6186              	.L682:
 6187 01f0 00000000 		.word	Files
 6188              		.cfi_endproc
 6189              	.LFE163:
 6191              		.section	.text.f_read,"ax",%progbits
 6192              		.align	1
 6193              		.global	f_read
 6194              		.syntax unified
 6195              		.thumb
 6196              		.thumb_func
 6198              	f_read:
 6199              	.LVL713:
 6200              	.LFB164:
2650:source\fatfs/ff.c **** 
2651:source\fatfs/ff.c **** 
2652:source\fatfs/ff.c **** 
2653:source\fatfs/ff.c **** 
2654:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2655:source\fatfs/ff.c **** /* Read File                                                             */
2656:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2657:source\fatfs/ff.c **** 
2658:source\fatfs/ff.c **** FRESULT f_read (
2659:source\fatfs/ff.c **** 	FIL* fp, 		/* Pointer to the file object */
2660:source\fatfs/ff.c **** 	unsigned char * buff,	/* Pointer to data buffer */
2661:source\fatfs/ff.c **** 	UINT btr,		/* Number of bytes to read */
2662:source\fatfs/ff.c **** 	UINT* br		/* Pointer to number of bytes read */
2663:source\fatfs/ff.c **** )
2664:source\fatfs/ff.c **** {
 6201              		.loc 1 2664 1 is_stmt 1 view -0
 6202              		.cfi_startproc
 6203              		@ args = 0, pretend = 0, frame = 8
 6204              		@ frame_needed = 0, uses_anonymous_args = 0
2665:source\fatfs/ff.c **** 	FRESULT res;
 6205              		.loc 1 2665 2 view .LVU2252
2666:source\fatfs/ff.c **** 	DWORD clst, sect, remain;
 6206              		.loc 1 2666 2 view .LVU2253
2667:source\fatfs/ff.c **** 	UINT rcnt, cc;
 6207              		.loc 1 2667 2 view .LVU2254
2668:source\fatfs/ff.c **** 	BYTE csect, *rbuff = (BYTE*)buff;
 6208              		.loc 1 2668 2 view .LVU2255
2664:source\fatfs/ff.c **** 	FRESULT res;
 6209              		.loc 1 2664 1 is_stmt 0 view .LVU2256
 6210 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 6211              		.cfi_def_cfa_offset 48
 6212              		.cfi_offset 4, -36
 6213              		.cfi_offset 5, -32
 6214              		.cfi_offset 6, -28
 6215              		.cfi_offset 7, -24
 6216              		.cfi_offset 8, -20
 6217              		.cfi_offset 9, -16
 6218              		.cfi_offset 10, -12
 6219              		.cfi_offset 11, -8
 6220              		.cfi_offset 14, -4
2664:source\fatfs/ff.c **** 	FRESULT res;
 6221              		.loc 1 2664 1 view .LVU2257
 6222 0004 9A46     		mov	r10, r3
2669:source\fatfs/ff.c **** 
2670:source\fatfs/ff.c **** 
2671:source\fatfs/ff.c **** 	*br = 0;	/* Clear read byte counter */
 6223              		.loc 1 2671 6 view .LVU2258
 6224 0006 0023     		movs	r3, #0
 6225              	.LVL714:
 6226              		.loc 1 2671 6 view .LVU2259
 6227 0008 CAF80030 		str	r3, [r10]
2664:source\fatfs/ff.c **** 	FRESULT res;
 6228              		.loc 1 2664 1 view .LVU2260
 6229 000c 0446     		mov	r4, r0
 6230 000e 8946     		mov	r9, r1
 6231              	.LVL715:
 6232              		.loc 1 2671 2 is_stmt 1 view .LVU2261
2672:source\fatfs/ff.c **** 
2673:source\fatfs/ff.c **** 	res = validate(fp);							/* Check validity */
 6233              		.loc 1 2673 2 view .LVU2262
2664:source\fatfs/ff.c **** 	FRESULT res;
 6234              		.loc 1 2664 1 is_stmt 0 view .LVU2263
 6235 0010 1746     		mov	r7, r2
 6236              		.loc 1 2673 8 view .LVU2264
 6237 0012 FFF7FEFF 		bl	validate
 6238              	.LVL716:
2674:source\fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 6239              		.loc 1 2674 2 is_stmt 1 view .LVU2265
 6240              		.loc 1 2674 5 is_stmt 0 view .LVU2266
 6241 0016 0546     		mov	r5, r0
 6242 0018 50BB     		cbnz	r0, .L685
2675:source\fatfs/ff.c **** 	if (fp->err)								/* Check error */
 6243              		.loc 1 2675 2 is_stmt 1 view .LVU2267
 6244              		.loc 1 2675 8 is_stmt 0 view .LVU2268
 6245 001a 94F80752 		ldrb	r5, [r4, #519]	@ zero_extendqisi2
 6246              		.loc 1 2675 5 view .LVU2269
 6247 001e 3DBB     		cbnz	r5, .L685
2676:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
2677:source\fatfs/ff.c **** 	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 6248              		.loc 1 2677 2 is_stmt 1 view .LVU2270
 6249 0020 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 6250              		.loc 1 2677 5 is_stmt 0 view .LVU2271
 6251 0024 13F00103 		ands	r3, r3, #1
 6252 0028 0093     		str	r3, [sp]
 6253 002a 00F0AE80 		beq	.L703
 6254              	.LVL717:
 6255              	.LBB109:
 6256              	.LBI109:
2658:source\fatfs/ff.c **** 	FIL* fp, 		/* Pointer to the file object */
 6257              		.loc 1 2658 9 is_stmt 1 view .LVU2272
 6258              	.LBB110:
2678:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2679:source\fatfs/ff.c **** 	remain = fp->fsize - fp->fptr;
 6259              		.loc 1 2679 2 view .LVU2273
2680:source\fatfs/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 6260              		.loc 1 2680 2 view .LVU2274
2679:source\fatfs/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 6261              		.loc 1 2679 9 is_stmt 0 view .LVU2275
 6262 002e D4E98236 		ldrd	r3, r6, [r4, #520]
 6263 0032 F61A     		subs	r6, r6, r3
 6264              	.LVL718:
2679:source\fatfs/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 6265              		.loc 1 2679 9 view .LVU2276
 6266 0034 BE42     		cmp	r6, r7
 6267 0036 28BF     		it	cs
 6268 0038 3E46     		movcs	r6, r7
 6269              	.LVL719:
 6270              	.L686:
2681:source\fatfs/ff.c **** 
2682:source\fatfs/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
 6271              		.loc 1 2682 11 is_stmt 1 view .LVU2277
 6272 003a CEB1     		cbz	r6, .L685
2683:source\fatfs/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2684:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6273              		.loc 1 2684 3 view .LVU2278
 6274              		.loc 1 2684 10 is_stmt 0 view .LVU2279
 6275 003c D4F80812 		ldr	r1, [r4, #520]
 6276              		.loc 1 2684 17 view .LVU2280
 6277 0040 C1F30803 		ubfx	r3, r1, #0, #9
 6278              		.loc 1 2684 6 view .LVU2281
 6279 0044 002B     		cmp	r3, #0
 6280 0046 40F09180 		bne	.L687
2685:source\fatfs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 6281              		.loc 1 2685 4 is_stmt 1 view .LVU2282
 6282              		.loc 1 2685 46 is_stmt 0 view .LVU2283
 6283 004a D4F80002 		ldr	r0, [r4, #512]
 6284              		.loc 1 2685 58 view .LVU2284
 6285 004e 90F80282 		ldrb	r8, [r0, #514]	@ zero_extendqisi2
 6286 0052 08F1FF38 		add	r8, r8, #-1
 6287              		.loc 1 2685 10 view .LVU2285
 6288 0056 08EA5128 		and	r8, r8, r1, lsr #9
 6289              	.LVL720:
2686:source\fatfs/ff.c **** 			if (!csect) {						/* On the cluster boundary? */
 6290              		.loc 1 2686 4 is_stmt 1 view .LVU2286
 6291              		.loc 1 2686 7 is_stmt 0 view .LVU2287
 6292 005a 18F0FF08 		ands	r8, r8, #255
 6293              	.LVL721:
 6294              		.loc 1 2686 7 view .LVU2288
 6295 005e 20D1     		bne	.L688
2687:source\fatfs/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 6296              		.loc 1 2687 5 is_stmt 1 view .LVU2289
 6297              		.loc 1 2687 8 is_stmt 0 view .LVU2290
 6298 0060 51B9     		cbnz	r1, .L689
2688:source\fatfs/ff.c **** 					clst = fp->sclust;			/* Follow from the origin */
 6299              		.loc 1 2688 6 is_stmt 1 view .LVU2291
 6300              		.loc 1 2688 11 is_stmt 0 view .LVU2292
 6301 0062 D4F81002 		ldr	r0, [r4, #528]
 6302              	.LVL722:
 6303              	.L690:
2689:source\fatfs/ff.c **** 				} else {						/* Middle or end of the file */
2690:source\fatfs/ff.c **** #if _USE_FASTSEEK
2691:source\fatfs/ff.c **** 					if (fp->cltbl)
2692:source\fatfs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2693:source\fatfs/ff.c **** 					else
2694:source\fatfs/ff.c **** #endif
2695:source\fatfs/ff.c **** 						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
2696:source\fatfs/ff.c **** 				}
2697:source\fatfs/ff.c **** 				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 6304              		.loc 1 2697 5 is_stmt 1 view .LVU2293
 6305              		.loc 1 2697 8 is_stmt 0 view .LVU2294
 6306 0066 0128     		cmp	r0, #1
 6307 0068 12D8     		bhi	.L692
 6308              	.LVL723:
 6309              	.L694:
 6310              		.loc 1 2697 19 is_stmt 1 view .LVU2295
 6311 006a 0225     		movs	r5, #2
 6312 006c 84F80752 		strb	r5, [r4, #519]
 6313              		.loc 1 2697 19 view .LVU2296
 6314              	.LVL724:
 6315              	.L685:
 6316              		.loc 1 2697 19 is_stmt 0 view .LVU2297
 6317              	.LBE110:
 6318              	.LBE109:
2698:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2699:source\fatfs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
2700:source\fatfs/ff.c **** 			}
2701:source\fatfs/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
2702:source\fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
2703:source\fatfs/ff.c **** 			sect += csect;
2704:source\fatfs/ff.c **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
2705:source\fatfs/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
2706:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
2707:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
2708:source\fatfs/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
2709:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2710:source\fatfs/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
2711:source\fatfs/ff.c **** #if _FS_TINY
2712:source\fatfs/ff.c **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
2713:source\fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
2714:source\fatfs/ff.c **** #else
2715:source\fatfs/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
2716:source\fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
2717:source\fatfs/ff.c **** #endif
2718:source\fatfs/ff.c **** #endif
2719:source\fatfs/ff.c **** 				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
2720:source\fatfs/ff.c **** 				continue;
2721:source\fatfs/ff.c **** 			}
2722:source\fatfs/ff.c **** #if !_FS_TINY
2723:source\fatfs/ff.c **** 			if (fp->dsect != sect) {			/* Load data sector if not in cache */
2724:source\fatfs/ff.c **** #if !_FS_READONLY
2725:source\fatfs/ff.c **** 				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
2726:source\fatfs/ff.c **** 					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
2727:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2728:source\fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
2729:source\fatfs/ff.c **** 				}
2730:source\fatfs/ff.c **** #endif
2731:source\fatfs/ff.c **** 				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
2732:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2733:source\fatfs/ff.c **** 			}
2734:source\fatfs/ff.c **** #endif
2735:source\fatfs/ff.c **** 			fp->dsect = sect;
2736:source\fatfs/ff.c **** 		}
2737:source\fatfs/ff.c **** 		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer 
2738:source\fatfs/ff.c **** 		if (rcnt > btr) rcnt = btr;
2739:source\fatfs/ff.c **** #if _FS_TINY
2740:source\fatfs/ff.c **** 		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
2741:source\fatfs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2742:source\fatfs/ff.c **** 		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2743:source\fatfs/ff.c **** #else
2744:source\fatfs/ff.c **** 		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2745:source\fatfs/ff.c **** #endif
2746:source\fatfs/ff.c **** 	}
2747:source\fatfs/ff.c **** 
2748:source\fatfs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
2749:source\fatfs/ff.c **** }
 6319              		.loc 1 2749 1 view .LVU2298
 6320 0070 2846     		mov	r0, r5
 6321 0072 03B0     		add	sp, sp, #12
 6322              		.cfi_remember_state
 6323              		.cfi_def_cfa_offset 36
 6324              		@ sp needed
 6325 0074 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6326              	.LVL725:
 6327              	.L689:
 6328              		.cfi_restore_state
 6329              	.LBB112:
 6330              	.LBB111:
2691:source\fatfs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 6331              		.loc 1 2691 6 is_stmt 1 view .LVU2299
2691:source\fatfs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 6332              		.loc 1 2691 9 is_stmt 0 view .LVU2300
 6333 0078 D4F82432 		ldr	r3, [r4, #548]
 6334 007c 1BB1     		cbz	r3, .L691
2692:source\fatfs/ff.c **** 					else
 6335              		.loc 1 2692 7 is_stmt 1 view .LVU2301
2692:source\fatfs/ff.c **** 					else
 6336              		.loc 1 2692 14 is_stmt 0 view .LVU2302
 6337 007e 2046     		mov	r0, r4
 6338              	.LVL726:
2692:source\fatfs/ff.c **** 					else
 6339              		.loc 1 2692 14 view .LVU2303
 6340 0080 FFF7FEFF 		bl	clmt_clust
 6341              	.LVL727:
2692:source\fatfs/ff.c **** 					else
 6342              		.loc 1 2692 14 view .LVU2304
 6343 0084 EFE7     		b	.L690
 6344              	.LVL728:
 6345              	.L691:
2695:source\fatfs/ff.c **** 				}
 6346              		.loc 1 2695 7 is_stmt 1 view .LVU2305
2695:source\fatfs/ff.c **** 				}
 6347              		.loc 1 2695 14 is_stmt 0 view .LVU2306
 6348 0086 D4F81412 		ldr	r1, [r4, #532]
 6349              	.LVL729:
2695:source\fatfs/ff.c **** 				}
 6350              		.loc 1 2695 14 view .LVU2307
 6351 008a FFF7FEFF 		bl	get_fat
 6352              	.LVL730:
2695:source\fatfs/ff.c **** 				}
 6353              		.loc 1 2695 14 view .LVU2308
 6354 008e EAE7     		b	.L690
 6355              	.L692:
2697:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 6356              		.loc 1 2697 44 is_stmt 1 view .LVU2309
2698:source\fatfs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6357              		.loc 1 2698 5 view .LVU2310
2698:source\fatfs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6358              		.loc 1 2698 8 is_stmt 0 view .LVU2311
 6359 0090 421C     		adds	r2, r0, #1
 6360 0092 04D1     		bne	.L693
 6361              	.LVL731:
 6362              	.L697:
2698:source\fatfs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6363              		.loc 1 2698 29 is_stmt 1 view .LVU2312
 6364 0094 0123     		movs	r3, #1
 6365 0096 009D     		ldr	r5, [sp]
 6366 0098 84F80732 		strb	r3, [r4, #519]
2698:source\fatfs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6367              		.loc 1 2698 29 view .LVU2313
 6368 009c E8E7     		b	.L685
 6369              	.LVL732:
 6370              	.L693:
2698:source\fatfs/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6371              		.loc 1 2698 55 view .LVU2314
2699:source\fatfs/ff.c **** 			}
 6372              		.loc 1 2699 5 view .LVU2315
2699:source\fatfs/ff.c **** 			}
 6373              		.loc 1 2699 15 is_stmt 0 view .LVU2316
 6374 009e C4F81402 		str	r0, [r4, #532]
 6375              	.LVL733:
 6376              	.L688:
2701:source\fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 6377              		.loc 1 2701 4 is_stmt 1 view .LVU2317
2701:source\fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 6378              		.loc 1 2701 11 is_stmt 0 view .LVU2318
 6379 00a2 D4F800B2 		ldr	fp, [r4, #512]
 6380 00a6 D4F81412 		ldr	r1, [r4, #532]
 6381 00aa 5846     		mov	r0, fp
 6382 00ac FFF7FEFF 		bl	clust2sect
 6383              	.LVL734:
2702:source\fatfs/ff.c **** 			sect += csect;
 6384              		.loc 1 2702 4 is_stmt 1 view .LVU2319
2702:source\fatfs/ff.c **** 			sect += csect;
 6385              		.loc 1 2702 7 is_stmt 0 view .LVU2320
 6386 00b0 0028     		cmp	r0, #0
 6387 00b2 DAD0     		beq	.L694
2702:source\fatfs/ff.c **** 			sect += csect;
 6388              		.loc 1 2702 40 is_stmt 1 view .LVU2321
2703:source\fatfs/ff.c **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 6389              		.loc 1 2703 4 view .LVU2322
2705:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 6390              		.loc 1 2705 7 is_stmt 0 view .LVU2323
 6391 00b4 B6F5007F 		cmp	r6, #512
2703:source\fatfs/ff.c **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 6392              		.loc 1 2703 9 view .LVU2324
 6393 00b8 00EB0807 		add	r7, r0, r8
 6394              	.LVL735:
2704:source\fatfs/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
 6395              		.loc 1 2704 4 is_stmt 1 view .LVU2325
2705:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 6396              		.loc 1 2705 4 view .LVU2326
2705:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 6397              		.loc 1 2705 7 is_stmt 0 view .LVU2327
 6398 00bc 33D3     		bcc	.L695
2706:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6399              		.loc 1 2706 28 view .LVU2328
 6400 00be 9BF80222 		ldrb	r2, [fp, #514]	@ zero_extendqisi2
2708:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6401              		.loc 1 2708 9 view .LVU2329
 6402 00c2 9BF80102 		ldrb	r0, [fp, #513]	@ zero_extendqisi2
2706:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6403              		.loc 1 2706 15 view .LVU2330
 6404 00c6 08EB5621 		add	r1, r8, r6, lsr #9
2706:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6405              		.loc 1 2706 8 view .LVU2331
 6406 00ca 9142     		cmp	r1, r2
2704:source\fatfs/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
 6407              		.loc 1 2704 7 view .LVU2332
 6408 00cc 4FEA5623 		lsr	r3, r6, #9
 6409              	.LVL736:
2706:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6410              		.loc 1 2706 5 is_stmt 1 view .LVU2333
2707:source\fatfs/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 6411              		.loc 1 2707 6 view .LVU2334
2708:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6412              		.loc 1 2708 9 is_stmt 0 view .LVU2335
 6413 00d0 4946     		mov	r1, r9
2707:source\fatfs/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 6414              		.loc 1 2707 25 view .LVU2336
 6415 00d2 88BF     		it	hi
 6416 00d4 A2EB0803 		subhi	r3, r2, r8
 6417              	.LVL737:
2708:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6418              		.loc 1 2708 5 is_stmt 1 view .LVU2337
2708:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6419              		.loc 1 2708 9 is_stmt 0 view .LVU2338
 6420 00d8 3A46     		mov	r2, r7
 6421 00da 0193     		str	r3, [sp, #4]
 6422 00dc FFF7FEFF 		bl	disk_read
 6423              	.LVL738:
2708:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6424              		.loc 1 2708 8 view .LVU2339
 6425 00e0 0028     		cmp	r0, #0
 6426 00e2 D7D1     		bne	.L697
2709:source\fatfs/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
 6427              		.loc 1 2709 32 is_stmt 1 view .LVU2340
2715:source\fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 6428              		.loc 1 2715 5 view .LVU2341
2715:source\fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 6429              		.loc 1 2715 8 is_stmt 0 view .LVU2342
 6430 00e4 94F80622 		ldrb	r2, [r4, #518]	@ zero_extendqisi2
 6431 00e8 019B     		ldr	r3, [sp, #4]
 6432 00ea 12F0400F 		tst	r2, #64
 6433 00ee 0CD0     		beq	.L698
2715:source\fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 6434              		.loc 1 2715 45 view .LVU2343
 6435 00f0 D4F81802 		ldr	r0, [r4, #536]
 6436 00f4 C01B     		subs	r0, r0, r7
2715:source\fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 6437              		.loc 1 2715 32 view .LVU2344
 6438 00f6 8342     		cmp	r3, r0
 6439 00f8 07D9     		bls	.L698
2716:source\fatfs/ff.c **** #endif
 6440              		.loc 1 2716 6 is_stmt 1 view .LVU2345
 6441 00fa 4FF40072 		mov	r2, #512
 6442 00fe 2146     		mov	r1, r4
 6443 0100 09EB4020 		add	r0, r9, r0, lsl #9
 6444 0104 FFF7FEFF 		bl	mem_cpy
 6445              	.LVL739:
 6446 0108 019B     		ldr	r3, [sp, #4]
 6447              	.L698:
2719:source\fatfs/ff.c **** 				continue;
 6448              		.loc 1 2719 5 view .LVU2346
2719:source\fatfs/ff.c **** 				continue;
 6449              		.loc 1 2719 10 is_stmt 0 view .LVU2347
 6450 010a 5F02     		lsls	r7, r3, #9
 6451              	.LVL740:
2720:source\fatfs/ff.c **** 			}
 6452              		.loc 1 2720 5 is_stmt 1 view .LVU2348
 6453              	.L699:
2683:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6454              		.loc 1 2683 47 view .LVU2349
2683:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6455              		.loc 1 2683 27 is_stmt 0 view .LVU2350
 6456 010c D4F80832 		ldr	r3, [r4, #520]
 6457 0110 3B44     		add	r3, r3, r7
 6458 0112 C4F80832 		str	r3, [r4, #520]
2683:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6459              		.loc 1 2683 40 view .LVU2351
 6460 0116 DAF80030 		ldr	r3, [r10]
 6461 011a 3B44     		add	r3, r3, r7
2683:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6462              		.loc 1 2683 9 view .LVU2352
 6463 011c B944     		add	r9, r9, r7
 6464              	.LVL741:
2683:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6465              		.loc 1 2683 40 view .LVU2353
 6466 011e CAF80030 		str	r3, [r10]
2683:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6467              		.loc 1 2683 53 view .LVU2354
 6468 0122 F61B     		subs	r6, r6, r7
 6469              	.LVL742:
2683:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 6470              		.loc 1 2683 53 view .LVU2355
 6471 0124 89E7     		b	.L686
 6472              	.LVL743:
 6473              	.L695:
2723:source\fatfs/ff.c **** #if !_FS_READONLY
 6474              		.loc 1 2723 4 is_stmt 1 view .LVU2356
2723:source\fatfs/ff.c **** #if !_FS_READONLY
 6475              		.loc 1 2723 10 is_stmt 0 view .LVU2357
 6476 0126 D4F81822 		ldr	r2, [r4, #536]
2723:source\fatfs/ff.c **** #if !_FS_READONLY
 6477              		.loc 1 2723 7 view .LVU2358
 6478 012a 9742     		cmp	r7, r2
 6479 012c 1CD0     		beq	.L700
2725:source\fatfs/ff.c **** 					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 6480              		.loc 1 2725 5 is_stmt 1 view .LVU2359
2725:source\fatfs/ff.c **** 					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 6481              		.loc 1 2725 8 is_stmt 0 view .LVU2360
 6482 012e 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
2708:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6483              		.loc 1 2708 9 view .LVU2361
 6484 0132 9BF80102 		ldrb	r0, [fp, #513]	@ zero_extendqisi2
2725:source\fatfs/ff.c **** 					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 6485              		.loc 1 2725 8 view .LVU2362
 6486 0136 5B06     		lsls	r3, r3, #25
 6487 0138 0BD5     		bpl	.L701
2726:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 6488              		.loc 1 2726 6 is_stmt 1 view .LVU2363
2726:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 6489              		.loc 1 2726 10 is_stmt 0 view .LVU2364
 6490 013a 0123     		movs	r3, #1
 6491 013c 2146     		mov	r1, r4
 6492 013e FFF7FEFF 		bl	disk_write
 6493              	.LVL744:
2726:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 6494              		.loc 1 2726 9 view .LVU2365
 6495 0142 0028     		cmp	r0, #0
 6496 0144 A6D1     		bne	.L697
2727:source\fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
 6497              		.loc 1 2727 33 is_stmt 1 view .LVU2366
2728:source\fatfs/ff.c **** 				}
 6498              		.loc 1 2728 6 view .LVU2367
2728:source\fatfs/ff.c **** 				}
 6499              		.loc 1 2728 15 is_stmt 0 view .LVU2368
 6500 0146 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 6501 014a 23F04003 		bic	r3, r3, #64
 6502 014e 84F80632 		strb	r3, [r4, #518]
 6503              	.L701:
2731:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6504              		.loc 1 2731 5 is_stmt 1 view .LVU2369
2731:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6505              		.loc 1 2731 9 is_stmt 0 view .LVU2370
 6506 0152 D4F80002 		ldr	r0, [r4, #512]
 6507 0156 0123     		movs	r3, #1
 6508 0158 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 6509 015c 3A46     		mov	r2, r7
 6510 015e 2146     		mov	r1, r4
 6511 0160 FFF7FEFF 		bl	disk_read
 6512              	.LVL745:
2731:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6513              		.loc 1 2731 8 view .LVU2371
 6514 0164 0028     		cmp	r0, #0
 6515 0166 95D1     		bne	.L697
 6516              	.L700:
2732:source\fatfs/ff.c **** 			}
 6517              		.loc 1 2732 32 is_stmt 1 view .LVU2372
2735:source\fatfs/ff.c **** 		}
 6518              		.loc 1 2735 4 view .LVU2373
2735:source\fatfs/ff.c **** 		}
 6519              		.loc 1 2735 14 is_stmt 0 view .LVU2374
 6520 0168 C4F81872 		str	r7, [r4, #536]
 6521              	.LVL746:
 6522              	.L687:
2737:source\fatfs/ff.c **** 		if (rcnt > btr) rcnt = btr;
 6523              		.loc 1 2737 3 is_stmt 1 view .LVU2375
2737:source\fatfs/ff.c **** 		if (rcnt > btr) rcnt = btr;
 6524              		.loc 1 2737 39 is_stmt 0 view .LVU2376
 6525 016c D4F80812 		ldr	r1, [r4, #520]
 6526 0170 C1F30801 		ubfx	r1, r1, #0, #9
 6527              	.LVL747:
2738:source\fatfs/ff.c **** #if _FS_TINY
 6528              		.loc 1 2738 3 is_stmt 1 view .LVU2377
2737:source\fatfs/ff.c **** 		if (rcnt > btr) rcnt = btr;
 6529              		.loc 1 2737 8 is_stmt 0 view .LVU2378
 6530 0174 C1F50077 		rsb	r7, r1, #512
 6531              	.LVL748:
2737:source\fatfs/ff.c **** 		if (rcnt > btr) rcnt = btr;
 6532              		.loc 1 2737 8 view .LVU2379
 6533 0178 B742     		cmp	r7, r6
 6534 017a 28BF     		it	cs
 6535 017c 3746     		movcs	r7, r6
 6536              	.LVL749:
2744:source\fatfs/ff.c **** #endif
 6537              		.loc 1 2744 3 is_stmt 1 view .LVU2380
 6538 017e 3A46     		mov	r2, r7
 6539 0180 2144     		add	r1, r1, r4
 6540 0182 4846     		mov	r0, r9
 6541 0184 FFF7FEFF 		bl	mem_cpy
 6542              	.LVL750:
 6543 0188 C0E7     		b	.L699
 6544              	.LVL751:
 6545              	.L703:
2744:source\fatfs/ff.c **** #endif
 6546              		.loc 1 2744 3 is_stmt 0 view .LVU2381
 6547              	.LBE111:
 6548              	.LBE112:
2678:source\fatfs/ff.c **** 	remain = fp->fsize - fp->fptr;
 6549              		.loc 1 2678 3 view .LVU2382
 6550 018a 0725     		movs	r5, #7
 6551 018c 70E7     		b	.L685
 6552              		.cfi_endproc
 6553              	.LFE164:
 6555              		.section	.text.f_write,"ax",%progbits
 6556              		.align	1
 6557              		.global	f_write
 6558              		.syntax unified
 6559              		.thumb
 6560              		.thumb_func
 6562              	f_write:
 6563              	.LVL752:
 6564              	.LFB165:
2750:source\fatfs/ff.c **** 
2751:source\fatfs/ff.c **** 
2752:source\fatfs/ff.c **** 
2753:source\fatfs/ff.c **** 
2754:source\fatfs/ff.c **** #if !_FS_READONLY
2755:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2756:source\fatfs/ff.c **** /* Write File                                                            */
2757:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2758:source\fatfs/ff.c **** 
2759:source\fatfs/ff.c **** FRESULT f_write (
2760:source\fatfs/ff.c **** 	FIL* fp,			/* Pointer to the file object */
2761:source\fatfs/ff.c **** 	unsigned char *buff,		/* Pointer to the data to be written */
2762:source\fatfs/ff.c **** 	UINT btw,			/* Number of bytes to write */
2763:source\fatfs/ff.c **** 	UINT* bw			/* Pointer to number of bytes written */
2764:source\fatfs/ff.c **** )
2765:source\fatfs/ff.c **** {
 6565              		.loc 1 2765 1 is_stmt 1 view -0
 6566              		.cfi_startproc
 6567              		@ args = 0, pretend = 0, frame = 8
 6568              		@ frame_needed = 0, uses_anonymous_args = 0
2766:source\fatfs/ff.c **** 	FRESULT res;
 6569              		.loc 1 2766 2 view .LVU2384
2767:source\fatfs/ff.c **** 	DWORD clst, sect;
 6570              		.loc 1 2767 2 view .LVU2385
2768:source\fatfs/ff.c **** 	UINT wcnt, cc;
 6571              		.loc 1 2768 2 view .LVU2386
2769:source\fatfs/ff.c **** 	BYTE *wbuff = (BYTE*)buff;
 6572              		.loc 1 2769 2 view .LVU2387
2765:source\fatfs/ff.c **** 	FRESULT res;
 6573              		.loc 1 2765 1 is_stmt 0 view .LVU2388
 6574 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 6575              		.cfi_def_cfa_offset 48
 6576              		.cfi_offset 4, -36
 6577              		.cfi_offset 5, -32
 6578              		.cfi_offset 6, -28
 6579              		.cfi_offset 7, -24
 6580              		.cfi_offset 8, -20
 6581              		.cfi_offset 9, -16
 6582              		.cfi_offset 10, -12
 6583              		.cfi_offset 11, -8
 6584              		.cfi_offset 14, -4
2765:source\fatfs/ff.c **** 	FRESULT res;
 6585              		.loc 1 2765 1 view .LVU2389
 6586 0004 9946     		mov	r9, r3
2770:source\fatfs/ff.c **** 	BYTE csect;
2771:source\fatfs/ff.c **** 
2772:source\fatfs/ff.c **** 
2773:source\fatfs/ff.c **** 	*bw = 0;	/* Clear write byte counter */
 6587              		.loc 1 2773 6 view .LVU2390
 6588 0006 0023     		movs	r3, #0
 6589              	.LVL753:
 6590              		.loc 1 2773 6 view .LVU2391
 6591 0008 C9F80030 		str	r3, [r9]
2765:source\fatfs/ff.c **** 	FRESULT res;
 6592              		.loc 1 2765 1 view .LVU2392
 6593 000c 0446     		mov	r4, r0
 6594 000e 8846     		mov	r8, r1
 6595              	.LVL754:
2770:source\fatfs/ff.c **** 	BYTE csect;
 6596              		.loc 1 2770 2 is_stmt 1 view .LVU2393
 6597              		.loc 1 2773 2 view .LVU2394
2774:source\fatfs/ff.c **** 
2775:source\fatfs/ff.c **** 	res = validate(fp);						/* Check validity */
 6598              		.loc 1 2775 2 view .LVU2395
2765:source\fatfs/ff.c **** 	FRESULT res;
 6599              		.loc 1 2765 1 is_stmt 0 view .LVU2396
 6600 0010 1646     		mov	r6, r2
 6601              		.loc 1 2775 8 view .LVU2397
 6602 0012 FFF7FEFF 		bl	validate
 6603              	.LVL755:
2776:source\fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 6604              		.loc 1 2776 2 is_stmt 1 view .LVU2398
 6605              		.loc 1 2776 5 is_stmt 0 view .LVU2399
 6606 0016 0546     		mov	r5, r0
 6607 0018 0028     		cmp	r0, #0
 6608 001a 42D1     		bne	.L714
2777:source\fatfs/ff.c **** 	if (fp->err)							/* Check error */
 6609              		.loc 1 2777 2 is_stmt 1 view .LVU2400
 6610              		.loc 1 2777 8 is_stmt 0 view .LVU2401
 6611 001c 94F80752 		ldrb	r5, [r4, #519]	@ zero_extendqisi2
 6612              		.loc 1 2777 5 view .LVU2402
 6613 0020 002D     		cmp	r5, #0
 6614 0022 3ED1     		bne	.L714
2778:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
2779:source\fatfs/ff.c **** 	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 6615              		.loc 1 2779 2 is_stmt 1 view .LVU2403
 6616              		.loc 1 2779 5 is_stmt 0 view .LVU2404
 6617 0024 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 6618 0028 9907     		lsls	r1, r3, #30
 6619 002a 40F1CF80 		bpl	.L739
 6620              	.LVL756:
 6621              	.LBB115:
 6622              	.LBI115:
2759:source\fatfs/ff.c **** 	FIL* fp,			/* Pointer to the file object */
 6623              		.loc 1 2759 9 is_stmt 1 view .LVU2405
 6624              	.LBB116:
2780:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2781:source\fatfs/ff.c **** 	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 6625              		.loc 1 2781 2 view .LVU2406
 6626              		.loc 1 2781 8 is_stmt 0 view .LVU2407
 6627 002e D4F80832 		ldr	r3, [r4, #520]
 6628              		.loc 1 2781 37 view .LVU2408
 6629 0032 DE42     		cmn	r6, r3
 6630 0034 28BF     		it	cs
 6631 0036 0026     		movcs	r6, #0
 6632              	.LVL757:
 6633              	.L716:
2782:source\fatfs/ff.c **** 
2783:source\fatfs/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
 6634              		.loc 1 2783 11 is_stmt 1 view .LVU2409
2784:source\fatfs/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
2785:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6635              		.loc 1 2785 10 is_stmt 0 view .LVU2410
 6636 0038 D4F80812 		ldr	r1, [r4, #520]
2783:source\fatfs/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 6637              		.loc 1 2783 11 view .LVU2411
 6638 003c EEB1     		cbz	r6, .L738
 6639              		.loc 1 2785 3 is_stmt 1 view .LVU2412
 6640              		.loc 1 2785 17 is_stmt 0 view .LVU2413
 6641 003e C1F30803 		ubfx	r3, r1, #0, #9
 6642              		.loc 1 2785 6 view .LVU2414
 6643 0042 002B     		cmp	r3, #0
 6644 0044 40F0AA80 		bne	.L717
2786:source\fatfs/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 6645              		.loc 1 2786 4 is_stmt 1 view .LVU2415
 6646              		.loc 1 2786 46 is_stmt 0 view .LVU2416
 6647 0048 D4F80002 		ldr	r0, [r4, #512]
 6648              		.loc 1 2786 58 view .LVU2417
 6649 004c 90F80272 		ldrb	r7, [r0, #514]	@ zero_extendqisi2
 6650 0050 013F     		subs	r7, r7, #1
 6651              		.loc 1 2786 10 view .LVU2418
 6652 0052 07EA5127 		and	r7, r7, r1, lsr #9
 6653              	.LVL758:
2787:source\fatfs/ff.c **** 			if (!csect) {					/* On the cluster boundary? */
 6654              		.loc 1 2787 4 is_stmt 1 view .LVU2419
 6655              		.loc 1 2787 7 is_stmt 0 view .LVU2420
 6656 0056 17F0FF07 		ands	r7, r7, #255
 6657              	.LVL759:
 6658              		.loc 1 2787 7 view .LVU2421
 6659 005a 31D1     		bne	.L719
2788:source\fatfs/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 6660              		.loc 1 2788 5 is_stmt 1 view .LVU2422
 6661              		.loc 1 2788 8 is_stmt 0 view .LVU2423
 6662 005c 29B9     		cbnz	r1, .L720
2789:source\fatfs/ff.c **** 					clst = fp->sclust;		/* Follow from the origin */
 6663              		.loc 1 2789 6 is_stmt 1 view .LVU2424
 6664              		.loc 1 2789 11 is_stmt 0 view .LVU2425
 6665 005e D4F81012 		ldr	r1, [r4, #528]
 6666              	.LVL760:
2790:source\fatfs/ff.c **** 					if (clst == 0)			/* When no cluster is allocated, */
 6667              		.loc 1 2790 6 is_stmt 1 view .LVU2426
 6668              		.loc 1 2790 9 is_stmt 0 view .LVU2427
 6669 0062 C9B9     		cbnz	r1, .L721
 6670              	.LVL761:
 6671              	.L747:
2791:source\fatfs/ff.c **** 						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
2792:source\fatfs/ff.c **** 				} else {					/* Middle or end of the file */
2793:source\fatfs/ff.c **** #if _USE_FASTSEEK
2794:source\fatfs/ff.c **** 					if (fp->cltbl)
2795:source\fatfs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2796:source\fatfs/ff.c **** 					else
2797:source\fatfs/ff.c **** #endif
2798:source\fatfs/ff.c **** 						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 6672              		.loc 1 2798 14 view .LVU2428
 6673 0064 FFF7FEFF 		bl	create_chain
 6674              	.LVL762:
 6675              		.loc 1 2798 14 view .LVU2429
 6676 0068 05E0     		b	.L748
 6677              	.LVL763:
 6678              	.L720:
2794:source\fatfs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 6679              		.loc 1 2794 6 is_stmt 1 view .LVU2430
2794:source\fatfs/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 6680              		.loc 1 2794 9 is_stmt 0 view .LVU2431
 6681 006a D4F82432 		ldr	r3, [r4, #548]
 6682 006e 83B1     		cbz	r3, .L723
2795:source\fatfs/ff.c **** 					else
 6683              		.loc 1 2795 7 is_stmt 1 view .LVU2432
2795:source\fatfs/ff.c **** 					else
 6684              		.loc 1 2795 14 is_stmt 0 view .LVU2433
 6685 0070 2046     		mov	r0, r4
 6686              	.LVL764:
2795:source\fatfs/ff.c **** 					else
 6687              		.loc 1 2795 14 view .LVU2434
 6688 0072 FFF7FEFF 		bl	clmt_clust
 6689              	.LVL765:
 6690              	.L748:
 6691              		.loc 1 2798 14 view .LVU2435
 6692 0076 0146     		mov	r1, r0
 6693              	.LVL766:
2799:source\fatfs/ff.c **** 				}
2800:source\fatfs/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 6694              		.loc 1 2800 5 is_stmt 1 view .LVU2436
 6695              		.loc 1 2800 8 is_stmt 0 view .LVU2437
 6696 0078 70B9     		cbnz	r0, .L721
 6697              	.LVL767:
 6698              	.L738:
2801:source\fatfs/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2802:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2803:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
2804:source\fatfs/ff.c **** 				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
2805:source\fatfs/ff.c **** 			}
2806:source\fatfs/ff.c **** #if _FS_TINY
2807:source\fatfs/ff.c **** 			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
2808:source\fatfs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2809:source\fatfs/ff.c **** #else
2810:source\fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
2811:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
2812:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2813:source\fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
2814:source\fatfs/ff.c **** 			}
2815:source\fatfs/ff.c **** #endif
2816:source\fatfs/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
2817:source\fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
2818:source\fatfs/ff.c **** 			sect += csect;
2819:source\fatfs/ff.c **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
2820:source\fatfs/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
2821:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
2822:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
2823:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv,wbuff, sect, cc) != RES_OK)
2824:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2825:source\fatfs/ff.c **** #if _FS_MINIMIZE <= 2
2826:source\fatfs/ff.c **** #if _FS_TINY
2827:source\fatfs/ff.c **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct 
2828:source\fatfs/ff.c **** 					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
2829:source\fatfs/ff.c **** 					fp->fs->wflag = 0;
2830:source\fatfs/ff.c **** 				}
2831:source\fatfs/ff.c **** #else
2832:source\fatfs/ff.c **** 				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write 
2833:source\fatfs/ff.c **** 					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
2834:source\fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
2835:source\fatfs/ff.c **** 				}
2836:source\fatfs/ff.c **** #endif
2837:source\fatfs/ff.c **** #endif
2838:source\fatfs/ff.c **** 				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
2839:source\fatfs/ff.c **** 				continue;
2840:source\fatfs/ff.c **** 			}
2841:source\fatfs/ff.c **** #if _FS_TINY
2842:source\fatfs/ff.c **** 			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
2843:source\fatfs/ff.c **** 				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
2844:source\fatfs/ff.c **** 				fp->fs->winsect = sect;
2845:source\fatfs/ff.c **** 			}
2846:source\fatfs/ff.c **** #else
2847:source\fatfs/ff.c **** 			if (fp->dsect != sect) {		/* Fill sector cache with file data */
2848:source\fatfs/ff.c **** 				if (fp->fptr < fp->fsize &&
2849:source\fatfs/ff.c **** 					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
2850:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2851:source\fatfs/ff.c **** 			}
2852:source\fatfs/ff.c **** #endif
2853:source\fatfs/ff.c **** 			fp->dsect = sect;
2854:source\fatfs/ff.c **** 		}
2855:source\fatfs/ff.c **** 		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
2856:source\fatfs/ff.c **** 		if (wcnt > btw) wcnt = btw;
2857:source\fatfs/ff.c **** #if _FS_TINY
2858:source\fatfs/ff.c **** 		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
2859:source\fatfs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2860:source\fatfs/ff.c **** 		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2861:source\fatfs/ff.c **** 		fp->fs->wflag = 1;
2862:source\fatfs/ff.c **** #else
2863:source\fatfs/ff.c **** 		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2864:source\fatfs/ff.c **** 		fp->flag |= FA__DIRTY;
2865:source\fatfs/ff.c **** #endif
2866:source\fatfs/ff.c **** 	}
2867:source\fatfs/ff.c **** 
2868:source\fatfs/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 6699              		.loc 1 2868 2 is_stmt 1 view .LVU2438
 6700              		.loc 1 2868 5 is_stmt 0 view .LVU2439
 6701 007a D4E98232 		ldrd	r3, r2, [r4, #520]
 6702 007e 9342     		cmp	r3, r2
 6703 0080 00F2A180 		bhi	.L724
 6704              	.L725:
2869:source\fatfs/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 6705              		.loc 1 2869 2 is_stmt 1 view .LVU2440
 6706              		.loc 1 2869 11 is_stmt 0 view .LVU2441
 6707 0084 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 6708 0088 43F02003 		orr	r3, r3, #32
 6709 008c 84F80632 		strb	r3, [r4, #518]
2870:source\fatfs/ff.c **** 
2871:source\fatfs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
 6710              		.loc 1 2871 2 is_stmt 1 view .LVU2442
 6711 0090 07E0     		b	.L714
 6712              	.LVL768:
 6713              	.L723:
2798:source\fatfs/ff.c **** 				}
 6714              		.loc 1 2798 7 view .LVU2443
2798:source\fatfs/ff.c **** 				}
 6715              		.loc 1 2798 14 is_stmt 0 view .LVU2444
 6716 0092 D4F81412 		ldr	r1, [r4, #532]
 6717              	.LVL769:
2798:source\fatfs/ff.c **** 				}
 6718              		.loc 1 2798 14 view .LVU2445
 6719 0096 E5E7     		b	.L747
 6720              	.LVL770:
 6721              	.L721:
2801:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 6722              		.loc 1 2801 5 is_stmt 1 view .LVU2446
2801:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 6723              		.loc 1 2801 8 is_stmt 0 view .LVU2447
 6724 0098 0129     		cmp	r1, #1
 6725 009a 06D1     		bne	.L726
 6726              	.L731:
2801:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 6727              		.loc 1 2801 20 is_stmt 1 view .LVU2448
 6728 009c 0225     		movs	r5, #2
 6729              	.L749:
2802:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6730              		.loc 1 2802 29 is_stmt 0 view .LVU2449
 6731 009e 84F80752 		strb	r5, [r4, #519]
2802:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6732              		.loc 1 2802 29 is_stmt 1 view .LVU2450
 6733              	.LVL771:
 6734              	.L714:
2802:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6735              		.loc 1 2802 29 is_stmt 0 view .LVU2451
 6736              	.LBE116:
 6737              	.LBE115:
2872:source\fatfs/ff.c **** }
 6738              		.loc 1 2872 1 view .LVU2452
 6739 00a2 2846     		mov	r0, r5
 6740 00a4 03B0     		add	sp, sp, #12
 6741              		.cfi_remember_state
 6742              		.cfi_def_cfa_offset 36
 6743              		@ sp needed
 6744 00a6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6745              	.LVL772:
 6746              	.L726:
 6747              		.cfi_restore_state
 6748              	.LBB118:
 6749              	.LBB117:
2801:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 6750              		.loc 1 2801 45 is_stmt 1 view .LVU2453
2802:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6751              		.loc 1 2802 5 view .LVU2454
2802:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6752              		.loc 1 2802 8 is_stmt 0 view .LVU2455
 6753 00aa 4A1C     		adds	r2, r1, #1
 6754 00ac 01D1     		bne	.L727
 6755              	.L730:
2802:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6756              		.loc 1 2802 29 is_stmt 1 view .LVU2456
 6757 00ae 0125     		movs	r5, #1
 6758 00b0 F5E7     		b	.L749
 6759              	.L727:
2802:source\fatfs/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6760              		.loc 1 2802 55 view .LVU2457
2803:source\fatfs/ff.c **** 				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 6761              		.loc 1 2803 5 view .LVU2458
2804:source\fatfs/ff.c **** 			}
 6762              		.loc 1 2804 8 is_stmt 0 view .LVU2459
 6763 00b2 D4F81032 		ldr	r3, [r4, #528]
2803:source\fatfs/ff.c **** 				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 6764              		.loc 1 2803 15 view .LVU2460
 6765 00b6 C4F81412 		str	r1, [r4, #532]
2804:source\fatfs/ff.c **** 			}
 6766              		.loc 1 2804 5 is_stmt 1 view .LVU2461
2804:source\fatfs/ff.c **** 			}
 6767              		.loc 1 2804 8 is_stmt 0 view .LVU2462
 6768 00ba 0BB9     		cbnz	r3, .L719
2804:source\fatfs/ff.c **** 			}
 6769              		.loc 1 2804 26 is_stmt 1 view .LVU2463
2804:source\fatfs/ff.c **** 			}
 6770              		.loc 1 2804 37 is_stmt 0 view .LVU2464
 6771 00bc C4F81012 		str	r1, [r4, #528]
 6772              	.L719:
2810:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 6773              		.loc 1 2810 4 is_stmt 1 view .LVU2465
2810:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 6774              		.loc 1 2810 7 is_stmt 0 view .LVU2466
 6775 00c0 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
2811:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6776              		.loc 1 2811 22 view .LVU2467
 6777 00c4 D4F80002 		ldr	r0, [r4, #512]
2810:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 6778              		.loc 1 2810 7 view .LVU2468
 6779 00c8 5B06     		lsls	r3, r3, #25
 6780 00ca 0FD5     		bpl	.L729
2811:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6781              		.loc 1 2811 5 is_stmt 1 view .LVU2469
2811:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6782              		.loc 1 2811 9 is_stmt 0 view .LVU2470
 6783 00cc D4F81822 		ldr	r2, [r4, #536]
 6784 00d0 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 6785 00d4 0123     		movs	r3, #1
 6786 00d6 2146     		mov	r1, r4
 6787 00d8 FFF7FEFF 		bl	disk_write
 6788              	.LVL773:
2811:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6789              		.loc 1 2811 8 view .LVU2471
 6790 00dc 0028     		cmp	r0, #0
 6791 00de E6D1     		bne	.L730
2812:source\fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
 6792              		.loc 1 2812 32 is_stmt 1 view .LVU2472
2813:source\fatfs/ff.c **** 			}
 6793              		.loc 1 2813 5 view .LVU2473
2813:source\fatfs/ff.c **** 			}
 6794              		.loc 1 2813 14 is_stmt 0 view .LVU2474
 6795 00e0 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 6796 00e4 23F04003 		bic	r3, r3, #64
 6797 00e8 84F80632 		strb	r3, [r4, #518]
 6798              	.L729:
2816:source\fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 6799              		.loc 1 2816 4 is_stmt 1 view .LVU2475
2816:source\fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 6800              		.loc 1 2816 11 is_stmt 0 view .LVU2476
 6801 00ec D4F800B2 		ldr	fp, [r4, #512]
 6802 00f0 D4F81412 		ldr	r1, [r4, #532]
 6803 00f4 5846     		mov	r0, fp
 6804 00f6 FFF7FEFF 		bl	clust2sect
 6805              	.LVL774:
2817:source\fatfs/ff.c **** 			sect += csect;
 6806              		.loc 1 2817 4 is_stmt 1 view .LVU2477
2817:source\fatfs/ff.c **** 			sect += csect;
 6807              		.loc 1 2817 7 is_stmt 0 view .LVU2478
 6808 00fa 0028     		cmp	r0, #0
 6809 00fc CED0     		beq	.L731
2817:source\fatfs/ff.c **** 			sect += csect;
 6810              		.loc 1 2817 40 is_stmt 1 view .LVU2479
2818:source\fatfs/ff.c **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 6811              		.loc 1 2818 4 view .LVU2480
2820:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 6812              		.loc 1 2820 7 is_stmt 0 view .LVU2481
 6813 00fe B6F5007F 		cmp	r6, #512
2818:source\fatfs/ff.c **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 6814              		.loc 1 2818 9 view .LVU2482
 6815 0102 00EB070A 		add	r10, r0, r7
 6816              	.LVL775:
2819:source\fatfs/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
 6817              		.loc 1 2819 4 is_stmt 1 view .LVU2483
2820:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 6818              		.loc 1 2820 4 view .LVU2484
2820:source\fatfs/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 6819              		.loc 1 2820 7 is_stmt 0 view .LVU2485
 6820 0106 34D3     		bcc	.L732
2821:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6821              		.loc 1 2821 28 view .LVU2486
 6822 0108 9BF80222 		ldrb	r2, [fp, #514]	@ zero_extendqisi2
2823:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6823              		.loc 1 2823 9 view .LVU2487
 6824 010c 9BF80102 		ldrb	r0, [fp, #513]	@ zero_extendqisi2
2821:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6825              		.loc 1 2821 15 view .LVU2488
 6826 0110 07EB5621 		add	r1, r7, r6, lsr #9
2821:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6827              		.loc 1 2821 8 view .LVU2489
 6828 0114 9142     		cmp	r1, r2
2819:source\fatfs/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
 6829              		.loc 1 2819 7 view .LVU2490
 6830 0116 4FEA5623 		lsr	r3, r6, #9
 6831              	.LVL776:
2821:source\fatfs/ff.c **** 					cc = fp->fs->csize - csect;
 6832              		.loc 1 2821 5 is_stmt 1 view .LVU2491
2822:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv,wbuff, sect, cc) != RES_OK)
 6833              		.loc 1 2822 6 view .LVU2492
2823:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6834              		.loc 1 2823 9 is_stmt 0 view .LVU2493
 6835 011a 4146     		mov	r1, r8
2822:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv,wbuff, sect, cc) != RES_OK)
 6836              		.loc 1 2822 25 view .LVU2494
 6837 011c 88BF     		it	hi
 6838 011e D31B     		subhi	r3, r2, r7
 6839              	.LVL777:
2823:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6840              		.loc 1 2823 5 is_stmt 1 view .LVU2495
2823:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6841              		.loc 1 2823 9 is_stmt 0 view .LVU2496
 6842 0120 5246     		mov	r2, r10
 6843 0122 0193     		str	r3, [sp, #4]
 6844 0124 FFF7FEFF 		bl	disk_write
 6845              	.LVL778:
2823:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6846              		.loc 1 2823 8 view .LVU2497
 6847 0128 0028     		cmp	r0, #0
 6848 012a C0D1     		bne	.L730
2824:source\fatfs/ff.c **** #if _FS_MINIMIZE <= 2
 6849              		.loc 1 2824 32 is_stmt 1 view .LVU2498
2832:source\fatfs/ff.c **** 					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 6850              		.loc 1 2832 5 view .LVU2499
2832:source\fatfs/ff.c **** 					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 6851              		.loc 1 2832 19 is_stmt 0 view .LVU2500
 6852 012c D4F81812 		ldr	r1, [r4, #536]
2832:source\fatfs/ff.c **** 					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 6853              		.loc 1 2832 8 view .LVU2501
 6854 0130 019B     		ldr	r3, [sp, #4]
2832:source\fatfs/ff.c **** 					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 6855              		.loc 1 2832 19 view .LVU2502
 6856 0132 A1EB0A01 		sub	r1, r1, r10
2832:source\fatfs/ff.c **** 					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 6857              		.loc 1 2832 8 view .LVU2503
 6858 0136 8B42     		cmp	r3, r1
 6859 0138 0DD9     		bls	.L734
2833:source\fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
 6860              		.loc 1 2833 6 is_stmt 1 view .LVU2504
 6861 013a 4FF40072 		mov	r2, #512
 6862 013e 08EB4121 		add	r1, r8, r1, lsl #9
 6863 0142 2046     		mov	r0, r4
 6864 0144 FFF7FEFF 		bl	mem_cpy
 6865              	.LVL779:
2834:source\fatfs/ff.c **** 				}
 6866              		.loc 1 2834 6 view .LVU2505
2834:source\fatfs/ff.c **** 				}
 6867              		.loc 1 2834 15 is_stmt 0 view .LVU2506
 6868 0148 94F80622 		ldrb	r2, [r4, #518]	@ zero_extendqisi2
 6869 014c 019B     		ldr	r3, [sp, #4]
 6870 014e 22F04002 		bic	r2, r2, #64
 6871 0152 84F80622 		strb	r2, [r4, #518]
 6872              	.L734:
2838:source\fatfs/ff.c **** 				continue;
 6873              		.loc 1 2838 5 is_stmt 1 view .LVU2507
2838:source\fatfs/ff.c **** 				continue;
 6874              		.loc 1 2838 10 is_stmt 0 view .LVU2508
 6875 0156 5F02     		lsls	r7, r3, #9
 6876              	.LVL780:
2839:source\fatfs/ff.c **** 			}
 6877              		.loc 1 2839 5 is_stmt 1 view .LVU2509
 6878              	.L735:
2784:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6879              		.loc 1 2784 47 view .LVU2510
2784:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6880              		.loc 1 2784 27 is_stmt 0 view .LVU2511
 6881 0158 D4F80832 		ldr	r3, [r4, #520]
 6882 015c 3B44     		add	r3, r3, r7
 6883 015e C4F80832 		str	r3, [r4, #520]
2784:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6884              		.loc 1 2784 40 view .LVU2512
 6885 0162 D9F80030 		ldr	r3, [r9]
 6886 0166 3B44     		add	r3, r3, r7
2784:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6887              		.loc 1 2784 9 view .LVU2513
 6888 0168 B844     		add	r8, r8, r7
 6889              	.LVL781:
2784:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6890              		.loc 1 2784 40 view .LVU2514
 6891 016a C9F80030 		str	r3, [r9]
2784:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6892              		.loc 1 2784 53 view .LVU2515
 6893 016e F61B     		subs	r6, r6, r7
 6894              	.LVL782:
2784:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 6895              		.loc 1 2784 53 view .LVU2516
 6896 0170 62E7     		b	.L716
 6897              	.LVL783:
 6898              	.L732:
2847:source\fatfs/ff.c **** 				if (fp->fptr < fp->fsize &&
 6899              		.loc 1 2847 4 is_stmt 1 view .LVU2517
2847:source\fatfs/ff.c **** 				if (fp->fptr < fp->fsize &&
 6900              		.loc 1 2847 7 is_stmt 0 view .LVU2518
 6901 0172 D4F81832 		ldr	r3, [r4, #536]
2848:source\fatfs/ff.c **** 					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 6902              		.loc 1 2848 11 view .LVU2519
 6903 0176 D4F80822 		ldr	r2, [r4, #520]
2847:source\fatfs/ff.c **** 				if (fp->fptr < fp->fsize &&
 6904              		.loc 1 2847 7 view .LVU2520
 6905 017a 9A45     		cmp	r10, r3
 6906 017c 0CD0     		beq	.L736
2848:source\fatfs/ff.c **** 					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 6907              		.loc 1 2848 5 is_stmt 1 view .LVU2521
2848:source\fatfs/ff.c **** 					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 6908              		.loc 1 2848 8 is_stmt 0 view .LVU2522
 6909 017e D4F80C32 		ldr	r3, [r4, #524]
 6910 0182 9A42     		cmp	r2, r3
 6911 0184 08D2     		bcs	.L736
2849:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 6912              		.loc 1 2849 6 view .LVU2523
 6913 0186 9BF80102 		ldrb	r0, [fp, #513]	@ zero_extendqisi2
 6914 018a 0123     		movs	r3, #1
 6915 018c 5246     		mov	r2, r10
 6916 018e 2146     		mov	r1, r4
 6917 0190 FFF7FEFF 		bl	disk_read
 6918              	.LVL784:
2848:source\fatfs/ff.c **** 					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 6919              		.loc 1 2848 30 view .LVU2524
 6920 0194 0028     		cmp	r0, #0
 6921 0196 8AD1     		bne	.L730
 6922              	.L736:
2850:source\fatfs/ff.c **** 			}
 6923              		.loc 1 2850 33 is_stmt 1 view .LVU2525
2853:source\fatfs/ff.c **** 		}
 6924              		.loc 1 2853 4 view .LVU2526
2853:source\fatfs/ff.c **** 		}
 6925              		.loc 1 2853 14 is_stmt 0 view .LVU2527
 6926 0198 C4F818A2 		str	r10, [r4, #536]
 6927              	.LVL785:
 6928              	.L717:
2855:source\fatfs/ff.c **** 		if (wcnt > btw) wcnt = btw;
 6929              		.loc 1 2855 3 is_stmt 1 view .LVU2528
2855:source\fatfs/ff.c **** 		if (wcnt > btw) wcnt = btw;
 6930              		.loc 1 2855 39 is_stmt 0 view .LVU2529
 6931 019c D4F80802 		ldr	r0, [r4, #520]
 6932 01a0 C0F30800 		ubfx	r0, r0, #0, #9
 6933              	.LVL786:
2856:source\fatfs/ff.c **** #if _FS_TINY
 6934              		.loc 1 2856 3 is_stmt 1 view .LVU2530
2855:source\fatfs/ff.c **** 		if (wcnt > btw) wcnt = btw;
 6935              		.loc 1 2855 8 is_stmt 0 view .LVU2531
 6936 01a4 C0F50077 		rsb	r7, r0, #512
 6937              	.LVL787:
2855:source\fatfs/ff.c **** 		if (wcnt > btw) wcnt = btw;
 6938              		.loc 1 2855 8 view .LVU2532
 6939 01a8 B742     		cmp	r7, r6
 6940 01aa 28BF     		it	cs
 6941 01ac 3746     		movcs	r7, r6
 6942              	.LVL788:
2863:source\fatfs/ff.c **** 		fp->flag |= FA__DIRTY;
 6943              		.loc 1 2863 3 is_stmt 1 view .LVU2533
 6944 01ae 3A46     		mov	r2, r7
 6945 01b0 4146     		mov	r1, r8
 6946 01b2 2044     		add	r0, r0, r4
 6947 01b4 FFF7FEFF 		bl	mem_cpy
 6948              	.LVL789:
2864:source\fatfs/ff.c **** #endif
 6949              		.loc 1 2864 3 view .LVU2534
2864:source\fatfs/ff.c **** #endif
 6950              		.loc 1 2864 12 is_stmt 0 view .LVU2535
 6951 01b8 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 6952 01bc 43F04003 		orr	r3, r3, #64
 6953 01c0 84F80632 		strb	r3, [r4, #518]
 6954 01c4 C8E7     		b	.L735
 6955              	.LVL790:
 6956              	.L724:
2868:source\fatfs/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 6957              		.loc 1 2868 28 is_stmt 1 view .LVU2536
2868:source\fatfs/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 6958              		.loc 1 2868 38 is_stmt 0 view .LVU2537
 6959 01c6 C4F80C32 		str	r3, [r4, #524]
 6960 01ca 5BE7     		b	.L725
 6961              	.LVL791:
 6962              	.L739:
2868:source\fatfs/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 6963              		.loc 1 2868 38 view .LVU2538
 6964              	.LBE117:
 6965              	.LBE118:
2780:source\fatfs/ff.c **** 	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 6966              		.loc 1 2780 3 view .LVU2539
 6967 01cc 0725     		movs	r5, #7
 6968 01ce 68E7     		b	.L714
 6969              		.cfi_endproc
 6970              	.LFE165:
 6972              		.section	.text.putc_bfd,"ax",%progbits
 6973              		.align	1
 6974              		.syntax unified
 6975              		.thumb
 6976              		.thumb_func
 6978              	putc_bfd:
 6979              	.LVL792:
 6980              	.LFB182:
2873:source\fatfs/ff.c **** 
2874:source\fatfs/ff.c **** 
2875:source\fatfs/ff.c **** 
2876:source\fatfs/ff.c **** 
2877:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2878:source\fatfs/ff.c **** /* Synchronize the File                                                  */
2879:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2880:source\fatfs/ff.c **** 
2881:source\fatfs/ff.c **** FRESULT f_sync (
2882:source\fatfs/ff.c **** 	FIL* fp		/* Pointer to the file object */
2883:source\fatfs/ff.c **** )
2884:source\fatfs/ff.c **** {
2885:source\fatfs/ff.c **** 	FRESULT res;
2886:source\fatfs/ff.c **** 	DWORD tm;
2887:source\fatfs/ff.c **** 	BYTE *dir;
2888:source\fatfs/ff.c **** 
2889:source\fatfs/ff.c **** 
2890:source\fatfs/ff.c **** 	res = validate(fp);					/* Check validity of the object */
2891:source\fatfs/ff.c **** 	if (res == FR_OK) {
2892:source\fatfs/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
2893:source\fatfs/ff.c **** 			/* Write-back dirty buffer */
2894:source\fatfs/ff.c **** #if !_FS_TINY
2895:source\fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {
2896:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
2897:source\fatfs/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
2898:source\fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
2899:source\fatfs/ff.c **** 			}
2900:source\fatfs/ff.c **** #endif
2901:source\fatfs/ff.c **** 			/* Update the directory entry */
2902:source\fatfs/ff.c **** 			res = move_window(fp->fs, fp->dir_sect);
2903:source\fatfs/ff.c **** 			if (res == FR_OK) {
2904:source\fatfs/ff.c **** 				dir = fp->dir_ptr;
2905:source\fatfs/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
2906:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
2907:source\fatfs/ff.c **** 				st_clust(dir, fp->sclust);					/* Update start cluster */
2908:source\fatfs/ff.c **** 				tm = GET_FATTIME();							/* Update updated time */
2909:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);
2910:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_LstAccDate, 0);
2911:source\fatfs/ff.c **** 				fp->flag &= ~FA__WRITTEN;
2912:source\fatfs/ff.c **** 				fp->fs->wflag = 1;
2913:source\fatfs/ff.c **** 				res = sync_fs(fp->fs);
2914:source\fatfs/ff.c **** 			}
2915:source\fatfs/ff.c **** 		}
2916:source\fatfs/ff.c **** 	}
2917:source\fatfs/ff.c **** 
2918:source\fatfs/ff.c **** 	LEAVE_FF(fp->fs, res);
2919:source\fatfs/ff.c **** }
2920:source\fatfs/ff.c **** 
2921:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
2922:source\fatfs/ff.c **** 
2923:source\fatfs/ff.c **** 
2924:source\fatfs/ff.c **** 
2925:source\fatfs/ff.c **** 
2926:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2927:source\fatfs/ff.c **** /* Close File                                                            */
2928:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2929:source\fatfs/ff.c **** 
2930:source\fatfs/ff.c **** FRESULT f_close (
2931:source\fatfs/ff.c **** 	FIL *fp		/* Pointer to the file object to be closed */
2932:source\fatfs/ff.c **** )
2933:source\fatfs/ff.c **** {
2934:source\fatfs/ff.c **** 	FRESULT res;
2935:source\fatfs/ff.c **** 
2936:source\fatfs/ff.c **** 
2937:source\fatfs/ff.c **** #if !_FS_READONLY
2938:source\fatfs/ff.c **** 	res = f_sync(fp);					/* Flush cached data */
2939:source\fatfs/ff.c **** 	if (res == FR_OK)
2940:source\fatfs/ff.c **** #endif
2941:source\fatfs/ff.c **** 	{
2942:source\fatfs/ff.c **** 		res = validate(fp);				/* Lock volume */
2943:source\fatfs/ff.c **** 		if (res == FR_OK) {
2944:source\fatfs/ff.c **** #if _FS_REENTRANT
2945:source\fatfs/ff.c **** 			FATFS *fs = fp->fs;
2946:source\fatfs/ff.c **** #endif
2947:source\fatfs/ff.c **** #if _FS_LOCK
2948:source\fatfs/ff.c **** 			res = dec_lock(fp->lockid);	/* Decrement file open counter */
2949:source\fatfs/ff.c **** 			if (res == FR_OK)
2950:source\fatfs/ff.c **** #endif
2951:source\fatfs/ff.c **** 				fp->fs = 0;				/* Invalidate file object */
2952:source\fatfs/ff.c **** #if _FS_REENTRANT
2953:source\fatfs/ff.c **** 			unlock_fs(fs, FR_OK);		/* Unlock volume */
2954:source\fatfs/ff.c **** #endif
2955:source\fatfs/ff.c **** 		}
2956:source\fatfs/ff.c **** 	}
2957:source\fatfs/ff.c **** 	return res;
2958:source\fatfs/ff.c **** }
2959:source\fatfs/ff.c **** 
2960:source\fatfs/ff.c **** 
2961:source\fatfs/ff.c **** 
2962:source\fatfs/ff.c **** 
2963:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2964:source\fatfs/ff.c **** /* Change Current Directory or Current Drive, Get Current Directory      */
2965:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2966:source\fatfs/ff.c **** 
2967:source\fatfs/ff.c **** #if _FS_RPATH >= 1
2968:source\fatfs/ff.c **** #if _VOLUMES >= 2
2969:source\fatfs/ff.c **** FRESULT f_chdrive (
2970:source\fatfs/ff.c **** 	const TCHAR* path		/* Drive number */
2971:source\fatfs/ff.c **** )
2972:source\fatfs/ff.c **** {
2973:source\fatfs/ff.c **** 	int vol;
2974:source\fatfs/ff.c **** 
2975:source\fatfs/ff.c **** 
2976:source\fatfs/ff.c **** 	vol = get_ldnumber(&path);
2977:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
2978:source\fatfs/ff.c **** 
2979:source\fatfs/ff.c **** 	CurrVol = (BYTE)vol;
2980:source\fatfs/ff.c **** 
2981:source\fatfs/ff.c **** 	return FR_OK;
2982:source\fatfs/ff.c **** }
2983:source\fatfs/ff.c **** #endif
2984:source\fatfs/ff.c **** 
2985:source\fatfs/ff.c **** 
2986:source\fatfs/ff.c **** FRESULT f_chdir (
2987:source\fatfs/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
2988:source\fatfs/ff.c **** )
2989:source\fatfs/ff.c **** {
2990:source\fatfs/ff.c **** 	FRESULT res;
2991:source\fatfs/ff.c **** 	DIR dj;
2992:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
2993:source\fatfs/ff.c **** 
2994:source\fatfs/ff.c **** 
2995:source\fatfs/ff.c **** 	/* Get logical drive number */
2996:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
2997:source\fatfs/ff.c **** 	if (res == FR_OK) {
2998:source\fatfs/ff.c **** 		INIT_BUF(dj);
2999:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
3000:source\fatfs/ff.c **** 		FREE_BUF();
3001:source\fatfs/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
3002:source\fatfs/ff.c **** 			if (!dj.dir) {
3003:source\fatfs/ff.c **** 				dj.fs->cdir = dj.sclust;	/* Start directory itself */
3004:source\fatfs/ff.c **** 			} else {
3005:source\fatfs/ff.c **** 				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
3006:source\fatfs/ff.c **** 					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
3007:source\fatfs/ff.c **** 				else
3008:source\fatfs/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
3009:source\fatfs/ff.c **** 			}
3010:source\fatfs/ff.c **** 		}
3011:source\fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
3012:source\fatfs/ff.c **** 	}
3013:source\fatfs/ff.c **** 
3014:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3015:source\fatfs/ff.c **** }
3016:source\fatfs/ff.c **** 
3017:source\fatfs/ff.c **** 
3018:source\fatfs/ff.c **** #if _FS_RPATH >= 2
3019:source\fatfs/ff.c **** FRESULT f_getcwd (
3020:source\fatfs/ff.c **** 	TCHAR* buff,	/* Pointer to the directory path */
3021:source\fatfs/ff.c **** 	UINT len		/* Size of path */
3022:source\fatfs/ff.c **** )
3023:source\fatfs/ff.c **** {
3024:source\fatfs/ff.c **** 	FRESULT res;
3025:source\fatfs/ff.c **** 	DIR dj;
3026:source\fatfs/ff.c **** 	UINT i, n;
3027:source\fatfs/ff.c **** 	DWORD ccl;
3028:source\fatfs/ff.c **** 	TCHAR *tp;
3029:source\fatfs/ff.c **** 	FILINFO fno;
3030:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3031:source\fatfs/ff.c **** 
3032:source\fatfs/ff.c **** 
3033:source\fatfs/ff.c **** 	*buff = 0;
3034:source\fatfs/ff.c **** 	/* Get logical drive number */
3035:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, (const TCHAR**)&buff, 0);	/* Get current volume */
3036:source\fatfs/ff.c **** 	if (res == FR_OK) {
3037:source\fatfs/ff.c **** 		INIT_BUF(dj);
3038:source\fatfs/ff.c **** 		i = len;			/* Bottom of buffer (directory stack base) */
3039:source\fatfs/ff.c **** 		dj.sclust = dj.fs->cdir;			/* Start to follow upper directory from current directory */
3040:source\fatfs/ff.c **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
3041:source\fatfs/ff.c **** 			res = dir_sdi(&dj, 1);			/* Get parent directory */
3042:source\fatfs/ff.c **** 			if (res != FR_OK) break;
3043:source\fatfs/ff.c **** 			res = dir_read(&dj, 0);
3044:source\fatfs/ff.c **** 			if (res != FR_OK) break;
3045:source\fatfs/ff.c **** 			dj.sclust = ld_clust(dj.fs, dj.dir);	/* Goto parent directory */
3046:source\fatfs/ff.c **** 			res = dir_sdi(&dj, 0);
3047:source\fatfs/ff.c **** 			if (res != FR_OK) break;
3048:source\fatfs/ff.c **** 			do {							/* Find the entry links to the child directory */
3049:source\fatfs/ff.c **** 				res = dir_read(&dj, 0);
3050:source\fatfs/ff.c **** 				if (res != FR_OK) break;
3051:source\fatfs/ff.c **** 				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
3052:source\fatfs/ff.c **** 				res = dir_next(&dj, 0);	
3053:source\fatfs/ff.c **** 			} while (res == FR_OK);
3054:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
3055:source\fatfs/ff.c **** 			if (res != FR_OK) break;
3056:source\fatfs/ff.c **** #if _USE_LFN
3057:source\fatfs/ff.c **** 			fno.lfname = buff;
3058:source\fatfs/ff.c **** 			fno.lfsize = i;
3059:source\fatfs/ff.c **** #endif
3060:source\fatfs/ff.c **** 			get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
3061:source\fatfs/ff.c **** 			tp = fno.fname;
3062:source\fatfs/ff.c **** #if _USE_LFN
3063:source\fatfs/ff.c **** 			if (*buff) tp = buff;
3064:source\fatfs/ff.c **** #endif
3065:source\fatfs/ff.c **** 			for (n = 0; tp[n]; n++) ;
3066:source\fatfs/ff.c **** 			if (i < n + 3) {
3067:source\fatfs/ff.c **** 				res = FR_NOT_ENOUGH_CORE; break;
3068:source\fatfs/ff.c **** 			}
3069:source\fatfs/ff.c **** 			while (n) buff[--i] = tp[--n];
3070:source\fatfs/ff.c **** 			buff[--i] = '/';
3071:source\fatfs/ff.c **** 		}
3072:source\fatfs/ff.c **** 		tp = buff;
3073:source\fatfs/ff.c **** 		if (res == FR_OK) {
3074:source\fatfs/ff.c **** #if _VOLUMES >= 2
3075:source\fatfs/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
3076:source\fatfs/ff.c **** 			*tp++ = ':';
3077:source\fatfs/ff.c **** #endif
3078:source\fatfs/ff.c **** 			if (i == len) {					/* Root-directory */
3079:source\fatfs/ff.c **** 				*tp++ = '/';
3080:source\fatfs/ff.c **** 			} else {						/* Sub-directroy */
3081:source\fatfs/ff.c **** 				do		/* Add stacked path str */
3082:source\fatfs/ff.c **** 					*tp++ = buff[i++];
3083:source\fatfs/ff.c **** 				while (i < len);
3084:source\fatfs/ff.c **** 			}
3085:source\fatfs/ff.c **** 		}
3086:source\fatfs/ff.c **** 		*tp = 0;
3087:source\fatfs/ff.c **** 		FREE_BUF();
3088:source\fatfs/ff.c **** 	}
3089:source\fatfs/ff.c **** 
3090:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3091:source\fatfs/ff.c **** }
3092:source\fatfs/ff.c **** #endif /* _FS_RPATH >= 2 */
3093:source\fatfs/ff.c **** #endif /* _FS_RPATH >= 1 */
3094:source\fatfs/ff.c **** 
3095:source\fatfs/ff.c **** 
3096:source\fatfs/ff.c **** 
3097:source\fatfs/ff.c **** #if _FS_MINIMIZE <= 2
3098:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3099:source\fatfs/ff.c **** /* Seek File R/W Pointer                                                 */
3100:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3101:source\fatfs/ff.c **** 
3102:source\fatfs/ff.c **** FRESULT f_lseek (
3103:source\fatfs/ff.c **** 	FIL* fp,		/* Pointer to the file object */
3104:source\fatfs/ff.c **** 	DWORD ofs		/* File pointer from top of file */
3105:source\fatfs/ff.c **** )
3106:source\fatfs/ff.c **** {
3107:source\fatfs/ff.c **** 	FRESULT res;
3108:source\fatfs/ff.c **** 	DWORD clst, bcs, nsect, ifptr;
3109:source\fatfs/ff.c **** #if _USE_FASTSEEK
3110:source\fatfs/ff.c **** 	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
3111:source\fatfs/ff.c **** #endif
3112:source\fatfs/ff.c **** 
3113:source\fatfs/ff.c **** 
3114:source\fatfs/ff.c **** 	res = validate(fp);					/* Check validity of the object */
3115:source\fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
3116:source\fatfs/ff.c **** 	if (fp->err)						/* Check error */
3117:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
3118:source\fatfs/ff.c **** 
3119:source\fatfs/ff.c **** #if _USE_FASTSEEK
3120:source\fatfs/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
3121:source\fatfs/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
3122:source\fatfs/ff.c **** 			tbl = fp->cltbl;
3123:source\fatfs/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
3124:source\fatfs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
3125:source\fatfs/ff.c **** 			if (cl) {
3126:source\fatfs/ff.c **** 				do {
3127:source\fatfs/ff.c **** 					/* Get a fragment */
3128:source\fatfs/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
3129:source\fatfs/ff.c **** 					do {
3130:source\fatfs/ff.c **** 						pcl = cl; ncl++;
3131:source\fatfs/ff.c **** 						cl = get_fat(fp->fs, cl);
3132:source\fatfs/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
3133:source\fatfs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
3134:source\fatfs/ff.c **** 					} while (cl == pcl + 1);
3135:source\fatfs/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
3136:source\fatfs/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
3137:source\fatfs/ff.c **** 					}
3138:source\fatfs/ff.c **** 				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
3139:source\fatfs/ff.c **** 			}
3140:source\fatfs/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
3141:source\fatfs/ff.c **** 			if (ulen <= tlen)
3142:source\fatfs/ff.c **** 				*tbl = 0;		/* Terminate table */
3143:source\fatfs/ff.c **** 			else
3144:source\fatfs/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
3145:source\fatfs/ff.c **** 
3146:source\fatfs/ff.c **** 		} else {						/* Fast seek */
3147:source\fatfs/ff.c **** 			if (ofs > fp->fsize)		/* Clip offset at the file size */
3148:source\fatfs/ff.c **** 				ofs = fp->fsize;
3149:source\fatfs/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
3150:source\fatfs/ff.c **** 			if (ofs) {
3151:source\fatfs/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
3152:source\fatfs/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
3153:source\fatfs/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
3154:source\fatfs/ff.c **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
3155:source\fatfs/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
3156:source\fatfs/ff.c **** #if !_FS_TINY
3157:source\fatfs/ff.c **** #if !_FS_READONLY
3158:source\fatfs/ff.c **** 					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
3159:source\fatfs/ff.c **** 						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
3160:source\fatfs/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
3161:source\fatfs/ff.c **** 						fp->flag &= ~FA__DIRTY;
3162:source\fatfs/ff.c **** 					}
3163:source\fatfs/ff.c **** #endif
3164:source\fatfs/ff.c **** 					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
3165:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
3166:source\fatfs/ff.c **** #endif
3167:source\fatfs/ff.c **** 					fp->dsect = dsc;
3168:source\fatfs/ff.c **** 				}
3169:source\fatfs/ff.c **** 			}
3170:source\fatfs/ff.c **** 		}
3171:source\fatfs/ff.c **** 	} else
3172:source\fatfs/ff.c **** #endif
3173:source\fatfs/ff.c **** 
3174:source\fatfs/ff.c **** 	/* Normal Seek */
3175:source\fatfs/ff.c **** 	{
3176:source\fatfs/ff.c **** 		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
3177:source\fatfs/ff.c **** #if !_FS_READONLY
3178:source\fatfs/ff.c **** 			 && !(fp->flag & FA_WRITE)
3179:source\fatfs/ff.c **** #endif
3180:source\fatfs/ff.c **** 			) ofs = fp->fsize;
3181:source\fatfs/ff.c **** 
3182:source\fatfs/ff.c **** 		ifptr = fp->fptr;
3183:source\fatfs/ff.c **** 		fp->fptr = nsect = 0;
3184:source\fatfs/ff.c **** 		if (ofs) {
3185:source\fatfs/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
3186:source\fatfs/ff.c **** 			if (ifptr > 0 &&
3187:source\fatfs/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
3188:source\fatfs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
3189:source\fatfs/ff.c **** 				ofs -= fp->fptr;
3190:source\fatfs/ff.c **** 				clst = fp->clust;
3191:source\fatfs/ff.c **** 			} else {									/* When seek to back cluster, */
3192:source\fatfs/ff.c **** 				clst = fp->sclust;						/* start from the first cluster */
3193:source\fatfs/ff.c **** #if !_FS_READONLY
3194:source\fatfs/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
3195:source\fatfs/ff.c **** 					clst = create_chain(fp->fs, 0);
3196:source\fatfs/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
3197:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
3198:source\fatfs/ff.c **** 					fp->sclust = clst;
3199:source\fatfs/ff.c **** 				}
3200:source\fatfs/ff.c **** #endif
3201:source\fatfs/ff.c **** 				fp->clust = clst;
3202:source\fatfs/ff.c **** 			}
3203:source\fatfs/ff.c **** 			if (clst != 0) {
3204:source\fatfs/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
3205:source\fatfs/ff.c **** #if !_FS_READONLY
3206:source\fatfs/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
3207:source\fatfs/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
3208:source\fatfs/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
3209:source\fatfs/ff.c **** 							ofs = bcs; break;
3210:source\fatfs/ff.c **** 						}
3211:source\fatfs/ff.c **** 					} else
3212:source\fatfs/ff.c **** #endif
3213:source\fatfs/ff.c **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
3214:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
3215:source\fatfs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
3216:source\fatfs/ff.c **** 					fp->clust = clst;
3217:source\fatfs/ff.c **** 					fp->fptr += bcs;
3218:source\fatfs/ff.c **** 					ofs -= bcs;
3219:source\fatfs/ff.c **** 				}
3220:source\fatfs/ff.c **** 				fp->fptr += ofs;
3221:source\fatfs/ff.c **** 				if (ofs % SS(fp->fs)) {
3222:source\fatfs/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
3223:source\fatfs/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
3224:source\fatfs/ff.c **** 					nsect += ofs / SS(fp->fs);
3225:source\fatfs/ff.c **** 				}
3226:source\fatfs/ff.c **** 			}
3227:source\fatfs/ff.c **** 		}
3228:source\fatfs/ff.c **** 		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
3229:source\fatfs/ff.c **** #if !_FS_TINY
3230:source\fatfs/ff.c **** #if !_FS_READONLY
3231:source\fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
3232:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
3233:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
3234:source\fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
3235:source\fatfs/ff.c **** 			}
3236:source\fatfs/ff.c **** #endif
3237:source\fatfs/ff.c **** 			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
3238:source\fatfs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
3239:source\fatfs/ff.c **** #endif
3240:source\fatfs/ff.c **** 			fp->dsect = nsect;
3241:source\fatfs/ff.c **** 		}
3242:source\fatfs/ff.c **** #if !_FS_READONLY
3243:source\fatfs/ff.c **** 		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
3244:source\fatfs/ff.c **** 			fp->fsize = fp->fptr;
3245:source\fatfs/ff.c **** 			fp->flag |= FA__WRITTEN;
3246:source\fatfs/ff.c **** 		}
3247:source\fatfs/ff.c **** #endif
3248:source\fatfs/ff.c **** 	}
3249:source\fatfs/ff.c **** 
3250:source\fatfs/ff.c **** 	LEAVE_FF(fp->fs, res);
3251:source\fatfs/ff.c **** }
3252:source\fatfs/ff.c **** 
3253:source\fatfs/ff.c **** 
3254:source\fatfs/ff.c **** 
3255:source\fatfs/ff.c **** #if _FS_MINIMIZE <= 1
3256:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3257:source\fatfs/ff.c **** /* Create a Directory Object                                             */
3258:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3259:source\fatfs/ff.c **** 
3260:source\fatfs/ff.c **** FRESULT f_opendir (
3261:source\fatfs/ff.c **** 	DIR* dp,			/* Pointer to directory object to create */
3262:source\fatfs/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
3263:source\fatfs/ff.c **** )
3264:source\fatfs/ff.c **** {
3265:source\fatfs/ff.c **** 	FRESULT res;
3266:source\fatfs/ff.c **** 	FATFS* fs;
3267:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3268:source\fatfs/ff.c **** 
3269:source\fatfs/ff.c **** 
3270:source\fatfs/ff.c **** 	if (!dp) return FR_INVALID_OBJECT;
3271:source\fatfs/ff.c **** 
3272:source\fatfs/ff.c **** 	/* Get logical drive number */
3273:source\fatfs/ff.c **** 	res = find_volume(&fs, &path, 0);
3274:source\fatfs/ff.c **** 	if (res == FR_OK) {
3275:source\fatfs/ff.c **** 		dp->fs = fs;
3276:source\fatfs/ff.c **** 		INIT_BUF(*dp);
3277:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
3278:source\fatfs/ff.c **** 		FREE_BUF();
3279:source\fatfs/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
3280:source\fatfs/ff.c **** 			if (dp->dir) {						/* It is not the origin directory itself */
3281:source\fatfs/ff.c **** 				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
3282:source\fatfs/ff.c **** 					dp->sclust = ld_clust(fs, dp->dir);
3283:source\fatfs/ff.c **** 				else							/* The object is a file */
3284:source\fatfs/ff.c **** 					res = FR_NO_PATH;
3285:source\fatfs/ff.c **** 			}
3286:source\fatfs/ff.c **** 			if (res == FR_OK) {
3287:source\fatfs/ff.c **** 				dp->id = fs->id;
3288:source\fatfs/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
3289:source\fatfs/ff.c **** #if _FS_LOCK
3290:source\fatfs/ff.c **** 				if (res == FR_OK) {
3291:source\fatfs/ff.c **** 					if (dp->sclust) {
3292:source\fatfs/ff.c **** 						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
3293:source\fatfs/ff.c **** 						if (!dp->lockid)
3294:source\fatfs/ff.c **** 							res = FR_TOO_MANY_OPEN_FILES;
3295:source\fatfs/ff.c **** 					} else {
3296:source\fatfs/ff.c **** 						dp->lockid = 0;	/* Root directory need not to be locked */
3297:source\fatfs/ff.c **** 					}
3298:source\fatfs/ff.c **** 				}
3299:source\fatfs/ff.c **** #endif
3300:source\fatfs/ff.c **** 			}
3301:source\fatfs/ff.c **** 		}
3302:source\fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
3303:source\fatfs/ff.c **** 	}
3304:source\fatfs/ff.c **** 	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
3305:source\fatfs/ff.c **** 
3306:source\fatfs/ff.c **** 	LEAVE_FF(fs, res);
3307:source\fatfs/ff.c **** }
3308:source\fatfs/ff.c **** 
3309:source\fatfs/ff.c **** 
3310:source\fatfs/ff.c **** 
3311:source\fatfs/ff.c **** 
3312:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3313:source\fatfs/ff.c **** /* Close Directory                                                       */
3314:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3315:source\fatfs/ff.c **** 
3316:source\fatfs/ff.c **** FRESULT f_closedir (
3317:source\fatfs/ff.c **** 	DIR *dp		/* Pointer to the directory object to be closed */
3318:source\fatfs/ff.c **** )
3319:source\fatfs/ff.c **** {
3320:source\fatfs/ff.c **** 	FRESULT res;
3321:source\fatfs/ff.c **** 
3322:source\fatfs/ff.c **** 
3323:source\fatfs/ff.c **** 	res = validate(dp);
3324:source\fatfs/ff.c **** 	if (res == FR_OK) {
3325:source\fatfs/ff.c **** #if _FS_REENTRANT
3326:source\fatfs/ff.c **** 		FATFS *fs = dp->fs;
3327:source\fatfs/ff.c **** #endif
3328:source\fatfs/ff.c **** #if _FS_LOCK
3329:source\fatfs/ff.c **** 		if (dp->lockid)				/* Decrement sub-directory open counter */
3330:source\fatfs/ff.c **** 			res = dec_lock(dp->lockid);
3331:source\fatfs/ff.c **** 		if (res == FR_OK)
3332:source\fatfs/ff.c **** #endif
3333:source\fatfs/ff.c **** 			dp->fs = 0;				/* Invalidate directory object */
3334:source\fatfs/ff.c **** #if _FS_REENTRANT
3335:source\fatfs/ff.c **** 		unlock_fs(fs, FR_OK);		/* Unlock volume */
3336:source\fatfs/ff.c **** #endif
3337:source\fatfs/ff.c **** 	}
3338:source\fatfs/ff.c **** 	return res;
3339:source\fatfs/ff.c **** }
3340:source\fatfs/ff.c **** 
3341:source\fatfs/ff.c **** 
3342:source\fatfs/ff.c **** 
3343:source\fatfs/ff.c **** 
3344:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3345:source\fatfs/ff.c **** /* Read Directory Entries in Sequence                                    */
3346:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3347:source\fatfs/ff.c **** 
3348:source\fatfs/ff.c **** FRESULT f_readdir (
3349:source\fatfs/ff.c **** 	DIR* dp,			/* Pointer to the open directory object */
3350:source\fatfs/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
3351:source\fatfs/ff.c **** )
3352:source\fatfs/ff.c **** {
3353:source\fatfs/ff.c **** 	FRESULT res;
3354:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3355:source\fatfs/ff.c **** 
3356:source\fatfs/ff.c **** 
3357:source\fatfs/ff.c **** 	res = validate(dp);						/* Check validity of the object */
3358:source\fatfs/ff.c **** 	if (res == FR_OK) {
3359:source\fatfs/ff.c **** 		if (!fno) {
3360:source\fatfs/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
3361:source\fatfs/ff.c **** 		} else {
3362:source\fatfs/ff.c **** 			INIT_BUF(*dp);
3363:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
3364:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of directory */
3365:source\fatfs/ff.c **** 				dp->sect = 0;
3366:source\fatfs/ff.c **** 				res = FR_OK;
3367:source\fatfs/ff.c **** 			}
3368:source\fatfs/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
3369:source\fatfs/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
3370:source\fatfs/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
3371:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) {
3372:source\fatfs/ff.c **** 					dp->sect = 0;
3373:source\fatfs/ff.c **** 					res = FR_OK;
3374:source\fatfs/ff.c **** 				}
3375:source\fatfs/ff.c **** 			}
3376:source\fatfs/ff.c **** 			FREE_BUF();
3377:source\fatfs/ff.c **** 		}
3378:source\fatfs/ff.c **** 	}
3379:source\fatfs/ff.c **** 
3380:source\fatfs/ff.c **** 	LEAVE_FF(dp->fs, res);
3381:source\fatfs/ff.c **** }
3382:source\fatfs/ff.c **** 
3383:source\fatfs/ff.c **** 
3384:source\fatfs/ff.c **** 
3385:source\fatfs/ff.c **** #if _USE_FIND
3386:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3387:source\fatfs/ff.c **** /* Find next file                                                        */
3388:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3389:source\fatfs/ff.c **** 
3390:source\fatfs/ff.c **** FRESULT f_findnext (
3391:source\fatfs/ff.c **** 	DIR* dp,		/* Pointer to the open directory object */
3392:source\fatfs/ff.c **** 	FILINFO* fno	/* Pointer to the file information structure */
3393:source\fatfs/ff.c **** )
3394:source\fatfs/ff.c **** {
3395:source\fatfs/ff.c **** 	FRESULT res;
3396:source\fatfs/ff.c **** 
3397:source\fatfs/ff.c **** 
3398:source\fatfs/ff.c **** 	for (;;) {
3399:source\fatfs/ff.c **** 		res = f_readdir(dp, fno);		/* Get a directory item */
3400:source\fatfs/ff.c **** 		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory 
3401:source\fatfs/ff.c **** #if _USE_LFN
3402:source\fatfs/ff.c **** 		if (fno->lfname && pattern_matching(dp->pat, fno->lfname, 0, 0)) break;	/* Test for LFN if exist 
3403:source\fatfs/ff.c **** #endif
3404:source\fatfs/ff.c **** 		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;	/* Test for SFN */
3405:source\fatfs/ff.c **** 	}
3406:source\fatfs/ff.c **** 	return res;
3407:source\fatfs/ff.c **** 
3408:source\fatfs/ff.c **** }
3409:source\fatfs/ff.c **** 
3410:source\fatfs/ff.c **** 
3411:source\fatfs/ff.c **** 
3412:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3413:source\fatfs/ff.c **** /* Find first file                                                       */
3414:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3415:source\fatfs/ff.c **** 
3416:source\fatfs/ff.c **** FRESULT f_findfirst (
3417:source\fatfs/ff.c **** 	DIR* dp,				/* Pointer to the blank directory object */
3418:source\fatfs/ff.c **** 	FILINFO* fno,			/* Pointer to the file information structure */
3419:source\fatfs/ff.c **** 	const TCHAR* path,		/* Pointer to the directory to open */
3420:source\fatfs/ff.c **** 	const TCHAR* pattern	/* Pointer to the matching pattern */
3421:source\fatfs/ff.c **** )
3422:source\fatfs/ff.c **** {
3423:source\fatfs/ff.c **** 	FRESULT res;
3424:source\fatfs/ff.c **** 
3425:source\fatfs/ff.c **** 
3426:source\fatfs/ff.c **** 	dp->pat = pattern;		/* Save pointer to pattern string */
3427:source\fatfs/ff.c **** 	res = f_opendir(dp, path);		/* Open the target directory */
3428:source\fatfs/ff.c **** 	if (res == FR_OK)
3429:source\fatfs/ff.c **** 		res = f_findnext(dp, fno);	/* Find the first item */
3430:source\fatfs/ff.c **** 	return res;
3431:source\fatfs/ff.c **** }
3432:source\fatfs/ff.c **** 
3433:source\fatfs/ff.c **** #endif	/* _USE_FIND */
3434:source\fatfs/ff.c **** 
3435:source\fatfs/ff.c **** 
3436:source\fatfs/ff.c **** 
3437:source\fatfs/ff.c **** #if _FS_MINIMIZE == 0
3438:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3439:source\fatfs/ff.c **** /* Get File Status                                                       */
3440:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3441:source\fatfs/ff.c **** 
3442:source\fatfs/ff.c **** FRESULT f_stat (
3443:source\fatfs/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
3444:source\fatfs/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
3445:source\fatfs/ff.c **** )
3446:source\fatfs/ff.c **** {
3447:source\fatfs/ff.c **** 	FRESULT res;
3448:source\fatfs/ff.c **** 	DIR dj;
3449:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3450:source\fatfs/ff.c **** 
3451:source\fatfs/ff.c **** 
3452:source\fatfs/ff.c **** 	/* Get logical drive number */
3453:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
3454:source\fatfs/ff.c **** 	if (res == FR_OK) {
3455:source\fatfs/ff.c **** 		INIT_BUF(dj);
3456:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
3457:source\fatfs/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
3458:source\fatfs/ff.c **** 			if (dj.dir) {		/* Found an object */
3459:source\fatfs/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
3460:source\fatfs/ff.c **** 			} else {			/* It is root directory */
3461:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
3462:source\fatfs/ff.c **** 			}
3463:source\fatfs/ff.c **** 		}
3464:source\fatfs/ff.c **** 		FREE_BUF();
3465:source\fatfs/ff.c **** 	}
3466:source\fatfs/ff.c **** 
3467:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3468:source\fatfs/ff.c **** }
3469:source\fatfs/ff.c **** 
3470:source\fatfs/ff.c **** 
3471:source\fatfs/ff.c **** 
3472:source\fatfs/ff.c **** #if !_FS_READONLY
3473:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3474:source\fatfs/ff.c **** /* Get Number of Free Clusters                                           */
3475:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3476:source\fatfs/ff.c **** 
3477:source\fatfs/ff.c **** FRESULT f_getfree (
3478:source\fatfs/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
3479:source\fatfs/ff.c **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
3480:source\fatfs/ff.c **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
3481:source\fatfs/ff.c **** )
3482:source\fatfs/ff.c **** {
3483:source\fatfs/ff.c **** 	FRESULT res;
3484:source\fatfs/ff.c **** 	FATFS *fs;
3485:source\fatfs/ff.c **** 	DWORD n, clst, sect, stat;
3486:source\fatfs/ff.c **** 	UINT i;
3487:source\fatfs/ff.c **** 	BYTE fat, *p;
3488:source\fatfs/ff.c **** 
3489:source\fatfs/ff.c **** 
3490:source\fatfs/ff.c **** 	/* Get logical drive number */
3491:source\fatfs/ff.c **** 	res = find_volume(fatfs, &path, 0);
3492:source\fatfs/ff.c **** 	fs = *fatfs;
3493:source\fatfs/ff.c **** 	if (res == FR_OK) {
3494:source\fatfs/ff.c **** 		/* If free_clust is valid, return it without full cluster scan */
3495:source\fatfs/ff.c **** 		if (fs->free_clust <= fs->n_fatent - 2) {
3496:source\fatfs/ff.c **** 			*nclst = fs->free_clust;
3497:source\fatfs/ff.c **** 		} else {
3498:source\fatfs/ff.c **** 			/* Get number of free clusters */
3499:source\fatfs/ff.c **** 			fat = fs->fs_type;
3500:source\fatfs/ff.c **** 			n = 0;
3501:source\fatfs/ff.c **** 			if (fat == FS_FAT12) {
3502:source\fatfs/ff.c **** 				clst = 2;
3503:source\fatfs/ff.c **** 				do {
3504:source\fatfs/ff.c **** 					stat = get_fat(fs, clst);
3505:source\fatfs/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
3506:source\fatfs/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
3507:source\fatfs/ff.c **** 					if (stat == 0) n++;
3508:source\fatfs/ff.c **** 				} while (++clst < fs->n_fatent);
3509:source\fatfs/ff.c **** 			} else {
3510:source\fatfs/ff.c **** 				clst = fs->n_fatent;
3511:source\fatfs/ff.c **** 				sect = fs->fatbase;
3512:source\fatfs/ff.c **** 				i = 0; p = 0;
3513:source\fatfs/ff.c **** 				do {
3514:source\fatfs/ff.c **** 					if (!i) {
3515:source\fatfs/ff.c **** 						res = move_window(fs, sect++);
3516:source\fatfs/ff.c **** 						if (res != FR_OK) break;
3517:source\fatfs/ff.c **** 						p = fs->win.d8;
3518:source\fatfs/ff.c **** 						i = SS(fs);
3519:source\fatfs/ff.c **** 					}
3520:source\fatfs/ff.c **** 					if (fat == FS_FAT16) {
3521:source\fatfs/ff.c **** 						if (LD_WORD(p) == 0) n++;
3522:source\fatfs/ff.c **** 						p += 2; i -= 2;
3523:source\fatfs/ff.c **** 					} else {
3524:source\fatfs/ff.c **** 						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
3525:source\fatfs/ff.c **** 						p += 4; i -= 4;
3526:source\fatfs/ff.c **** 					}
3527:source\fatfs/ff.c **** 				} while (--clst);
3528:source\fatfs/ff.c **** 			}
3529:source\fatfs/ff.c **** 			fs->free_clust = n;
3530:source\fatfs/ff.c **** 			fs->fsi_flag |= 1;
3531:source\fatfs/ff.c **** 			*nclst = n;
3532:source\fatfs/ff.c **** 		}
3533:source\fatfs/ff.c **** 	}
3534:source\fatfs/ff.c **** 	LEAVE_FF(fs, res);
3535:source\fatfs/ff.c **** }
3536:source\fatfs/ff.c **** 
3537:source\fatfs/ff.c **** 
3538:source\fatfs/ff.c **** 
3539:source\fatfs/ff.c **** 
3540:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3541:source\fatfs/ff.c **** /* Truncate File                                                         */
3542:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3543:source\fatfs/ff.c **** 
3544:source\fatfs/ff.c **** FRESULT f_truncate (
3545:source\fatfs/ff.c **** 	FIL* fp		/* Pointer to the file object */
3546:source\fatfs/ff.c **** )
3547:source\fatfs/ff.c **** {
3548:source\fatfs/ff.c **** 	FRESULT res;
3549:source\fatfs/ff.c **** 	DWORD ncl;
3550:source\fatfs/ff.c **** 
3551:source\fatfs/ff.c **** 
3552:source\fatfs/ff.c **** 	res = validate(fp);						/* Check validity of the object */
3553:source\fatfs/ff.c **** 	if (res == FR_OK) {
3554:source\fatfs/ff.c **** 		if (fp->err) {						/* Check error */
3555:source\fatfs/ff.c **** 			res = (FRESULT)fp->err;
3556:source\fatfs/ff.c **** 		} else {
3557:source\fatfs/ff.c **** 			if (!(fp->flag & FA_WRITE))		/* Check access mode */
3558:source\fatfs/ff.c **** 				res = FR_DENIED;
3559:source\fatfs/ff.c **** 		}
3560:source\fatfs/ff.c **** 	}
3561:source\fatfs/ff.c **** 	if (res == FR_OK) {
3562:source\fatfs/ff.c **** 		if (fp->fsize > fp->fptr) {
3563:source\fatfs/ff.c **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
3564:source\fatfs/ff.c **** 			fp->flag |= FA__WRITTEN;
3565:source\fatfs/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
3566:source\fatfs/ff.c **** 				res = remove_chain(fp->fs, fp->sclust);
3567:source\fatfs/ff.c **** 				fp->sclust = 0;
3568:source\fatfs/ff.c **** 			} else {				/* When truncate a part of the file, remove remaining clusters */
3569:source\fatfs/ff.c **** 				ncl = get_fat(fp->fs, fp->clust);
3570:source\fatfs/ff.c **** 				res = FR_OK;
3571:source\fatfs/ff.c **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
3572:source\fatfs/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
3573:source\fatfs/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
3574:source\fatfs/ff.c **** 					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
3575:source\fatfs/ff.c **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
3576:source\fatfs/ff.c **** 				}
3577:source\fatfs/ff.c **** 			}
3578:source\fatfs/ff.c **** #if !_FS_TINY
3579:source\fatfs/ff.c **** 			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
3580:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
3581:source\fatfs/ff.c **** 					res = FR_DISK_ERR;
3582:source\fatfs/ff.c **** 				else
3583:source\fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
3584:source\fatfs/ff.c **** 			}
3585:source\fatfs/ff.c **** #endif
3586:source\fatfs/ff.c **** 		}
3587:source\fatfs/ff.c **** 		if (res != FR_OK) fp->err = (FRESULT)res;
3588:source\fatfs/ff.c **** 	}
3589:source\fatfs/ff.c **** 
3590:source\fatfs/ff.c **** 	LEAVE_FF(fp->fs, res);
3591:source\fatfs/ff.c **** }
3592:source\fatfs/ff.c **** 
3593:source\fatfs/ff.c **** 
3594:source\fatfs/ff.c **** 
3595:source\fatfs/ff.c **** 
3596:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3597:source\fatfs/ff.c **** /* Delete a File or Directory                                            */
3598:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3599:source\fatfs/ff.c **** 
3600:source\fatfs/ff.c **** FRESULT f_unlink (
3601:source\fatfs/ff.c **** 	const TCHAR* path		/* Pointer to the file or directory path */
3602:source\fatfs/ff.c **** )
3603:source\fatfs/ff.c **** {
3604:source\fatfs/ff.c **** 	FRESULT res;
3605:source\fatfs/ff.c **** 	DIR dj, sdj;
3606:source\fatfs/ff.c **** 	BYTE *dir;
3607:source\fatfs/ff.c **** 	DWORD dclst = 0;
3608:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3609:source\fatfs/ff.c **** 
3610:source\fatfs/ff.c **** 
3611:source\fatfs/ff.c **** 	/* Get logical drive number */
3612:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
3613:source\fatfs/ff.c **** 	if (res == FR_OK) {
3614:source\fatfs/ff.c **** 		INIT_BUF(dj);
3615:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
3616:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
3617:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
3618:source\fatfs/ff.c **** #if _FS_LOCK
3619:source\fatfs/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
3620:source\fatfs/ff.c **** #endif
3621:source\fatfs/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
3622:source\fatfs/ff.c **** 			dir = dj.dir;
3623:source\fatfs/ff.c **** 			if (!dir) {
3624:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
3625:source\fatfs/ff.c **** 			} else {
3626:source\fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_RDO)
3627:source\fatfs/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
3628:source\fatfs/ff.c **** 			}
3629:source\fatfs/ff.c **** 			if (res == FR_OK) {
3630:source\fatfs/ff.c **** 				dclst = ld_clust(dj.fs, dir);
3631:source\fatfs/ff.c **** 				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
3632:source\fatfs/ff.c **** #if _FS_RPATH
3633:source\fatfs/ff.c **** 					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
3634:source\fatfs/ff.c **** 						res = FR_DENIED;
3635:source\fatfs/ff.c **** 					} else
3636:source\fatfs/ff.c **** #endif
3637:source\fatfs/ff.c **** 					{
3638:source\fatfs/ff.c **** 						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
3639:source\fatfs/ff.c **** 						sdj.sclust = dclst;
3640:source\fatfs/ff.c **** 						res = dir_sdi(&sdj, 2);
3641:source\fatfs/ff.c **** 						if (res == FR_OK) {
3642:source\fatfs/ff.c **** 							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
3643:source\fatfs/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
3644:source\fatfs/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
3645:source\fatfs/ff.c **** 						}
3646:source\fatfs/ff.c **** 					}
3647:source\fatfs/ff.c **** 				}
3648:source\fatfs/ff.c **** 			}
3649:source\fatfs/ff.c **** 			if (res == FR_OK) {
3650:source\fatfs/ff.c **** 				res = dir_remove(&dj);		/* Remove the directory entry */
3651:source\fatfs/ff.c **** 				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
3652:source\fatfs/ff.c **** 					res = remove_chain(dj.fs, dclst);
3653:source\fatfs/ff.c **** 				if (res == FR_OK) res = sync_fs(dj.fs);
3654:source\fatfs/ff.c **** 			}
3655:source\fatfs/ff.c **** 		}
3656:source\fatfs/ff.c **** 		FREE_BUF();
3657:source\fatfs/ff.c **** 	}
3658:source\fatfs/ff.c **** 
3659:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3660:source\fatfs/ff.c **** }
3661:source\fatfs/ff.c **** 
3662:source\fatfs/ff.c **** 
3663:source\fatfs/ff.c **** 
3664:source\fatfs/ff.c **** 
3665:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3666:source\fatfs/ff.c **** /* Create a Directory                                                    */
3667:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3668:source\fatfs/ff.c **** 
3669:source\fatfs/ff.c **** FRESULT f_mkdir (
3670:source\fatfs/ff.c **** 	const TCHAR* path		/* Pointer to the directory path */
3671:source\fatfs/ff.c **** )
3672:source\fatfs/ff.c **** {
3673:source\fatfs/ff.c **** 	FRESULT res;
3674:source\fatfs/ff.c **** 	DIR dj;
3675:source\fatfs/ff.c **** 	BYTE *dir, n;
3676:source\fatfs/ff.c **** 	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
3677:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3678:source\fatfs/ff.c **** 
3679:source\fatfs/ff.c **** 
3680:source\fatfs/ff.c **** 	/* Get logical drive number */
3681:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
3682:source\fatfs/ff.c **** 	if (res == FR_OK) {
3683:source\fatfs/ff.c **** 		INIT_BUF(dj);
3684:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
3685:source\fatfs/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
3686:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
3687:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
3688:source\fatfs/ff.c **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
3689:source\fatfs/ff.c **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
3690:source\fatfs/ff.c **** 			res = FR_OK;
3691:source\fatfs/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
3692:source\fatfs/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
3693:source\fatfs/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
3694:source\fatfs/ff.c **** 			if (res == FR_OK)					/* Flush FAT */
3695:source\fatfs/ff.c **** 				res = sync_window(dj.fs);
3696:source\fatfs/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
3697:source\fatfs/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
3698:source\fatfs/ff.c **** 				dir = dj.fs->win.d8;
3699:source\fatfs/ff.c **** 				mem_set(dir, 0, SS(dj.fs));
3700:source\fatfs/ff.c **** 				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
3701:source\fatfs/ff.c **** 				dir[DIR_Name] = '.';
3702:source\fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;
3703:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);
3704:source\fatfs/ff.c **** 				st_clust(dir, dcl);
3705:source\fatfs/ff.c **** 				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
3706:source\fatfs/ff.c **** 				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
3707:source\fatfs/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
3708:source\fatfs/ff.c **** 					pcl = 0;
3709:source\fatfs/ff.c **** 				st_clust(dir + SZ_DIRE, pcl);
3710:source\fatfs/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
3711:source\fatfs/ff.c **** 					dj.fs->winsect = dsc++;
3712:source\fatfs/ff.c **** 					dj.fs->wflag = 1;
3713:source\fatfs/ff.c **** 					res = sync_window(dj.fs);
3714:source\fatfs/ff.c **** 					if (res != FR_OK) break;
3715:source\fatfs/ff.c **** 					mem_set(dir, 0, SS(dj.fs));
3716:source\fatfs/ff.c **** 				}
3717:source\fatfs/ff.c **** 			}
3718:source\fatfs/ff.c **** 			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
3719:source\fatfs/ff.c **** 			if (res != FR_OK) {
3720:source\fatfs/ff.c **** 				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
3721:source\fatfs/ff.c **** 			} else {
3722:source\fatfs/ff.c **** 				dir = dj.dir;
3723:source\fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
3724:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
3725:source\fatfs/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
3726:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
3727:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
3728:source\fatfs/ff.c **** 			}
3729:source\fatfs/ff.c **** 		}
3730:source\fatfs/ff.c **** 		FREE_BUF();
3731:source\fatfs/ff.c **** 	}
3732:source\fatfs/ff.c **** 
3733:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3734:source\fatfs/ff.c **** }
3735:source\fatfs/ff.c **** 
3736:source\fatfs/ff.c **** 
3737:source\fatfs/ff.c **** 
3738:source\fatfs/ff.c **** 
3739:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3740:source\fatfs/ff.c **** /* Change Attribute                                                      */
3741:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3742:source\fatfs/ff.c **** 
3743:source\fatfs/ff.c **** FRESULT f_chmod (
3744:source\fatfs/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
3745:source\fatfs/ff.c **** 	BYTE attr,			/* Attribute bits */
3746:source\fatfs/ff.c **** 	BYTE mask			/* Attribute mask to change */
3747:source\fatfs/ff.c **** )
3748:source\fatfs/ff.c **** {
3749:source\fatfs/ff.c **** 	FRESULT res;
3750:source\fatfs/ff.c **** 	DIR dj;
3751:source\fatfs/ff.c **** 	BYTE *dir;
3752:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3753:source\fatfs/ff.c **** 
3754:source\fatfs/ff.c **** 
3755:source\fatfs/ff.c **** 	/* Get logical drive number */
3756:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
3757:source\fatfs/ff.c **** 	if (res == FR_OK) {
3758:source\fatfs/ff.c **** 		INIT_BUF(dj);
3759:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
3760:source\fatfs/ff.c **** 		FREE_BUF();
3761:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
3762:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
3763:source\fatfs/ff.c **** 		if (res == FR_OK) {
3764:source\fatfs/ff.c **** 			dir = dj.dir;
3765:source\fatfs/ff.c **** 			if (!dir) {						/* Is it a root directory? */
3766:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
3767:source\fatfs/ff.c **** 			} else {						/* File or sub directory */
3768:source\fatfs/ff.c **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
3769:source\fatfs/ff.c **** 				dir[DIR_Attr] = (attr & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
3770:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
3771:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
3772:source\fatfs/ff.c **** 			}
3773:source\fatfs/ff.c **** 		}
3774:source\fatfs/ff.c **** 	}
3775:source\fatfs/ff.c **** 
3776:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3777:source\fatfs/ff.c **** }
3778:source\fatfs/ff.c **** 
3779:source\fatfs/ff.c **** 
3780:source\fatfs/ff.c **** 
3781:source\fatfs/ff.c **** 
3782:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3783:source\fatfs/ff.c **** /* Rename File/Directory                                                 */
3784:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3785:source\fatfs/ff.c **** 
3786:source\fatfs/ff.c **** FRESULT f_rename (
3787:source\fatfs/ff.c **** 	const TCHAR* path_old,	/* Pointer to the object to be renamed */
3788:source\fatfs/ff.c **** 	const TCHAR* path_new	/* Pointer to the new name */
3789:source\fatfs/ff.c **** )
3790:source\fatfs/ff.c **** {
3791:source\fatfs/ff.c **** 	FRESULT res;
3792:source\fatfs/ff.c **** 	DIR djo, djn;
3793:source\fatfs/ff.c **** 	BYTE buf[21], *dir;
3794:source\fatfs/ff.c **** 	DWORD dw;
3795:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3796:source\fatfs/ff.c **** 
3797:source\fatfs/ff.c **** 
3798:source\fatfs/ff.c **** 	/* Get logical drive number of the source object */
3799:source\fatfs/ff.c **** 	res = find_volume(&djo.fs, &path_old, 1);
3800:source\fatfs/ff.c **** 	if (res == FR_OK) {
3801:source\fatfs/ff.c **** 		djn.fs = djo.fs;
3802:source\fatfs/ff.c **** 		INIT_BUF(djo);
3803:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
3804:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
3805:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
3806:source\fatfs/ff.c **** #if _FS_LOCK
3807:source\fatfs/ff.c **** 		if (res == FR_OK) res = chk_lock(&djo, 2);
3808:source\fatfs/ff.c **** #endif
3809:source\fatfs/ff.c **** 		if (res == FR_OK) {						/* Old object is found */
3810:source\fatfs/ff.c **** 			if (!djo.dir) {						/* Is root dir? */
3811:source\fatfs/ff.c **** 				res = FR_NO_FILE;
3812:source\fatfs/ff.c **** 			} else {
3813:source\fatfs/ff.c **** 				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about object except name */
3814:source\fatfs/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
3815:source\fatfs/ff.c **** 				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
3816:source\fatfs/ff.c **** 					res = follow_path(&djn, path_new);	/* and make sure if new object name is not conflicting */
3817:source\fatfs/ff.c **** 				else
3818:source\fatfs/ff.c **** 					res = FR_INVALID_DRIVE;
3819:source\fatfs/ff.c **** 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
3820:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
3821:source\fatfs/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
3822:source\fatfs/ff.c **** 					if (res == FR_OK) {
3823:source\fatfs/ff.c **** /* Start of critical section where any interruption can cause a cross-link */
3824:source\fatfs/ff.c **** 						dir = djn.dir;					/* Copy information about object except name */
3825:source\fatfs/ff.c **** 						mem_cpy(dir + 13, buf + 2, 19);
3826:source\fatfs/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
3827:source\fatfs/ff.c **** 						djo.fs->wflag = 1;
3828:source\fatfs/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.sclust != djn.sclust) {	/* Update .. entry in the sub-dir
3829:source\fatfs/ff.c **** 							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
3830:source\fatfs/ff.c **** 							if (!dw) {
3831:source\fatfs/ff.c **** 								res = FR_INT_ERR;
3832:source\fatfs/ff.c **** 							} else {
3833:source\fatfs/ff.c **** 								res = move_window(djo.fs, dw);
3834:source\fatfs/ff.c **** 								dir = djo.fs->win.d8 + SZ_DIRE * 1;	/* Ptr to .. entry */
3835:source\fatfs/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
3836:source\fatfs/ff.c **** 									st_clust(dir, djn.sclust);
3837:source\fatfs/ff.c **** 									djo.fs->wflag = 1;
3838:source\fatfs/ff.c **** 								}
3839:source\fatfs/ff.c **** 							}
3840:source\fatfs/ff.c **** 						}
3841:source\fatfs/ff.c **** 						if (res == FR_OK) {
3842:source\fatfs/ff.c **** 							res = dir_remove(&djo);		/* Remove old entry */
3843:source\fatfs/ff.c **** 							if (res == FR_OK)
3844:source\fatfs/ff.c **** 								res = sync_fs(djo.fs);
3845:source\fatfs/ff.c **** 						}
3846:source\fatfs/ff.c **** /* End of critical section */
3847:source\fatfs/ff.c **** 					}
3848:source\fatfs/ff.c **** 				}
3849:source\fatfs/ff.c **** 			}
3850:source\fatfs/ff.c **** 		}
3851:source\fatfs/ff.c **** 		FREE_BUF();
3852:source\fatfs/ff.c **** 	}
3853:source\fatfs/ff.c **** 
3854:source\fatfs/ff.c **** 	LEAVE_FF(djo.fs, res);
3855:source\fatfs/ff.c **** }
3856:source\fatfs/ff.c **** 
3857:source\fatfs/ff.c **** 
3858:source\fatfs/ff.c **** 
3859:source\fatfs/ff.c **** 
3860:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3861:source\fatfs/ff.c **** /* Change Timestamp                                                      */
3862:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3863:source\fatfs/ff.c **** 
3864:source\fatfs/ff.c **** FRESULT f_utime (
3865:source\fatfs/ff.c **** 	const TCHAR* path,	/* Pointer to the file/directory name */
3866:source\fatfs/ff.c **** 	const FILINFO* fno	/* Pointer to the time stamp to be set */
3867:source\fatfs/ff.c **** )
3868:source\fatfs/ff.c **** {
3869:source\fatfs/ff.c **** 	FRESULT res;
3870:source\fatfs/ff.c **** 	DIR dj;
3871:source\fatfs/ff.c **** 	BYTE *dir;
3872:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
3873:source\fatfs/ff.c **** 
3874:source\fatfs/ff.c **** 
3875:source\fatfs/ff.c **** 	/* Get logical drive number */
3876:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
3877:source\fatfs/ff.c **** 	if (res == FR_OK) {
3878:source\fatfs/ff.c **** 		INIT_BUF(dj);
3879:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
3880:source\fatfs/ff.c **** 		FREE_BUF();
3881:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
3882:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
3883:source\fatfs/ff.c **** 		if (res == FR_OK) {
3884:source\fatfs/ff.c **** 			dir = dj.dir;
3885:source\fatfs/ff.c **** 			if (!dir) {					/* Root directory */
3886:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
3887:source\fatfs/ff.c **** 			} else {					/* File or sub-directory */
3888:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_WrtTime, fno->ftime);
3889:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_WrtDate, fno->fdate);
3890:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
3891:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
3892:source\fatfs/ff.c **** 			}
3893:source\fatfs/ff.c **** 		}
3894:source\fatfs/ff.c **** 	}
3895:source\fatfs/ff.c **** 
3896:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3897:source\fatfs/ff.c **** }
3898:source\fatfs/ff.c **** 
3899:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
3900:source\fatfs/ff.c **** #endif /* _FS_MINIMIZE == 0 */
3901:source\fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
3902:source\fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 2 */
3903:source\fatfs/ff.c **** 
3904:source\fatfs/ff.c **** 
3905:source\fatfs/ff.c **** 
3906:source\fatfs/ff.c **** 
3907:source\fatfs/ff.c **** #if _USE_LABEL
3908:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3909:source\fatfs/ff.c **** /* Get volume label                                                      */
3910:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3911:source\fatfs/ff.c **** 
3912:source\fatfs/ff.c **** FRESULT f_getlabel (
3913:source\fatfs/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
3914:source\fatfs/ff.c **** 	TCHAR* label,		/* Pointer to a buffer to return the volume label */
3915:source\fatfs/ff.c **** 	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
3916:source\fatfs/ff.c **** )
3917:source\fatfs/ff.c **** {
3918:source\fatfs/ff.c **** 	FRESULT res;
3919:source\fatfs/ff.c **** 	DIR dj;
3920:source\fatfs/ff.c **** 	UINT i, j;
3921:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
3922:source\fatfs/ff.c **** 	WCHAR w;
3923:source\fatfs/ff.c **** #endif
3924:source\fatfs/ff.c **** 
3925:source\fatfs/ff.c **** 
3926:source\fatfs/ff.c **** 	/* Get logical drive number */
3927:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
3928:source\fatfs/ff.c **** 
3929:source\fatfs/ff.c **** 	/* Get volume label */
3930:source\fatfs/ff.c **** 	if (res == FR_OK && label) {
3931:source\fatfs/ff.c **** 		dj.sclust = 0;					/* Open root directory */
3932:source\fatfs/ff.c **** 		res = dir_sdi(&dj, 0);
3933:source\fatfs/ff.c **** 		if (res == FR_OK) {
3934:source\fatfs/ff.c **** 			res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
3935:source\fatfs/ff.c **** 			if (res == FR_OK) {			/* A volume label is exist */
3936:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
3937:source\fatfs/ff.c **** 				i = j = 0;
3938:source\fatfs/ff.c **** 				do {
3939:source\fatfs/ff.c **** 					w = (i < 11) ? dj.dir[i++] : ' ';
3940:source\fatfs/ff.c **** 					if (IsDBCS1(w) && i < 11 && IsDBCS2(dj.dir[i]))
3941:source\fatfs/ff.c **** 						w = w << 8 | dj.dir[i++];
3942:source\fatfs/ff.c **** 					label[j++] = ff_convert(w, 1);	/* OEM -> Unicode */
3943:source\fatfs/ff.c **** 				} while (j < 11);
3944:source\fatfs/ff.c **** #else
3945:source\fatfs/ff.c **** 				mem_cpy(label, dj.dir, 11);
3946:source\fatfs/ff.c **** #endif
3947:source\fatfs/ff.c **** 				j = 11;
3948:source\fatfs/ff.c **** 				do {
3949:source\fatfs/ff.c **** 					label[j] = 0;
3950:source\fatfs/ff.c **** 					if (!j) break;
3951:source\fatfs/ff.c **** 				} while (label[--j] == ' ');
3952:source\fatfs/ff.c **** 			}
3953:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) {	/* No label, return nul string */
3954:source\fatfs/ff.c **** 				label[0] = 0;
3955:source\fatfs/ff.c **** 				res = FR_OK;
3956:source\fatfs/ff.c **** 			}
3957:source\fatfs/ff.c **** 		}
3958:source\fatfs/ff.c **** 	}
3959:source\fatfs/ff.c **** 
3960:source\fatfs/ff.c **** 	/* Get volume serial number */
3961:source\fatfs/ff.c **** 	if (res == FR_OK && vsn) {
3962:source\fatfs/ff.c **** 		res = move_window(dj.fs, dj.fs->volbase);
3963:source\fatfs/ff.c **** 		if (res == FR_OK) {
3964:source\fatfs/ff.c **** 			i = dj.fs->fs_type == FS_FAT32 ? BS_VolID32 : BS_VolID;
3965:source\fatfs/ff.c **** 			*vsn = LD_DWORD(&dj.fs->win.d8[i]);
3966:source\fatfs/ff.c **** 		}
3967:source\fatfs/ff.c **** 	}
3968:source\fatfs/ff.c **** 
3969:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
3970:source\fatfs/ff.c **** }
3971:source\fatfs/ff.c **** 
3972:source\fatfs/ff.c **** 
3973:source\fatfs/ff.c **** 
3974:source\fatfs/ff.c **** #if !_FS_READONLY
3975:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3976:source\fatfs/ff.c **** /* Set volume label                                                      */
3977:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3978:source\fatfs/ff.c **** 
3979:source\fatfs/ff.c **** FRESULT f_setlabel (
3980:source\fatfs/ff.c **** 	const TCHAR* label	/* Pointer to the volume label to set */
3981:source\fatfs/ff.c **** )
3982:source\fatfs/ff.c **** {
3983:source\fatfs/ff.c **** 	FRESULT res;
3984:source\fatfs/ff.c **** 	DIR dj;
3985:source\fatfs/ff.c **** 	BYTE vn[11];
3986:source\fatfs/ff.c **** 	UINT i, j, sl;
3987:source\fatfs/ff.c **** 	WCHAR w;
3988:source\fatfs/ff.c **** 	DWORD tm;
3989:source\fatfs/ff.c **** 
3990:source\fatfs/ff.c **** 
3991:source\fatfs/ff.c **** 	/* Get logical drive number */
3992:source\fatfs/ff.c **** 	res = find_volume(&dj.fs, &label, 1);
3993:source\fatfs/ff.c **** 	if (res) LEAVE_FF(dj.fs, res);
3994:source\fatfs/ff.c **** 
3995:source\fatfs/ff.c **** 	/* Create a volume label in directory form */
3996:source\fatfs/ff.c **** 	vn[0] = 0;
3997:source\fatfs/ff.c **** 	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
3998:source\fatfs/ff.c **** 	for ( ; sl && label[sl - 1] == ' '; sl--) ;	/* Remove trailing spaces */
3999:source\fatfs/ff.c **** 	if (sl) {	/* Create volume label in directory form */
4000:source\fatfs/ff.c **** 		i = j = 0;
4001:source\fatfs/ff.c **** 		do {
4002:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
4003:source\fatfs/ff.c **** 			w = ff_convert(ff_wtoupper(label[i++]), 0);
4004:source\fatfs/ff.c **** #else
4005:source\fatfs/ff.c **** 			w = (BYTE)label[i++];
4006:source\fatfs/ff.c **** 			if (IsDBCS1(w))
4007:source\fatfs/ff.c **** 				w = (j < 10 && i < sl && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
4008:source\fatfs/ff.c **** #if _USE_LFN
4009:source\fatfs/ff.c **** 			w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
4010:source\fatfs/ff.c **** #else
4011:source\fatfs/ff.c **** 			if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
4012:source\fatfs/ff.c **** #ifdef _EXCVT
4013:source\fatfs/ff.c **** 			if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
4014:source\fatfs/ff.c **** #else
4015:source\fatfs/ff.c **** 			if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
4016:source\fatfs/ff.c **** #endif
4017:source\fatfs/ff.c **** #endif
4018:source\fatfs/ff.c **** #endif
4019:source\fatfs/ff.c **** 			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject i
4020:source\fatfs/ff.c **** 				LEAVE_FF(dj.fs, FR_INVALID_NAME);
4021:source\fatfs/ff.c **** 			if (w >= 0x100) vn[j++] = (BYTE)(w >> 8);
4022:source\fatfs/ff.c **** 			vn[j++] = (BYTE)w;
4023:source\fatfs/ff.c **** 		} while (i < sl);
4024:source\fatfs/ff.c **** 		while (j < 11) vn[j++] = ' ';	/* Fill remaining name field */
4025:source\fatfs/ff.c **** 		if (vn[0] == DDEM) LEAVE_FF(dj.fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
4026:source\fatfs/ff.c **** 	}
4027:source\fatfs/ff.c **** 
4028:source\fatfs/ff.c **** 	/* Set volume label */
4029:source\fatfs/ff.c **** 	dj.sclust = 0;					/* Open root directory */
4030:source\fatfs/ff.c **** 	res = dir_sdi(&dj, 0);
4031:source\fatfs/ff.c **** 	if (res == FR_OK) {
4032:source\fatfs/ff.c **** 		res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
4033:source\fatfs/ff.c **** 		if (res == FR_OK) {			/* A volume label is found */
4034:source\fatfs/ff.c **** 			if (vn[0]) {
4035:source\fatfs/ff.c **** 				mem_cpy(dj.dir, vn, 11);	/* Change the volume label name */
4036:source\fatfs/ff.c **** 				tm = GET_FATTIME();
4037:source\fatfs/ff.c **** 				ST_DWORD(dj.dir + DIR_WrtTime, tm);
4038:source\fatfs/ff.c **** 			} else {
4039:source\fatfs/ff.c **** 				dj.dir[0] = DDEM;			/* Remove the volume label */
4040:source\fatfs/ff.c **** 			}
4041:source\fatfs/ff.c **** 			dj.fs->wflag = 1;
4042:source\fatfs/ff.c **** 			res = sync_fs(dj.fs);
4043:source\fatfs/ff.c **** 		} else {					/* No volume label is found or error */
4044:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) {
4045:source\fatfs/ff.c **** 				res = FR_OK;
4046:source\fatfs/ff.c **** 				if (vn[0]) {				/* Create volume label as new */
4047:source\fatfs/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry for volume label */
4048:source\fatfs/ff.c **** 					if (res == FR_OK) {
4049:source\fatfs/ff.c **** 						mem_set(dj.dir, 0, SZ_DIRE);	/* Set volume label */
4050:source\fatfs/ff.c **** 						mem_cpy(dj.dir, vn, 11);
4051:source\fatfs/ff.c **** 						dj.dir[DIR_Attr] = AM_VOL;
4052:source\fatfs/ff.c **** 						tm = GET_FATTIME();
4053:source\fatfs/ff.c **** 						ST_DWORD(dj.dir + DIR_WrtTime, tm);
4054:source\fatfs/ff.c **** 						dj.fs->wflag = 1;
4055:source\fatfs/ff.c **** 						res = sync_fs(dj.fs);
4056:source\fatfs/ff.c **** 					}
4057:source\fatfs/ff.c **** 				}
4058:source\fatfs/ff.c **** 			}
4059:source\fatfs/ff.c **** 		}
4060:source\fatfs/ff.c **** 	}
4061:source\fatfs/ff.c **** 
4062:source\fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
4063:source\fatfs/ff.c **** }
4064:source\fatfs/ff.c **** 
4065:source\fatfs/ff.c **** #endif /* !_FS_READONLY */
4066:source\fatfs/ff.c **** #endif /* _USE_LABEL */
4067:source\fatfs/ff.c **** 
4068:source\fatfs/ff.c **** 
4069:source\fatfs/ff.c **** 
4070:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4071:source\fatfs/ff.c **** /* Forward data to the stream directly (available on only tiny cfg)      */
4072:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4073:source\fatfs/ff.c **** #if _USE_FORWARD && _FS_TINY
4074:source\fatfs/ff.c **** 
4075:source\fatfs/ff.c **** FRESULT f_forward (
4076:source\fatfs/ff.c **** 	FIL* fp, 						/* Pointer to the file object */
4077:source\fatfs/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
4078:source\fatfs/ff.c **** 	UINT btf,						/* Number of bytes to forward */
4079:source\fatfs/ff.c **** 	UINT* bf						/* Pointer to number of bytes forwarded */
4080:source\fatfs/ff.c **** )
4081:source\fatfs/ff.c **** {
4082:source\fatfs/ff.c **** 	FRESULT res;
4083:source\fatfs/ff.c **** 	DWORD remain, clst, sect;
4084:source\fatfs/ff.c **** 	UINT rcnt;
4085:source\fatfs/ff.c **** 	BYTE csect;
4086:source\fatfs/ff.c **** 
4087:source\fatfs/ff.c **** 
4088:source\fatfs/ff.c **** 	*bf = 0;	/* Clear transfer byte counter */
4089:source\fatfs/ff.c **** 
4090:source\fatfs/ff.c **** 	res = validate(fp);								/* Check validity of the object */
4091:source\fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
4092:source\fatfs/ff.c **** 	if (fp->err)									/* Check error */
4093:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
4094:source\fatfs/ff.c **** 	if (!(fp->flag & FA_READ))						/* Check access mode */
4095:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
4096:source\fatfs/ff.c **** 
4097:source\fatfs/ff.c **** 	remain = fp->fsize - fp->fptr;
4098:source\fatfs/ff.c **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
4099:source\fatfs/ff.c **** 
4100:source\fatfs/ff.c **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream becomes busy */
4101:source\fatfs/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
4102:source\fatfs/ff.c **** 		csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
4103:source\fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
4104:source\fatfs/ff.c **** 			if (!csect) {							/* On the cluster boundary? */
4105:source\fatfs/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
4106:source\fatfs/ff.c **** 					fp->sclust : get_fat(fp->fs, fp->clust);
4107:source\fatfs/ff.c **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
4108:source\fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
4109:source\fatfs/ff.c **** 				fp->clust = clst;					/* Update current cluster */
4110:source\fatfs/ff.c **** 			}
4111:source\fatfs/ff.c **** 		}
4112:source\fatfs/ff.c **** 		sect = clust2sect(fp->fs, fp->clust);		/* Get current data sector */
4113:source\fatfs/ff.c **** 		if (!sect) ABORT(fp->fs, FR_INT_ERR);
4114:source\fatfs/ff.c **** 		sect += csect;
4115:source\fatfs/ff.c **** 		if (move_window(fp->fs, sect) != FR_OK)		/* Move sector window */
4116:source\fatfs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
4117:source\fatfs/ff.c **** 		fp->dsect = sect;
4118:source\fatfs/ff.c **** 		rcnt = SS(fp->fs) - (WORD)(fp->fptr % SS(fp->fs));	/* Forward data from sector window */
4119:source\fatfs/ff.c **** 		if (rcnt > btf) rcnt = btf;
4120:source\fatfs/ff.c **** 		rcnt = (*func)(&fp->fs->win.d8[(WORD)fp->fptr % SS(fp->fs)], rcnt);
4121:source\fatfs/ff.c **** 		if (!rcnt) ABORT(fp->fs, FR_INT_ERR);
4122:source\fatfs/ff.c **** 	}
4123:source\fatfs/ff.c **** 
4124:source\fatfs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
4125:source\fatfs/ff.c **** }
4126:source\fatfs/ff.c **** #endif /* _USE_FORWARD */
4127:source\fatfs/ff.c **** 
4128:source\fatfs/ff.c **** 
4129:source\fatfs/ff.c **** 
4130:source\fatfs/ff.c **** #if _USE_MKFS && !_FS_READONLY
4131:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4132:source\fatfs/ff.c **** /* Create file system on the logical drive                               */
4133:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4134:source\fatfs/ff.c **** #define N_ROOTDIR	512		/* Number of root directory entries for FAT12/16 */
4135:source\fatfs/ff.c **** #define N_FATS		1		/* Number of FATs (1 or 2) */
4136:source\fatfs/ff.c **** 
4137:source\fatfs/ff.c **** 
4138:source\fatfs/ff.c **** FRESULT f_mkfs (
4139:source\fatfs/ff.c **** 	const TCHAR* path,	/* Logical drive number */
4140:source\fatfs/ff.c **** 	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
4141:source\fatfs/ff.c **** 	UINT au				/* Size of allocation unit in unit of byte or sector */
4142:source\fatfs/ff.c **** )
4143:source\fatfs/ff.c **** {
4144:source\fatfs/ff.c **** 	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
4145:source\fatfs/ff.c **** 	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
4146:source\fatfs/ff.c **** 	int vol;
4147:source\fatfs/ff.c **** 	BYTE fmt, md, sys, *tbl, pdrv, part;
4148:source\fatfs/ff.c **** 	DWORD n_clst, vs, n, wsect;
4149:source\fatfs/ff.c **** 	UINT i;
4150:source\fatfs/ff.c **** 	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
4151:source\fatfs/ff.c **** 	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
4152:source\fatfs/ff.c **** 	FATFS *fs;
4153:source\fatfs/ff.c **** 	DSTATUS stat;
4154:source\fatfs/ff.c **** #if _USE_TRIM
4155:source\fatfs/ff.c **** 	DWORD eb[2];
4156:source\fatfs/ff.c **** #endif
4157:source\fatfs/ff.c **** 
4158:source\fatfs/ff.c **** 
4159:source\fatfs/ff.c **** 	/* Check mounted drive and clear work area */
4160:source\fatfs/ff.c **** 	if (sfd > 1) return FR_INVALID_PARAMETER;
4161:source\fatfs/ff.c **** 	vol = get_ldnumber(&path);
4162:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
4163:source\fatfs/ff.c **** 	fs = FatFs[vol];
4164:source\fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;
4165:source\fatfs/ff.c **** 	fs->fs_type = 0;
4166:source\fatfs/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
4167:source\fatfs/ff.c **** 	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
4168:source\fatfs/ff.c **** 
4169:source\fatfs/ff.c **** 	/* Get disk statics */
4170:source\fatfs/ff.c **** 	stat = disk_initialize(pdrv);
4171:source\fatfs/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
4172:source\fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
4173:source\fatfs/ff.c **** #if _MAX_SS != _MIN_SS		/* Get disk sector size */
4174:source\fatfs/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS || SS(fs) < _MIN_SS)
4175:source\fatfs/ff.c **** 		return FR_DISK_ERR;
4176:source\fatfs/ff.c **** #endif
4177:source\fatfs/ff.c **** 	if (_MULTI_PARTITION && part) {
4178:source\fatfs/ff.c **** 		/* Get partition information from partition table in the MBR */
4179:source\fatfs/ff.c **** 		if (disk_read(pdrv, fs->win.d8, 0, 1) != RES_OK) return FR_DISK_ERR;
4180:source\fatfs/ff.c **** 		if (LD_WORD(fs->win.d8 + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
4181:source\fatfs/ff.c **** 		tbl = &fs->win.d8[MBR_Table + (part - 1) * SZ_PTE];
4182:source\fatfs/ff.c **** 		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
4183:source\fatfs/ff.c **** 		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
4184:source\fatfs/ff.c **** 		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
4185:source\fatfs/ff.c **** 	} else {
4186:source\fatfs/ff.c **** 		/* Create a partition in this function */
4187:source\fatfs/ff.c **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
4188:source\fatfs/ff.c **** 			return FR_DISK_ERR;
4189:source\fatfs/ff.c **** 		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
4190:source\fatfs/ff.c **** 		n_vol -= b_vol;				/* Volume size */
4191:source\fatfs/ff.c **** 	}
4192:source\fatfs/ff.c **** 
4193:source\fatfs/ff.c **** 	if (au & (au - 1)) au = 0;
4194:source\fatfs/ff.c **** 	if (!au) {						/* AU auto selection */
4195:source\fatfs/ff.c **** 		vs = n_vol / (2000 / (SS(fs) / 512));
4196:source\fatfs/ff.c **** 		for (i = 0; vs < vst[i]; i++) ;
4197:source\fatfs/ff.c **** 		au = cst[i];
4198:source\fatfs/ff.c **** 	}
4199:source\fatfs/ff.c **** 	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
4200:source\fatfs/ff.c **** 	if (!au) au = 1;
4201:source\fatfs/ff.c **** 	if (au > 128) au = 128;
4202:source\fatfs/ff.c **** 
4203:source\fatfs/ff.c **** 	/* Pre-compute number of clusters and FAT sub-type */
4204:source\fatfs/ff.c **** 	n_clst = n_vol / au;
4205:source\fatfs/ff.c **** 	fmt = FS_FAT12;
4206:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
4207:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
4208:source\fatfs/ff.c **** 
4209:source\fatfs/ff.c **** 	/* Determine offset and size of FAT structure */
4210:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
4211:source\fatfs/ff.c **** 		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
4212:source\fatfs/ff.c **** 		n_rsv = 32;
4213:source\fatfs/ff.c **** 		n_dir = 0;
4214:source\fatfs/ff.c **** 	} else {
4215:source\fatfs/ff.c **** 		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
4216:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
4217:source\fatfs/ff.c **** 		n_rsv = 1;
4218:source\fatfs/ff.c **** 		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
4219:source\fatfs/ff.c **** 	}
4220:source\fatfs/ff.c **** 	b_fat = b_vol + n_rsv;				/* FAT area start sector */
4221:source\fatfs/ff.c **** 	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
4222:source\fatfs/ff.c **** 	b_data = b_dir + n_dir;				/* Data area start sector */
4223:source\fatfs/ff.c **** 	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
4224:source\fatfs/ff.c **** 
4225:source\fatfs/ff.c **** 	/* Align data start sector to erase block boundary (for flash memory media) */
4226:source\fatfs/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
4227:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
4228:source\fatfs/ff.c **** 	n = (n - b_data) / N_FATS;
4229:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
4230:source\fatfs/ff.c **** 		n_rsv += n;
4231:source\fatfs/ff.c **** 		b_fat += n;
4232:source\fatfs/ff.c **** 	} else {					/* FAT12/16: Expand FAT size */
4233:source\fatfs/ff.c **** 		n_fat += n;
4234:source\fatfs/ff.c **** 	}
4235:source\fatfs/ff.c **** 
4236:source\fatfs/ff.c **** 	/* Determine number of clusters and final check of validity of the FAT sub-type */
4237:source\fatfs/ff.c **** 	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
4238:source\fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
4239:source\fatfs/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
4240:source\fatfs/ff.c **** 		return FR_MKFS_ABORTED;
4241:source\fatfs/ff.c **** 
4242:source\fatfs/ff.c **** 	/* Determine system ID in the partition table */
4243:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
4244:source\fatfs/ff.c **** 		sys = 0x0C;		/* FAT32X */
4245:source\fatfs/ff.c **** 	} else {
4246:source\fatfs/ff.c **** 		if (fmt == FS_FAT12 && n_vol < 0x10000) {
4247:source\fatfs/ff.c **** 			sys = 0x01;	/* FAT12(<65536) */
4248:source\fatfs/ff.c **** 		} else {
4249:source\fatfs/ff.c **** 			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
4250:source\fatfs/ff.c **** 		}
4251:source\fatfs/ff.c **** 	}
4252:source\fatfs/ff.c **** 
4253:source\fatfs/ff.c **** 	if (_MULTI_PARTITION && part) {
4254:source\fatfs/ff.c **** 		/* Update system ID in the partition table */
4255:source\fatfs/ff.c **** 		tbl = &fs->win.d8[MBR_Table + (part - 1) * SZ_PTE];
4256:source\fatfs/ff.c **** 		tbl[4] = sys;
4257:source\fatfs/ff.c **** 		if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to teh MBR */
4258:source\fatfs/ff.c **** 			return FR_DISK_ERR;
4259:source\fatfs/ff.c **** 		md = 0xF8;
4260:source\fatfs/ff.c **** 	} else {
4261:source\fatfs/ff.c **** 		if (sfd) {	/* No partition table (SFD) */
4262:source\fatfs/ff.c **** 			md = 0xF0;
4263:source\fatfs/ff.c **** 		} else {	/* Create partition table (FDISK) */
4264:source\fatfs/ff.c **** 			mem_set(fs->win.d8, 0, SS(fs));
4265:source\fatfs/ff.c **** 			tbl = fs->win.d8 + MBR_Table;	/* Create partition table for single partition in the drive */
4266:source\fatfs/ff.c **** 			tbl[1] = 1;						/* Partition start head */
4267:source\fatfs/ff.c **** 			tbl[2] = 1;						/* Partition start sector */
4268:source\fatfs/ff.c **** 			tbl[3] = 0;						/* Partition start cylinder */
4269:source\fatfs/ff.c **** 			tbl[4] = sys;					/* System type */
4270:source\fatfs/ff.c **** 			tbl[5] = 254;					/* Partition end head */
4271:source\fatfs/ff.c **** 			n = (b_vol + n_vol) / 63 / 255;
4272:source\fatfs/ff.c **** 			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
4273:source\fatfs/ff.c **** 			tbl[7] = (BYTE)n;				/* End cylinder */
4274:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
4275:source\fatfs/ff.c **** 			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
4276:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
4277:source\fatfs/ff.c **** 			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
4278:source\fatfs/ff.c **** 				return FR_DISK_ERR;
4279:source\fatfs/ff.c **** 			md = 0xF8;
4280:source\fatfs/ff.c **** 		}
4281:source\fatfs/ff.c **** 	}
4282:source\fatfs/ff.c **** 
4283:source\fatfs/ff.c **** 	/* Create BPB in the VBR */
4284:source\fatfs/ff.c **** 	tbl = fs->win.d8;							/* Clear sector */
4285:source\fatfs/ff.c **** 	mem_set(tbl, 0, SS(fs));
4286:source\fatfs/ff.c **** 	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
4287:source\fatfs/ff.c **** 	i = SS(fs);								/* Sector size */
4288:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_BytsPerSec, i);
4289:source\fatfs/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
4290:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
4291:source\fatfs/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
4292:source\fatfs/ff.c **** 	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
4293:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_RootEntCnt, i);
4294:source\fatfs/ff.c **** 	if (n_vol < 0x10000) {					/* Number of total sectors */
4295:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_TotSec16, n_vol);
4296:source\fatfs/ff.c **** 	} else {
4297:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_TotSec32, n_vol);
4298:source\fatfs/ff.c **** 	}
4299:source\fatfs/ff.c **** 	tbl[BPB_Media] = md;					/* Media descriptor */
4300:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
4301:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
4302:source\fatfs/ff.c **** 	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
4303:source\fatfs/ff.c **** 	n = GET_FATTIME();						/* Use current time as VSN */
4304:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
4307:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
4308:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
4309:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
4310:source\fatfs/ff.c **** 		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
4311:source\fatfs/ff.c **** 		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
4312:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
4313:source\fatfs/ff.c **** 	} else {
4314:source\fatfs/ff.c **** 		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
4315:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
4316:source\fatfs/ff.c **** 		tbl[BS_DrvNum] = 0x80;				/* Drive number */
4317:source\fatfs/ff.c **** 		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
4318:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
4319:source\fatfs/ff.c **** 	}
4320:source\fatfs/ff.c **** 	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
4321:source\fatfs/ff.c **** 	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
4322:source\fatfs/ff.c **** 		return FR_DISK_ERR;
4323:source\fatfs/ff.c **** 	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
4324:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 6, 1);
4325:source\fatfs/ff.c **** 
4326:source\fatfs/ff.c **** 	/* Initialize FAT area */
4327:source\fatfs/ff.c **** 	wsect = b_fat;
4328:source\fatfs/ff.c **** 	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
4329:source\fatfs/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
4330:source\fatfs/ff.c **** 		n = md;								/* Media descriptor byte */
4331:source\fatfs/ff.c **** 		if (fmt != FS_FAT32) {
4332:source\fatfs/ff.c **** 			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
4333:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
4334:source\fatfs/ff.c **** 		} else {
4335:source\fatfs/ff.c **** 			n |= 0xFFFFFF00;
4336:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
4337:source\fatfs/ff.c **** 			ST_DWORD(tbl + 4, 0xFFFFFFFF);
4338:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
4339:source\fatfs/ff.c **** 		}
4340:source\fatfs/ff.c **** 		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
4341:source\fatfs/ff.c **** 			return FR_DISK_ERR;
4342:source\fatfs/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
4343:source\fatfs/ff.c **** 		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single se
4344:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
4345:source\fatfs/ff.c **** 				return FR_DISK_ERR;
4346:source\fatfs/ff.c **** 		}
4347:source\fatfs/ff.c **** 	}
4348:source\fatfs/ff.c **** 
4349:source\fatfs/ff.c **** 	/* Initialize root directory */
4350:source\fatfs/ff.c **** 	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
4351:source\fatfs/ff.c **** 	do {
4352:source\fatfs/ff.c **** 		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
4353:source\fatfs/ff.c **** 			return FR_DISK_ERR;
4354:source\fatfs/ff.c **** 	} while (--i);
4355:source\fatfs/ff.c **** 
4356:source\fatfs/ff.c **** #if _USE_TRIM	/* Erase data area if needed */
4357:source\fatfs/ff.c **** 	{
4358:source\fatfs/ff.c **** 		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
4359:source\fatfs/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, eb);
4360:source\fatfs/ff.c **** 	}
4361:source\fatfs/ff.c **** #endif
4362:source\fatfs/ff.c **** 
4363:source\fatfs/ff.c **** 	/* Create FSINFO if needed */
4364:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
4365:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
4368:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
4369:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
4370:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
4371:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
4372:source\fatfs/ff.c **** 	}
4373:source\fatfs/ff.c **** 
4374:source\fatfs/ff.c **** 	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
4375:source\fatfs/ff.c **** }
4376:source\fatfs/ff.c **** 
4377:source\fatfs/ff.c **** 
4378:source\fatfs/ff.c **** 
4379:source\fatfs/ff.c **** #if _MULTI_PARTITION
4380:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4381:source\fatfs/ff.c **** /* Create partition table on the physical drive                          */
4382:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4383:source\fatfs/ff.c **** 
4384:source\fatfs/ff.c **** FRESULT f_fdisk (
4385:source\fatfs/ff.c **** 	BYTE pdrv,			/* Physical drive number */
4386:source\fatfs/ff.c **** 	const DWORD szt[],	/* Pointer to the size table for each partitions */
4387:source\fatfs/ff.c **** 	void* work			/* Pointer to the working buffer */
4388:source\fatfs/ff.c **** )
4389:source\fatfs/ff.c **** {
4390:source\fatfs/ff.c **** 	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
4391:source\fatfs/ff.c **** 	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
4392:source\fatfs/ff.c **** 	DSTATUS stat;
4393:source\fatfs/ff.c **** 	DWORD sz_disk, sz_part, s_part;
4394:source\fatfs/ff.c **** 
4395:source\fatfs/ff.c **** 
4396:source\fatfs/ff.c **** 	stat = disk_initialize(pdrv);
4397:source\fatfs/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
4398:source\fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
4399:source\fatfs/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
4400:source\fatfs/ff.c **** 
4401:source\fatfs/ff.c **** 	/* Determine CHS in the table regardless of the drive geometry */
4402:source\fatfs/ff.c **** 	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
4403:source\fatfs/ff.c **** 	if (n == 256) n--;
4404:source\fatfs/ff.c **** 	e_hd = n - 1;
4405:source\fatfs/ff.c **** 	sz_cyl = 63 * n;
4406:source\fatfs/ff.c **** 	tot_cyl = sz_disk / sz_cyl;
4407:source\fatfs/ff.c **** 
4408:source\fatfs/ff.c **** 	/* Create partition table */
4409:source\fatfs/ff.c **** 	mem_set(buf, 0, _MAX_SS);
4410:source\fatfs/ff.c **** 	p = buf + MBR_Table; b_cyl = 0;
4411:source\fatfs/ff.c **** 	for (i = 0; i < 4; i++, p += SZ_PTE) {
4412:source\fatfs/ff.c **** 		p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;
4413:source\fatfs/ff.c **** 		if (!p_cyl) continue;
4414:source\fatfs/ff.c **** 		s_part = (DWORD)sz_cyl * b_cyl;
4415:source\fatfs/ff.c **** 		sz_part = (DWORD)sz_cyl * p_cyl;
4416:source\fatfs/ff.c **** 		if (i == 0) {	/* Exclude first track of cylinder 0 */
4417:source\fatfs/ff.c **** 			s_hd = 1;
4418:source\fatfs/ff.c **** 			s_part += 63; sz_part -= 63;
4419:source\fatfs/ff.c **** 		} else {
4420:source\fatfs/ff.c **** 			s_hd = 0;
4421:source\fatfs/ff.c **** 		}
4422:source\fatfs/ff.c **** 		e_cyl = b_cyl + p_cyl - 1;
4423:source\fatfs/ff.c **** 		if (e_cyl >= tot_cyl) return FR_INVALID_PARAMETER;
4424:source\fatfs/ff.c **** 
4425:source\fatfs/ff.c **** 		/* Set partition table */
4426:source\fatfs/ff.c **** 		p[1] = s_hd;						/* Start head */
4427:source\fatfs/ff.c **** 		p[2] = (BYTE)((b_cyl >> 2) + 1);	/* Start sector */
4428:source\fatfs/ff.c **** 		p[3] = (BYTE)b_cyl;					/* Start cylinder */
4429:source\fatfs/ff.c **** 		p[4] = 0x06;						/* System type (temporary setting) */
4430:source\fatfs/ff.c **** 		p[5] = e_hd;						/* End head */
4431:source\fatfs/ff.c **** 		p[6] = (BYTE)((e_cyl >> 2) + 63);	/* End sector */
4432:source\fatfs/ff.c **** 		p[7] = (BYTE)e_cyl;					/* End cylinder */
4433:source\fatfs/ff.c **** 		ST_DWORD(p + 8, s_part);			/* Start sector in LBA */
4434:source\fatfs/ff.c **** 		ST_DWORD(p + 12, sz_part);			/* Partition size */
4435:source\fatfs/ff.c **** 
4436:source\fatfs/ff.c **** 		/* Next partition */
4437:source\fatfs/ff.c **** 		b_cyl += p_cyl;
4438:source\fatfs/ff.c **** 	}
4439:source\fatfs/ff.c **** 	ST_WORD(p, 0xAA55);
4440:source\fatfs/ff.c **** 
4441:source\fatfs/ff.c **** 	/* Write it to the MBR */
4442:source\fatfs/ff.c **** 	return (disk_write(pdrv, buf, 0, 1) != RES_OK || disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) ? FR_DI
4443:source\fatfs/ff.c **** }
4444:source\fatfs/ff.c **** 
4445:source\fatfs/ff.c **** 
4446:source\fatfs/ff.c **** #endif /* _MULTI_PARTITION */
4447:source\fatfs/ff.c **** #endif /* _USE_MKFS && !_FS_READONLY */
4448:source\fatfs/ff.c **** 
4449:source\fatfs/ff.c **** 
4450:source\fatfs/ff.c **** 
4451:source\fatfs/ff.c **** 
4452:source\fatfs/ff.c **** #if _USE_STRFUNC
4453:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4454:source\fatfs/ff.c **** /* Get a string from the file                                            */
4455:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4456:source\fatfs/ff.c **** 
4457:source\fatfs/ff.c **** TCHAR* f_gets (
4458:source\fatfs/ff.c **** 	TCHAR* buff,	/* Pointer to the string buffer to read */
4459:source\fatfs/ff.c **** 	int len,		/* Size of string buffer (characters) */
4460:source\fatfs/ff.c **** 	FIL* fp			/* Pointer to the file object */
4461:source\fatfs/ff.c **** )
4462:source\fatfs/ff.c **** {
4463:source\fatfs/ff.c **** 	int n = 0;
4464:source\fatfs/ff.c **** 	TCHAR c, *p = buff;
4465:source\fatfs/ff.c **** 	BYTE s[2];
4466:source\fatfs/ff.c **** 	UINT rc;
4467:source\fatfs/ff.c **** 
4468:source\fatfs/ff.c **** 
4469:source\fatfs/ff.c **** 	while (n < len - 1) {	/* Read characters until buffer gets filled */
4470:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
4471:source\fatfs/ff.c **** #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
4472:source\fatfs/ff.c **** 		f_read(fp, s, 1, &rc);
4473:source\fatfs/ff.c **** 		if (rc != 1) break;
4474:source\fatfs/ff.c **** 		c = s[0];
4475:source\fatfs/ff.c **** 		if (c >= 0x80) {
4476:source\fatfs/ff.c **** 			if (c < 0xC0) continue;	/* Skip stray trailer */
4477:source\fatfs/ff.c **** 			if (c < 0xE0) {			/* Two-byte sequence */
4478:source\fatfs/ff.c **** 				f_read(fp, s, 1, &rc);
4479:source\fatfs/ff.c **** 				if (rc != 1) break;
4480:source\fatfs/ff.c **** 				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
4481:source\fatfs/ff.c **** 				if (c < 0x80) c = '?';
4482:source\fatfs/ff.c **** 			} else {
4483:source\fatfs/ff.c **** 				if (c < 0xF0) {		/* Three-byte sequence */
4484:source\fatfs/ff.c **** 					f_read(fp, s, 2, &rc);
4485:source\fatfs/ff.c **** 					if (rc != 2) break;
4486:source\fatfs/ff.c **** 					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
4487:source\fatfs/ff.c **** 					if (c < 0x800) c = '?';
4488:source\fatfs/ff.c **** 				} else {			/* Reject four-byte sequence */
4489:source\fatfs/ff.c **** 					c = '?';
4490:source\fatfs/ff.c **** 				}
4491:source\fatfs/ff.c **** 			}
4492:source\fatfs/ff.c **** 		}
4493:source\fatfs/ff.c **** #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
4494:source\fatfs/ff.c **** 		f_read(fp, s, 2, &rc);
4495:source\fatfs/ff.c **** 		if (rc != 2) break;
4496:source\fatfs/ff.c **** 		c = s[1] + (s[0] << 8);
4497:source\fatfs/ff.c **** #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
4498:source\fatfs/ff.c **** 		f_read(fp, s, 2, &rc);
4499:source\fatfs/ff.c **** 		if (rc != 2) break;
4500:source\fatfs/ff.c **** 		c = s[0] + (s[1] << 8);
4501:source\fatfs/ff.c **** #else						/* Read a character in ANSI/OEM */
4502:source\fatfs/ff.c **** 		f_read(fp, s, 1, &rc);
4503:source\fatfs/ff.c **** 		if (rc != 1) break;
4504:source\fatfs/ff.c **** 		c = s[0];
4505:source\fatfs/ff.c **** 		if (IsDBCS1(c)) {
4506:source\fatfs/ff.c **** 			f_read(fp, s, 1, &rc);
4507:source\fatfs/ff.c **** 			if (rc != 1) break;
4508:source\fatfs/ff.c **** 			c = (c << 8) + s[0];
4509:source\fatfs/ff.c **** 		}
4510:source\fatfs/ff.c **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
4511:source\fatfs/ff.c **** 		if (!c) c = '?';
4512:source\fatfs/ff.c **** #endif
4513:source\fatfs/ff.c **** #else						/* Read a character without conversion */
4514:source\fatfs/ff.c **** 		f_read(fp, s, 1, &rc);
4515:source\fatfs/ff.c **** 		if (rc != 1) break;
4516:source\fatfs/ff.c **** 		c = s[0];
4517:source\fatfs/ff.c **** #endif
4518:source\fatfs/ff.c **** 		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
4519:source\fatfs/ff.c **** 		*p++ = c;
4520:source\fatfs/ff.c **** 		n++;
4521:source\fatfs/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
4522:source\fatfs/ff.c **** 	}
4523:source\fatfs/ff.c **** 	*p = 0;
4524:source\fatfs/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
4525:source\fatfs/ff.c **** }
4526:source\fatfs/ff.c **** 
4527:source\fatfs/ff.c **** 
4528:source\fatfs/ff.c **** 
4529:source\fatfs/ff.c **** 
4530:source\fatfs/ff.c **** #if !_FS_READONLY
4531:source\fatfs/ff.c **** #include <stdarg.h>
4532:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4533:source\fatfs/ff.c **** /* Put a character to the file                                           */
4534:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4535:source\fatfs/ff.c **** 
4536:source\fatfs/ff.c **** typedef struct {
4537:source\fatfs/ff.c **** 	FIL* fp;
4538:source\fatfs/ff.c **** 	int idx, nchr;
4539:source\fatfs/ff.c **** 	BYTE buf[64];
4540:source\fatfs/ff.c **** } putbuff;
4541:source\fatfs/ff.c **** 
4542:source\fatfs/ff.c **** 
4543:source\fatfs/ff.c **** static
4544:source\fatfs/ff.c **** void putc_bfd (
4545:source\fatfs/ff.c **** 	putbuff* pb,
4546:source\fatfs/ff.c **** 	TCHAR c
4547:source\fatfs/ff.c **** )
4548:source\fatfs/ff.c **** {
 6981              		.loc 1 4548 1 is_stmt 1 view -0
 6982              		.cfi_startproc
 6983              		@ args = 0, pretend = 0, frame = 8
 6984              		@ frame_needed = 0, uses_anonymous_args = 0
4549:source\fatfs/ff.c **** 	UINT bw;
 6985              		.loc 1 4549 2 view .LVU2541
4550:source\fatfs/ff.c **** 	int i;
 6986              		.loc 1 4550 2 view .LVU2542
4551:source\fatfs/ff.c **** 
4552:source\fatfs/ff.c **** 
4553:source\fatfs/ff.c **** 	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 6987              		.loc 1 4553 2 view .LVU2543
 6988              		.loc 1 4553 5 is_stmt 0 view .LVU2544
 6989 0000 0A29     		cmp	r1, #10
4548:source\fatfs/ff.c **** 	UINT bw;
 6990              		.loc 1 4548 1 view .LVU2545
 6991 0002 73B5     		push	{r0, r1, r4, r5, r6, lr}
 6992              		.cfi_def_cfa_offset 24
 6993              		.cfi_offset 4, -16
 6994              		.cfi_offset 5, -12
 6995              		.cfi_offset 6, -8
 6996              		.cfi_offset 14, -4
4548:source\fatfs/ff.c **** 	UINT bw;
 6997              		.loc 1 4548 1 view .LVU2546
 6998 0004 0446     		mov	r4, r0
 6999 0006 0E46     		mov	r6, r1
 7000              		.loc 1 4553 5 view .LVU2547
 7001 0008 02D1     		bne	.L751
4554:source\fatfs/ff.c **** 		putc_bfd(pb, '\r');
 7002              		.loc 1 4554 3 is_stmt 1 view .LVU2548
 7003 000a 0D21     		movs	r1, #13
 7004              	.LVL793:
 7005              		.loc 1 4554 3 is_stmt 0 view .LVU2549
 7006 000c FFF7F8FF 		bl	putc_bfd
 7007              	.LVL794:
 7008              	.L751:
4555:source\fatfs/ff.c **** 
4556:source\fatfs/ff.c **** 	i = pb->idx;	/* Buffer write index (-1:error) */
 7009              		.loc 1 4556 2 is_stmt 1 view .LVU2550
 7010              		.loc 1 4556 4 is_stmt 0 view .LVU2551
 7011 0010 6368     		ldr	r3, [r4, #4]
 7012              	.LVL795:
4557:source\fatfs/ff.c **** 	if (i < 0) return;
 7013              		.loc 1 4557 2 is_stmt 1 view .LVU2552
 7014              		.loc 1 4557 5 is_stmt 0 view .LVU2553
 7015 0012 002B     		cmp	r3, #0
 7016 0014 14DB     		blt	.L750
4558:source\fatfs/ff.c **** 
4559:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
4560:source\fatfs/ff.c **** #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
4561:source\fatfs/ff.c **** 	if (c < 0x80) {				/* 7-bit */
4562:source\fatfs/ff.c **** 		pb->buf[i++] = (BYTE)c;
4563:source\fatfs/ff.c **** 	} else {
4564:source\fatfs/ff.c **** 		if (c < 0x800) {		/* 11-bit */
4565:source\fatfs/ff.c **** 			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
4566:source\fatfs/ff.c **** 		} else {				/* 16-bit */
4567:source\fatfs/ff.c **** 			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
4568:source\fatfs/ff.c **** 			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
4569:source\fatfs/ff.c **** 		}
4570:source\fatfs/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
4571:source\fatfs/ff.c **** 	}
4572:source\fatfs/ff.c **** #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
4573:source\fatfs/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
4574:source\fatfs/ff.c **** 	pb->buf[i++] = (BYTE)c;
4575:source\fatfs/ff.c **** #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
4576:source\fatfs/ff.c **** 	pb->buf[i++] = (BYTE)c;
4577:source\fatfs/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
4578:source\fatfs/ff.c **** #else							/* Write a character in ANSI/OEM */
4579:source\fatfs/ff.c **** 	c = ff_convert(c, 0);	/* Unicode -> OEM */
4580:source\fatfs/ff.c **** 	if (!c) c = '?';
4581:source\fatfs/ff.c **** 	if (c >= 0x100)
4582:source\fatfs/ff.c **** 		pb->buf[i++] = (BYTE)(c >> 8);
4583:source\fatfs/ff.c **** 	pb->buf[i++] = (BYTE)c;
4584:source\fatfs/ff.c **** #endif
4585:source\fatfs/ff.c **** #else							/* Write a character without conversion */
4586:source\fatfs/ff.c **** 	pb->buf[i++] = (BYTE)c;
 7017              		.loc 1 4586 2 is_stmt 1 view .LVU2554
 7018              		.loc 1 4586 11 is_stmt 0 view .LVU2555
 7019 0016 5D1C     		adds	r5, r3, #1
 7020              	.LVL796:
 7021              		.loc 1 4586 15 view .LVU2556
 7022 0018 2344     		add	r3, r3, r4
4587:source\fatfs/ff.c **** #endif
4588:source\fatfs/ff.c **** 
4589:source\fatfs/ff.c **** 	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 7023              		.loc 1 4589 5 view .LVU2557
 7024 001a 3C2D     		cmp	r5, #60
4586:source\fatfs/ff.c **** #endif
 7025              		.loc 1 4586 15 view .LVU2558
 7026 001c 1E73     		strb	r6, [r3, #12]
 7027              		.loc 1 4589 2 is_stmt 1 view .LVU2559
 7028              		.loc 1 4589 5 is_stmt 0 view .LVU2560
 7029 001e 0BDD     		ble	.L753
4590:source\fatfs/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 7030              		.loc 1 4590 3 is_stmt 1 view .LVU2561
 7031 0020 01AB     		add	r3, sp, #4
 7032 0022 2A46     		mov	r2, r5
 7033 0024 2068     		ldr	r0, [r4]
 7034 0026 04F10C01 		add	r1, r4, #12
 7035 002a FFF7FEFF 		bl	f_write
 7036              	.LVL797:
4591:source\fatfs/ff.c **** 		i = (bw == (UINT)i) ? 0 : -1;
 7037              		.loc 1 4591 3 view .LVU2562
 7038              		.loc 1 4591 27 is_stmt 0 view .LVU2563
 7039 002e 019B     		ldr	r3, [sp, #4]
 7040 0030 5D1B     		subs	r5, r3, r5
 7041              	.LVL798:
 7042              		.loc 1 4591 27 view .LVU2564
 7043 0032 18BF     		it	ne
 7044 0034 4FF0FF35 		movne	r5, #-1
 7045              	.L753:
 7046              	.LVL799:
4592:source\fatfs/ff.c **** 	}
4593:source\fatfs/ff.c **** 	pb->idx = i;
 7047              		.loc 1 4593 2 is_stmt 1 view .LVU2565
4594:source\fatfs/ff.c **** 	pb->nchr++;
 7048              		.loc 1 4594 10 is_stmt 0 view .LVU2566
 7049 0038 A368     		ldr	r3, [r4, #8]
4593:source\fatfs/ff.c **** 	pb->nchr++;
 7050              		.loc 1 4593 10 view .LVU2567
 7051 003a 6560     		str	r5, [r4, #4]
 7052              		.loc 1 4594 2 is_stmt 1 view .LVU2568
 7053              		.loc 1 4594 10 is_stmt 0 view .LVU2569
 7054 003c 0133     		adds	r3, r3, #1
 7055 003e A360     		str	r3, [r4, #8]
 7056              	.LVL800:
 7057              	.L750:
4595:source\fatfs/ff.c **** }
 7058              		.loc 1 4595 1 view .LVU2570
 7059 0040 02B0     		add	sp, sp, #8
 7060              		.cfi_def_cfa_offset 16
 7061              		@ sp needed
 7062 0042 70BD     		pop	{r4, r5, r6, pc}
 7063              		.loc 1 4595 1 view .LVU2571
 7064              		.cfi_endproc
 7065              	.LFE182:
 7067              		.section	.text.f_sync,"ax",%progbits
 7068              		.align	1
 7069              		.global	f_sync
 7070              		.syntax unified
 7071              		.thumb
 7072              		.thumb_func
 7074              	f_sync:
 7075              	.LVL801:
 7076              	.LFB166:
2884:source\fatfs/ff.c **** 	FRESULT res;
 7077              		.loc 1 2884 1 is_stmt 1 view -0
 7078              		.cfi_startproc
 7079              		@ args = 0, pretend = 0, frame = 0
 7080              		@ frame_needed = 0, uses_anonymous_args = 0
2885:source\fatfs/ff.c **** 	DWORD tm;
 7081              		.loc 1 2885 2 view .LVU2573
2886:source\fatfs/ff.c **** 	BYTE *dir;
 7082              		.loc 1 2886 2 view .LVU2574
2887:source\fatfs/ff.c **** 
 7083              		.loc 1 2887 2 view .LVU2575
2890:source\fatfs/ff.c **** 	if (res == FR_OK) {
 7084              		.loc 1 2890 2 view .LVU2576
2884:source\fatfs/ff.c **** 	FRESULT res;
 7085              		.loc 1 2884 1 is_stmt 0 view .LVU2577
 7086 0000 70B5     		push	{r4, r5, r6, lr}
 7087              		.cfi_def_cfa_offset 16
 7088              		.cfi_offset 4, -16
 7089              		.cfi_offset 5, -12
 7090              		.cfi_offset 6, -8
 7091              		.cfi_offset 14, -4
2884:source\fatfs/ff.c **** 	FRESULT res;
 7092              		.loc 1 2884 1 view .LVU2578
 7093 0002 0446     		mov	r4, r0
2890:source\fatfs/ff.c **** 	if (res == FR_OK) {
 7094              		.loc 1 2890 8 view .LVU2579
 7095 0004 FFF7FEFF 		bl	validate
 7096              	.LVL802:
2891:source\fatfs/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 7097              		.loc 1 2891 2 is_stmt 1 view .LVU2580
2891:source\fatfs/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 7098              		.loc 1 2891 5 is_stmt 0 view .LVU2581
 7099 0008 0028     		cmp	r0, #0
 7100 000a 59D1     		bne	.L755
 7101              	.LVL803:
 7102              	.LBB123:
 7103              	.LBI123:
2881:source\fatfs/ff.c **** 	FIL* fp		/* Pointer to the file object */
 7104              		.loc 1 2881 9 is_stmt 1 view .LVU2582
 7105              	.LBB124:
2892:source\fatfs/ff.c **** 			/* Write-back dirty buffer */
 7106              		.loc 1 2892 3 view .LVU2583
2892:source\fatfs/ff.c **** 			/* Write-back dirty buffer */
 7107              		.loc 1 2892 9 is_stmt 0 view .LVU2584
 7108 000c 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
2892:source\fatfs/ff.c **** 			/* Write-back dirty buffer */
 7109              		.loc 1 2892 6 view .LVU2585
 7110 0010 13F02000 		ands	r0, r3, #32
 7111              	.LVL804:
2892:source\fatfs/ff.c **** 			/* Write-back dirty buffer */
 7112              		.loc 1 2892 6 view .LVU2586
 7113 0014 54D0     		beq	.L755
2895:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 7114              		.loc 1 2895 4 is_stmt 1 view .LVU2587
2895:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 7115              		.loc 1 2895 7 is_stmt 0 view .LVU2588
 7116 0016 5B06     		lsls	r3, r3, #25
2896:source\fatfs/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
 7117              		.loc 1 2896 22 view .LVU2589
 7118 0018 D4F80002 		ldr	r0, [r4, #512]
2895:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 7119              		.loc 1 2895 7 view .LVU2590
 7120 001c 0FD5     		bpl	.L756
2896:source\fatfs/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
 7121              		.loc 1 2896 5 is_stmt 1 view .LVU2591
2896:source\fatfs/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
 7122              		.loc 1 2896 9 is_stmt 0 view .LVU2592
 7123 001e D4F81822 		ldr	r2, [r4, #536]
 7124 0022 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 7125 0026 0123     		movs	r3, #1
 7126 0028 2146     		mov	r1, r4
 7127 002a FFF7FEFF 		bl	disk_write
 7128              	.LVL805:
2896:source\fatfs/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
 7129              		.loc 1 2896 8 view .LVU2593
 7130 002e 0028     		cmp	r0, #0
 7131 0030 45D1     		bne	.L757
2898:source\fatfs/ff.c **** 			}
 7132              		.loc 1 2898 5 is_stmt 1 view .LVU2594
2898:source\fatfs/ff.c **** 			}
 7133              		.loc 1 2898 14 is_stmt 0 view .LVU2595
 7134 0032 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 7135 0036 23F04003 		bic	r3, r3, #64
 7136 003a 84F80632 		strb	r3, [r4, #518]
 7137              	.L756:
2902:source\fatfs/ff.c **** 			if (res == FR_OK) {
 7138              		.loc 1 2902 4 is_stmt 1 view .LVU2596
2902:source\fatfs/ff.c **** 			if (res == FR_OK) {
 7139              		.loc 1 2902 10 is_stmt 0 view .LVU2597
 7140 003e D4F81C12 		ldr	r1, [r4, #540]
 7141 0042 D4F80002 		ldr	r0, [r4, #512]
 7142 0046 FFF7FEFF 		bl	move_window
 7143              	.LVL806:
 7144 004a 0646     		mov	r6, r0
 7145              	.LVL807:
2903:source\fatfs/ff.c **** 				dir = fp->dir_ptr;
 7146              		.loc 1 2903 4 is_stmt 1 view .LVU2598
2903:source\fatfs/ff.c **** 				dir = fp->dir_ptr;
 7147              		.loc 1 2903 7 is_stmt 0 view .LVU2599
 7148 004c C0BB     		cbnz	r0, .L755
2904:source\fatfs/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 7149              		.loc 1 2904 5 is_stmt 1 view .LVU2600
2904:source\fatfs/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 7150              		.loc 1 2904 9 is_stmt 0 view .LVU2601
 7151 004e D4F82052 		ldr	r5, [r4, #544]
 7152              	.LVL808:
2905:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 7153              		.loc 1 2905 5 is_stmt 1 view .LVU2602
2905:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 7154              		.loc 1 2905 19 is_stmt 0 view .LVU2603
 7155 0052 EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 7156 0054 43F02003 		orr	r3, r3, #32
 7157 0058 EB72     		strb	r3, [r5, #11]
2906:source\fatfs/ff.c **** 				st_clust(dir, fp->sclust);					/* Update start cluster */
 7158              		.loc 1 2906 5 is_stmt 1 view .LVU2604
 7159 005a D4F80C32 		ldr	r3, [r4, #524]
 7160 005e 2B77     		strb	r3, [r5, #28]
2906:source\fatfs/ff.c **** 				st_clust(dir, fp->sclust);					/* Update start cluster */
 7161              		.loc 1 2906 5 view .LVU2605
 7162 0060 B4F80C32 		ldrh	r3, [r4, #524]
 7163 0064 1B0A     		lsrs	r3, r3, #8
 7164 0066 6B77     		strb	r3, [r5, #29]
2906:source\fatfs/ff.c **** 				st_clust(dir, fp->sclust);					/* Update start cluster */
 7165              		.loc 1 2906 5 view .LVU2606
 7166 0068 B4F80E32 		ldrh	r3, [r4, #526]
 7167 006c AB77     		strb	r3, [r5, #30]
2906:source\fatfs/ff.c **** 				st_clust(dir, fp->sclust);					/* Update start cluster */
 7168              		.loc 1 2906 5 view .LVU2607
 7169 006e 94F80F32 		ldrb	r3, [r4, #527]	@ zero_extendqisi2
 7170 0072 EB77     		strb	r3, [r5, #31]
2907:source\fatfs/ff.c **** 				tm = GET_FATTIME();							/* Update updated time */
 7171              		.loc 1 2907 5 view .LVU2608
 7172 0074 D4F81032 		ldr	r3, [r4, #528]
 7173              	.LVL809:
 7174              	.LBB125:
 7175              	.LBI125:
1325:source\fatfs/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
 7176              		.loc 1 1325 6 view .LVU2609
 7177              	.LBB126:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 7178              		.loc 1 1330 2 view .LVU2610
 7179 0078 AB76     		strb	r3, [r5, #26]
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 7180              		.loc 1 1330 2 view .LVU2611
 7181 007a C3F30722 		ubfx	r2, r3, #8, #8
1331:source\fatfs/ff.c **** }
 7182              		.loc 1 1331 2 is_stmt 0 view .LVU2612
 7183 007e 1B0C     		lsrs	r3, r3, #16
 7184              	.LVL810:
1331:source\fatfs/ff.c **** }
 7185              		.loc 1 1331 2 view .LVU2613
 7186 0080 2B75     		strb	r3, [r5, #20]
 7187 0082 1B0A     		lsrs	r3, r3, #8
 7188 0084 6B75     		strb	r3, [r5, #21]
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 7189              		.loc 1 1330 2 view .LVU2614
 7190 0086 EA76     		strb	r2, [r5, #27]
1331:source\fatfs/ff.c **** }
 7191              		.loc 1 1331 2 is_stmt 1 view .LVU2615
1331:source\fatfs/ff.c **** }
 7192              		.loc 1 1331 2 view .LVU2616
 7193              	.LVL811:
1331:source\fatfs/ff.c **** }
 7194              		.loc 1 1331 2 is_stmt 0 view .LVU2617
 7195              	.LBE126:
 7196              	.LBE125:
2908:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);
 7197              		.loc 1 2908 5 is_stmt 1 view .LVU2618
2908:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);
 7198              		.loc 1 2908 10 is_stmt 0 view .LVU2619
 7199 0088 FFF7FEFF 		bl	get_fattime
 7200              	.LVL812:
2909:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_LstAccDate, 0);
 7201              		.loc 1 2909 5 is_stmt 1 view .LVU2620
 7202 008c C0F30723 		ubfx	r3, r0, #8, #8
 7203 0090 EB75     		strb	r3, [r5, #23]
 7204 0092 030C     		lsrs	r3, r0, #16
 7205 0094 2B76     		strb	r3, [r5, #24]
 7206 0096 030E     		lsrs	r3, r0, #24
 7207 0098 A875     		strb	r0, [r5, #22]
2909:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_LstAccDate, 0);
 7208              		.loc 1 2909 5 view .LVU2621
2909:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_LstAccDate, 0);
 7209              		.loc 1 2909 5 view .LVU2622
2909:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_LstAccDate, 0);
 7210              		.loc 1 2909 5 view .LVU2623
 7211 009a 6B76     		strb	r3, [r5, #25]
2910:source\fatfs/ff.c **** 				fp->flag &= ~FA__WRITTEN;
 7212              		.loc 1 2910 5 view .LVU2624
 7213 009c AE74     		strb	r6, [r5, #18]
2910:source\fatfs/ff.c **** 				fp->flag &= ~FA__WRITTEN;
 7214              		.loc 1 2910 5 view .LVU2625
 7215 009e EE74     		strb	r6, [r5, #19]
2911:source\fatfs/ff.c **** 				fp->fs->wflag = 1;
 7216              		.loc 1 2911 5 view .LVU2626
2911:source\fatfs/ff.c **** 				fp->fs->wflag = 1;
 7217              		.loc 1 2911 14 is_stmt 0 view .LVU2627
 7218 00a0 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
2912:source\fatfs/ff.c **** 				res = sync_fs(fp->fs);
 7219              		.loc 1 2912 7 view .LVU2628
 7220 00a4 D4F80002 		ldr	r0, [r4, #512]
 7221              	.LVL813:
2911:source\fatfs/ff.c **** 				fp->fs->wflag = 1;
 7222              		.loc 1 2911 14 view .LVU2629
 7223 00a8 23F02003 		bic	r3, r3, #32
 7224 00ac 84F80632 		strb	r3, [r4, #518]
2912:source\fatfs/ff.c **** 				res = sync_fs(fp->fs);
 7225              		.loc 1 2912 5 is_stmt 1 view .LVU2630
2912:source\fatfs/ff.c **** 				res = sync_fs(fp->fs);
 7226              		.loc 1 2912 19 is_stmt 0 view .LVU2631
 7227 00b0 0123     		movs	r3, #1
 7228 00b2 80F80432 		strb	r3, [r0, #516]
2913:source\fatfs/ff.c **** 			}
 7229              		.loc 1 2913 5 is_stmt 1 view .LVU2632
 7230              	.LBE124:
 7231              	.LBE123:
2919:source\fatfs/ff.c **** 
 7232              		.loc 1 2919 1 is_stmt 0 view .LVU2633
 7233 00b6 BDE87040 		pop	{r4, r5, r6, lr}
 7234              		.cfi_remember_state
 7235              		.cfi_restore 14
 7236              		.cfi_restore 6
 7237              		.cfi_restore 5
 7238              		.cfi_restore 4
 7239              		.cfi_def_cfa_offset 0
 7240              	.LVL814:
 7241              	.LBB128:
 7242              	.LBB127:
2913:source\fatfs/ff.c **** 			}
 7243              		.loc 1 2913 11 view .LVU2634
 7244 00ba FFF7FEBF 		b	sync_fs
 7245              	.LVL815:
 7246              	.L757:
 7247              		.cfi_restore_state
2897:source\fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
 7248              		.loc 1 2897 6 view .LVU2635
 7249 00be 0120     		movs	r0, #1
 7250              	.LVL816:
 7251              	.L755:
2897:source\fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
 7252              		.loc 1 2897 6 view .LVU2636
 7253              	.LBE127:
 7254              	.LBE128:
2919:source\fatfs/ff.c **** 
 7255              		.loc 1 2919 1 view .LVU2637
 7256 00c0 70BD     		pop	{r4, r5, r6, pc}
2919:source\fatfs/ff.c **** 
 7257              		.loc 1 2919 1 view .LVU2638
 7258              		.cfi_endproc
 7259              	.LFE166:
 7261              		.section	.text.f_close,"ax",%progbits
 7262              		.align	1
 7263              		.global	f_close
 7264              		.syntax unified
 7265              		.thumb
 7266              		.thumb_func
 7268              	f_close:
 7269              	.LVL817:
 7270              	.LFB167:
2933:source\fatfs/ff.c **** 	FRESULT res;
 7271              		.loc 1 2933 1 is_stmt 1 view -0
 7272              		.cfi_startproc
 7273              		@ args = 0, pretend = 0, frame = 0
 7274              		@ frame_needed = 0, uses_anonymous_args = 0
2934:source\fatfs/ff.c **** 
 7275              		.loc 1 2934 2 view .LVU2640
2938:source\fatfs/ff.c **** 	if (res == FR_OK)
 7276              		.loc 1 2938 2 view .LVU2641
2933:source\fatfs/ff.c **** 	FRESULT res;
 7277              		.loc 1 2933 1 is_stmt 0 view .LVU2642
 7278 0000 10B5     		push	{r4, lr}
 7279              		.cfi_def_cfa_offset 8
 7280              		.cfi_offset 4, -8
 7281              		.cfi_offset 14, -4
2933:source\fatfs/ff.c **** 	FRESULT res;
 7282              		.loc 1 2933 1 view .LVU2643
 7283 0002 0446     		mov	r4, r0
2938:source\fatfs/ff.c **** 	if (res == FR_OK)
 7284              		.loc 1 2938 8 view .LVU2644
 7285 0004 FFF7FEFF 		bl	f_sync
 7286              	.LVL818:
2939:source\fatfs/ff.c **** #endif
 7287              		.loc 1 2939 2 is_stmt 1 view .LVU2645
2939:source\fatfs/ff.c **** #endif
 7288              		.loc 1 2939 5 is_stmt 0 view .LVU2646
 7289 0008 50B9     		cbnz	r0, .L765
2942:source\fatfs/ff.c **** 		if (res == FR_OK) {
 7290              		.loc 1 2942 3 is_stmt 1 view .LVU2647
2942:source\fatfs/ff.c **** 		if (res == FR_OK) {
 7291              		.loc 1 2942 9 is_stmt 0 view .LVU2648
 7292 000a 2046     		mov	r0, r4
 7293              	.LVL819:
2942:source\fatfs/ff.c **** 		if (res == FR_OK) {
 7294              		.loc 1 2942 9 view .LVU2649
 7295 000c FFF7FEFF 		bl	validate
 7296              	.LVL820:
2943:source\fatfs/ff.c **** #if _FS_REENTRANT
 7297              		.loc 1 2943 3 is_stmt 1 view .LVU2650
2943:source\fatfs/ff.c **** #if _FS_REENTRANT
 7298              		.loc 1 2943 6 is_stmt 0 view .LVU2651
 7299 0010 30B9     		cbnz	r0, .L765
2948:source\fatfs/ff.c **** 			if (res == FR_OK)
 7300              		.loc 1 2948 4 is_stmt 1 view .LVU2652
2948:source\fatfs/ff.c **** 			if (res == FR_OK)
 7301              		.loc 1 2948 10 is_stmt 0 view .LVU2653
 7302 0012 D4F82802 		ldr	r0, [r4, #552]
 7303              	.LVL821:
2948:source\fatfs/ff.c **** 			if (res == FR_OK)
 7304              		.loc 1 2948 10 view .LVU2654
 7305 0016 FFF7FEFF 		bl	dec_lock
 7306              	.LVL822:
2949:source\fatfs/ff.c **** #endif
 7307              		.loc 1 2949 4 is_stmt 1 view .LVU2655
2949:source\fatfs/ff.c **** #endif
 7308              		.loc 1 2949 7 is_stmt 0 view .LVU2656
 7309 001a 08B9     		cbnz	r0, .L765
2951:source\fatfs/ff.c **** #if _FS_REENTRANT
 7310              		.loc 1 2951 5 is_stmt 1 view .LVU2657
2951:source\fatfs/ff.c **** #if _FS_REENTRANT
 7311              		.loc 1 2951 12 is_stmt 0 view .LVU2658
 7312 001c C4F80002 		str	r0, [r4, #512]
 7313              	.L765:
2957:source\fatfs/ff.c **** }
 7314              		.loc 1 2957 2 is_stmt 1 view .LVU2659
2958:source\fatfs/ff.c **** 
 7315              		.loc 1 2958 1 is_stmt 0 view .LVU2660
 7316 0020 10BD     		pop	{r4, pc}
2958:source\fatfs/ff.c **** 
 7317              		.loc 1 2958 1 view .LVU2661
 7318              		.cfi_endproc
 7319              	.LFE167:
 7321              		.section	.text.f_lseek,"ax",%progbits
 7322              		.align	1
 7323              		.global	f_lseek
 7324              		.syntax unified
 7325              		.thumb
 7326              		.thumb_func
 7328              	f_lseek:
 7329              	.LVL823:
 7330              	.LFB168:
3106:source\fatfs/ff.c **** 	FRESULT res;
 7331              		.loc 1 3106 1 is_stmt 1 view -0
 7332              		.cfi_startproc
 7333              		@ args = 0, pretend = 0, frame = 0
 7334              		@ frame_needed = 0, uses_anonymous_args = 0
3107:source\fatfs/ff.c **** 	DWORD clst, bcs, nsect, ifptr;
 7335              		.loc 1 3107 2 view .LVU2663
3108:source\fatfs/ff.c **** #if _USE_FASTSEEK
 7336              		.loc 1 3108 2 view .LVU2664
3110:source\fatfs/ff.c **** #endif
 7337              		.loc 1 3110 2 view .LVU2665
3114:source\fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 7338              		.loc 1 3114 2 view .LVU2666
3106:source\fatfs/ff.c **** 	FRESULT res;
 7339              		.loc 1 3106 1 is_stmt 0 view .LVU2667
 7340 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 7341              		.cfi_def_cfa_offset 40
 7342              		.cfi_offset 3, -40
 7343              		.cfi_offset 4, -36
 7344              		.cfi_offset 5, -32
 7345              		.cfi_offset 6, -28
 7346              		.cfi_offset 7, -24
 7347              		.cfi_offset 8, -20
 7348              		.cfi_offset 9, -16
 7349              		.cfi_offset 10, -12
 7350              		.cfi_offset 11, -8
 7351              		.cfi_offset 14, -4
3106:source\fatfs/ff.c **** 	FRESULT res;
 7352              		.loc 1 3106 1 view .LVU2668
 7353 0004 0446     		mov	r4, r0
 7354 0006 0D46     		mov	r5, r1
3114:source\fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 7355              		.loc 1 3114 8 view .LVU2669
 7356 0008 FFF7FEFF 		bl	validate
 7357              	.LVL824:
3115:source\fatfs/ff.c **** 	if (fp->err)						/* Check error */
 7358              		.loc 1 3115 2 is_stmt 1 view .LVU2670
3115:source\fatfs/ff.c **** 	if (fp->err)						/* Check error */
 7359              		.loc 1 3115 5 is_stmt 0 view .LVU2671
 7360 000c 0646     		mov	r6, r0
 7361 000e 10BB     		cbnz	r0, .L767
3116:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 7362              		.loc 1 3116 2 is_stmt 1 view .LVU2672
3116:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 7363              		.loc 1 3116 8 is_stmt 0 view .LVU2673
 7364 0010 94F80762 		ldrb	r6, [r4, #519]	@ zero_extendqisi2
3116:source\fatfs/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 7365              		.loc 1 3116 5 view .LVU2674
 7366 0014 FEB9     		cbnz	r6, .L767
3120:source\fatfs/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 7367              		.loc 1 3120 2 is_stmt 1 view .LVU2675
3120:source\fatfs/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 7368              		.loc 1 3120 8 is_stmt 0 view .LVU2676
 7369 0016 D4F82432 		ldr	r3, [r4, #548]
3120:source\fatfs/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 7370              		.loc 1 3120 5 view .LVU2677
 7371 001a 002B     		cmp	r3, #0
 7372 001c 00F08780 		beq	.L768
3121:source\fatfs/ff.c **** 			tbl = fp->cltbl;
 7373              		.loc 1 3121 3 is_stmt 1 view .LVU2678
3121:source\fatfs/ff.c **** 			tbl = fp->cltbl;
 7374              		.loc 1 3121 6 is_stmt 0 view .LVU2679
 7375 0020 6A1C     		adds	r2, r5, #1
 7376 0022 3DD1     		bne	.L769
3122:source\fatfs/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 7377              		.loc 1 3122 4 is_stmt 1 view .LVU2680
 7378              	.LVL825:
3123:source\fatfs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
 7379              		.loc 1 3123 4 view .LVU2681
3123:source\fatfs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
 7380              		.loc 1 3123 15 is_stmt 0 view .LVU2682
 7381 0024 1D46     		mov	r5, r3
 7382              	.LVL826:
3124:source\fatfs/ff.c **** 			if (cl) {
 7383              		.loc 1 3124 7 view .LVU2683
 7384 0026 D4F81082 		ldr	r8, [r4, #528]
3123:source\fatfs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
 7385              		.loc 1 3123 9 view .LVU2684
 7386 002a 55F804BB 		ldr	fp, [r5], #4
 7387              	.LVL827:
3123:source\fatfs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
 7388              		.loc 1 3123 19 is_stmt 1 view .LVU2685
3124:source\fatfs/ff.c **** 			if (cl) {
 7389              		.loc 1 3124 4 view .LVU2686
3125:source\fatfs/ff.c **** 				do {
 7390              		.loc 1 3125 4 view .LVU2687
3123:source\fatfs/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
 7391              		.loc 1 3123 24 is_stmt 0 view .LVU2688
 7392 002e 0227     		movs	r7, #2
3125:source\fatfs/ff.c **** 				do {
 7393              		.loc 1 3125 7 view .LVU2689
 7394 0030 B8F1000F 		cmp	r8, #0
 7395 0034 2BD0     		beq	.L770
 7396              	.LVL828:
 7397              	.L775:
3126:source\fatfs/ff.c **** 					/* Get a fragment */
 7398              		.loc 1 3126 5 is_stmt 1 view .LVU2690
3128:source\fatfs/ff.c **** 					do {
 7399              		.loc 1 3128 6 view .LVU2691
3128:source\fatfs/ff.c **** 					do {
 7400              		.loc 1 3128 16 view .LVU2692
3128:source\fatfs/ff.c **** 					do {
 7401              		.loc 1 3128 25 view .LVU2693
3131:source\fatfs/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 7402              		.loc 1 3131 12 is_stmt 0 view .LVU2694
 7403 0036 4046     		mov	r0, r8
3128:source\fatfs/ff.c **** 					do {
 7404              		.loc 1 3128 20 view .LVU2695
 7405 0038 4FF0000A 		mov	r10, #0
 7406              	.LVL829:
 7407              	.L773:
3129:source\fatfs/ff.c **** 						pcl = cl; ncl++;
 7408              		.loc 1 3129 6 is_stmt 1 view .LVU2696
3130:source\fatfs/ff.c **** 						cl = get_fat(fp->fs, cl);
 7409              		.loc 1 3130 7 view .LVU2697
3130:source\fatfs/ff.c **** 						cl = get_fat(fp->fs, cl);
 7410              		.loc 1 3130 17 view .LVU2698
3131:source\fatfs/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 7411              		.loc 1 3131 12 is_stmt 0 view .LVU2699
 7412 003c 0146     		mov	r1, r0
 7413 003e 8146     		mov	r9, r0
 7414 0040 D4F80002 		ldr	r0, [r4, #512]
 7415              	.LVL830:
3131:source\fatfs/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 7416              		.loc 1 3131 12 view .LVU2700
 7417 0044 FFF7FEFF 		bl	get_fat
 7418              	.LVL831:
3132:source\fatfs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7419              		.loc 1 3132 10 view .LVU2701
 7420 0048 0128     		cmp	r0, #1
3130:source\fatfs/ff.c **** 						cl = get_fat(fp->fs, cl);
 7421              		.loc 1 3130 20 view .LVU2702
 7422 004a 0AF1010A 		add	r10, r10, #1
 7423              	.LVL832:
3131:source\fatfs/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 7424              		.loc 1 3131 7 is_stmt 1 view .LVU2703
3132:source\fatfs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7425              		.loc 1 3132 7 view .LVU2704
3132:source\fatfs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7426              		.loc 1 3132 10 is_stmt 0 view .LVU2705
 7427 004e 07D8     		bhi	.L771
 7428              	.LVL833:
 7429              	.L778:
3132:source\fatfs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7430              		.loc 1 3132 20 is_stmt 1 discriminator 1 view .LVU2706
 7431 0050 0226     		movs	r6, #2
 7432              	.L836:
3133:source\fatfs/ff.c **** 					} while (cl == pcl + 1);
 7433              		.loc 1 3133 29 is_stmt 0 discriminator 1 view .LVU2707
 7434 0052 84F80762 		strb	r6, [r4, #519]
3133:source\fatfs/ff.c **** 					} while (cl == pcl + 1);
 7435              		.loc 1 3133 29 is_stmt 1 discriminator 1 view .LVU2708
 7436              	.L767:
 7437              	.LVL834:
3251:source\fatfs/ff.c **** 
 7438              		.loc 1 3251 1 is_stmt 0 view .LVU2709
 7439 0056 3046     		mov	r0, r6
 7440 0058 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 7441              	.LVL835:
 7442              	.L798:
3131:source\fatfs/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 7443              		.loc 1 3131 12 view .LVU2710
 7444 005c 8046     		mov	r8, r0
 7445              	.LVL836:
3131:source\fatfs/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 7446              		.loc 1 3131 12 view .LVU2711
 7447 005e EAE7     		b	.L775
 7448              	.LVL837:
 7449              	.L771:
3132:source\fatfs/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7450              		.loc 1 3132 45 is_stmt 1 discriminator 2 view .LVU2712
3133:source\fatfs/ff.c **** 					} while (cl == pcl + 1);
 7451              		.loc 1 3133 7 discriminator 2 view .LVU2713
3133:source\fatfs/ff.c **** 					} while (cl == pcl + 1);
 7452              		.loc 1 3133 10 is_stmt 0 discriminator 2 view .LVU2714
 7453 0060 431C     		adds	r3, r0, #1
 7454 0062 01D1     		bne	.L772
 7455              	.LVL838:
 7456              	.L781:
3133:source\fatfs/ff.c **** 					} while (cl == pcl + 1);
 7457              		.loc 1 3133 29 is_stmt 1 discriminator 1 view .LVU2715
 7458 0064 0126     		movs	r6, #1
 7459 0066 F4E7     		b	.L836
 7460              	.LVL839:
 7461              	.L772:
3133:source\fatfs/ff.c **** 					} while (cl == pcl + 1);
 7462              		.loc 1 3133 55 discriminator 2 view .LVU2716
3134:source\fatfs/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 7463              		.loc 1 3134 18 discriminator 2 view .LVU2717
3134:source\fatfs/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 7464              		.loc 1 3134 25 is_stmt 0 discriminator 2 view .LVU2718
 7465 0068 09F10109 		add	r9, r9, #1
 7466              	.LVL840:
3134:source\fatfs/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 7467              		.loc 1 3134 18 discriminator 2 view .LVU2719
 7468 006c 8145     		cmp	r9, r0
 7469 006e E5D0     		beq	.L773
 7470              	.LVL841:
3128:source\fatfs/ff.c **** 					do {
 7471              		.loc 1 3128 30 view .LVU2720
 7472 0070 0237     		adds	r7, r7, #2
 7473              	.LVL842:
3135:source\fatfs/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
 7474              		.loc 1 3135 6 is_stmt 1 view .LVU2721
3135:source\fatfs/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
 7475              		.loc 1 3135 9 is_stmt 0 view .LVU2722
 7476 0072 BB45     		cmp	fp, r7
3136:source\fatfs/ff.c **** 					}
 7477              		.loc 1 3136 7 is_stmt 1 view .LVU2723
 7478              	.LVL843:
3136:source\fatfs/ff.c **** 					}
 7479              		.loc 1 3136 14 is_stmt 0 view .LVU2724
 7480 0074 21BF     		itttt	cs
 7481 0076 2B46     		movcs	r3, r5
 7482 0078 43F808AB 		strcs	r10, [r3], #8
3136:source\fatfs/ff.c **** 					}
 7483              		.loc 1 3136 21 is_stmt 1 view .LVU2725
 7484              	.LVL844:
3136:source\fatfs/ff.c **** 					}
 7485              		.loc 1 3136 28 is_stmt 0 view .LVU2726
 7486 007c C5F80480 		strcs	r8, [r5, #4]
3136:source\fatfs/ff.c **** 					}
 7487              		.loc 1 3136 25 view .LVU2727
 7488 0080 1D46     		movcs	r5, r3
 7489              	.LVL845:
3138:source\fatfs/ff.c **** 			}
 7490              		.loc 1 3138 17 is_stmt 1 view .LVU2728
3138:source\fatfs/ff.c **** 			}
 7491              		.loc 1 3138 25 is_stmt 0 view .LVU2729
 7492 0082 D4F80032 		ldr	r3, [r4, #512]
3138:source\fatfs/ff.c **** 			}
 7493              		.loc 1 3138 17 view .LVU2730
 7494 0086 D3F81432 		ldr	r3, [r3, #532]
 7495 008a 8342     		cmp	r3, r0
 7496 008c E6D8     		bhi	.L798
 7497              	.LVL846:
 7498              	.L770:
3140:source\fatfs/ff.c **** 			if (ulen <= tlen)
 7499              		.loc 1 3140 4 is_stmt 1 view .LVU2731
3140:source\fatfs/ff.c **** 			if (ulen <= tlen)
 7500              		.loc 1 3140 15 is_stmt 0 view .LVU2732
 7501 008e D4F82432 		ldr	r3, [r4, #548]
3141:source\fatfs/ff.c **** 				*tbl = 0;		/* Terminate table */
 7502              		.loc 1 3141 7 view .LVU2733
 7503 0092 5F45     		cmp	r7, fp
3140:source\fatfs/ff.c **** 			if (ulen <= tlen)
 7504              		.loc 1 3140 15 view .LVU2734
 7505 0094 1F60     		str	r7, [r3]
3141:source\fatfs/ff.c **** 				*tbl = 0;		/* Terminate table */
 7506              		.loc 1 3141 4 is_stmt 1 view .LVU2735
3141:source\fatfs/ff.c **** 				*tbl = 0;		/* Terminate table */
 7507              		.loc 1 3141 7 is_stmt 0 view .LVU2736
 7508 0096 00F2F980 		bhi	.L799
3142:source\fatfs/ff.c **** 			else
 7509              		.loc 1 3142 5 is_stmt 1 view .LVU2737
3142:source\fatfs/ff.c **** 			else
 7510              		.loc 1 3142 10 is_stmt 0 view .LVU2738
 7511 009a 0023     		movs	r3, #0
 7512 009c 2B60     		str	r3, [r5]
 7513 009e DAE7     		b	.L767
 7514              	.LVL847:
 7515              	.L769:
3147:source\fatfs/ff.c **** 				ofs = fp->fsize;
 7516              		.loc 1 3147 4 is_stmt 1 view .LVU2739
 7517 00a0 D4F80C72 		ldr	r7, [r4, #524]
 7518 00a4 AF42     		cmp	r7, r5
 7519 00a6 28BF     		it	cs
 7520 00a8 2F46     		movcs	r7, r5
 7521              	.LVL848:
3149:source\fatfs/ff.c **** 			if (ofs) {
 7522              		.loc 1 3149 4 view .LVU2740
3149:source\fatfs/ff.c **** 			if (ofs) {
 7523              		.loc 1 3149 13 is_stmt 0 view .LVU2741
 7524 00aa C4F80872 		str	r7, [r4, #520]
3150:source\fatfs/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
 7525              		.loc 1 3150 4 is_stmt 1 view .LVU2742
3150:source\fatfs/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
 7526              		.loc 1 3150 7 is_stmt 0 view .LVU2743
 7527 00ae 002F     		cmp	r7, #0
 7528 00b0 D1D0     		beq	.L767
3151:source\fatfs/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
 7529              		.loc 1 3151 5 is_stmt 1 view .LVU2744
3151:source\fatfs/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
 7530              		.loc 1 3151 17 is_stmt 0 view .LVU2745
 7531 00b2 07F1FF39 		add	r9, r7, #-1
 7532 00b6 4946     		mov	r1, r9
 7533 00b8 2046     		mov	r0, r4
 7534              	.LVL849:
3151:source\fatfs/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
 7535              		.loc 1 3151 17 view .LVU2746
 7536 00ba FFF7FEFF 		bl	clmt_clust
 7537              	.LVL850:
3152:source\fatfs/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 7538              		.loc 1 3152 11 view .LVU2747
 7539 00be D4F80082 		ldr	r8, [r4, #512]
3151:source\fatfs/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
 7540              		.loc 1 3151 15 view .LVU2748
 7541 00c2 C4F81402 		str	r0, [r4, #532]
3152:source\fatfs/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 7542              		.loc 1 3152 5 is_stmt 1 view .LVU2749
3151:source\fatfs/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
 7543              		.loc 1 3151 17 is_stmt 0 view .LVU2750
 7544 00c6 0146     		mov	r1, r0
3152:source\fatfs/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 7545              		.loc 1 3152 11 view .LVU2751
 7546 00c8 4046     		mov	r0, r8
 7547 00ca FFF7FEFF 		bl	clust2sect
 7548              	.LVL851:
3153:source\fatfs/ff.c **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 7549              		.loc 1 3153 5 is_stmt 1 view .LVU2752
3153:source\fatfs/ff.c **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 7550              		.loc 1 3153 8 is_stmt 0 view .LVU2753
 7551 00ce 0028     		cmp	r0, #0
 7552 00d0 BED0     		beq	.L778
3153:source\fatfs/ff.c **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 7553              		.loc 1 3153 40 is_stmt 1 discriminator 2 view .LVU2754
3154:source\fatfs/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 7554              		.loc 1 3154 5 discriminator 2 view .LVU2755
3155:source\fatfs/ff.c **** #if !_FS_TINY
 7555              		.loc 1 3155 18 is_stmt 0 discriminator 2 view .LVU2756
 7556 00d2 C7F30807 		ubfx	r7, r7, #0, #9
 7557              	.LVL852:
3154:source\fatfs/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 7558              		.loc 1 3154 44 discriminator 2 view .LVU2757
 7559 00d6 98F80252 		ldrb	r5, [r8, #514]	@ zero_extendqisi2
 7560              	.LVL853:
3155:source\fatfs/ff.c **** #if !_FS_TINY
 7561              		.loc 1 3155 5 is_stmt 1 discriminator 2 view .LVU2758
3155:source\fatfs/ff.c **** #if !_FS_TINY
 7562              		.loc 1 3155 8 is_stmt 0 discriminator 2 view .LVU2759
 7563 00da 002F     		cmp	r7, #0
 7564 00dc BBD0     		beq	.L767
3154:source\fatfs/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 7565              		.loc 1 3154 52 discriminator 1 view .LVU2760
 7566 00de 013D     		subs	r5, r5, #1
 7567              	.LVL854:
3155:source\fatfs/ff.c **** #if !_FS_TINY
 7568              		.loc 1 3155 43 discriminator 1 view .LVU2761
 7569 00e0 D4F81822 		ldr	r2, [r4, #536]
3154:source\fatfs/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 7570              		.loc 1 3154 35 discriminator 1 view .LVU2762
 7571 00e4 05EA5925 		and	r5, r5, r9, lsr #9
 7572              	.LVL855:
3154:source\fatfs/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 7573              		.loc 1 3154 9 discriminator 1 view .LVU2763
 7574 00e8 0544     		add	r5, r5, r0
3155:source\fatfs/ff.c **** #if !_FS_TINY
 7575              		.loc 1 3155 31 discriminator 1 view .LVU2764
 7576 00ea AA42     		cmp	r2, r5
 7577 00ec B3D0     		beq	.L767
3158:source\fatfs/ff.c **** 						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 7578              		.loc 1 3158 6 is_stmt 1 view .LVU2765
3158:source\fatfs/ff.c **** 						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 7579              		.loc 1 3158 9 is_stmt 0 view .LVU2766
 7580 00ee 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
3159:source\fatfs/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
 7581              		.loc 1 3159 11 view .LVU2767
 7582 00f2 98F80102 		ldrb	r0, [r8, #513]	@ zero_extendqisi2
 7583              	.LVL856:
3158:source\fatfs/ff.c **** 						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 7584              		.loc 1 3158 9 view .LVU2768
 7585 00f6 5F06     		lsls	r7, r3, #25
 7586 00f8 0BD5     		bpl	.L780
3159:source\fatfs/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
 7587              		.loc 1 3159 7 is_stmt 1 view .LVU2769
3159:source\fatfs/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
 7588              		.loc 1 3159 11 is_stmt 0 view .LVU2770
 7589 00fa 0123     		movs	r3, #1
 7590 00fc 2146     		mov	r1, r4
 7591 00fe FFF7FEFF 		bl	disk_write
 7592              	.LVL857:
3159:source\fatfs/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
 7593              		.loc 1 3159 10 view .LVU2771
 7594 0102 0028     		cmp	r0, #0
 7595 0104 AED1     		bne	.L781
3160:source\fatfs/ff.c **** 						fp->flag &= ~FA__DIRTY;
 7596              		.loc 1 3160 34 is_stmt 1 view .LVU2772
3161:source\fatfs/ff.c **** 					}
 7597              		.loc 1 3161 7 view .LVU2773
3161:source\fatfs/ff.c **** 					}
 7598              		.loc 1 3161 16 is_stmt 0 view .LVU2774
 7599 0106 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 7600 010a 23F04003 		bic	r3, r3, #64
 7601 010e 84F80632 		strb	r3, [r4, #518]
 7602              	.L780:
3164:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 7603              		.loc 1 3164 6 is_stmt 1 view .LVU2775
3164:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 7604              		.loc 1 3164 10 is_stmt 0 view .LVU2776
 7605 0112 D4F80002 		ldr	r0, [r4, #512]
 7606 0116 0123     		movs	r3, #1
 7607 0118 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 7608 011c 2A46     		mov	r2, r5
 7609 011e 2146     		mov	r1, r4
 7610 0120 FFF7FEFF 		bl	disk_read
 7611              	.LVL858:
3164:source\fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 7612              		.loc 1 3164 9 view .LVU2777
 7613 0124 0028     		cmp	r0, #0
 7614 0126 9DD1     		bne	.L781
3165:source\fatfs/ff.c **** #endif
 7615              		.loc 1 3165 33 is_stmt 1 view .LVU2778
3167:source\fatfs/ff.c **** 				}
 7616              		.loc 1 3167 6 view .LVU2779
3167:source\fatfs/ff.c **** 				}
 7617              		.loc 1 3167 16 is_stmt 0 view .LVU2780
 7618 0128 C4F81852 		str	r5, [r4, #536]
 7619 012c 93E7     		b	.L767
 7620              	.LVL859:
 7621              	.L768:
3176:source\fatfs/ff.c **** #if !_FS_READONLY
 7622              		.loc 1 3176 3 is_stmt 1 view .LVU2781
3182:source\fatfs/ff.c **** 		fp->fptr = nsect = 0;
 7623              		.loc 1 3182 9 is_stmt 0 view .LVU2782
 7624 012e D4E98232 		ldrd	r3, r2, [r4, #520]
3176:source\fatfs/ff.c **** #if !_FS_READONLY
 7625              		.loc 1 3176 6 view .LVU2783
 7626 0132 AA42     		cmp	r2, r5
 7627 0134 4CD2     		bcs	.L782
3178:source\fatfs/ff.c **** #endif
 7628              		.loc 1 3178 5 view .LVU2784
 7629 0136 94F80612 		ldrb	r1, [r4, #518]	@ zero_extendqisi2
 7630 013a 8907     		lsls	r1, r1, #30
 7631 013c 47D5     		bpl	.L800
3182:source\fatfs/ff.c **** 		fp->fptr = nsect = 0;
 7632              		.loc 1 3182 3 is_stmt 1 view .LVU2785
 7633              	.LVL860:
3183:source\fatfs/ff.c **** 		if (ofs) {
 7634              		.loc 1 3183 3 view .LVU2786
3183:source\fatfs/ff.c **** 		if (ofs) {
 7635              		.loc 1 3183 12 is_stmt 0 view .LVU2787
 7636 013e C4F80862 		str	r6, [r4, #520]
3184:source\fatfs/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 7637              		.loc 1 3184 3 is_stmt 1 view .LVU2788
 7638              	.LVL861:
 7639              	.L783:
3185:source\fatfs/ff.c **** 			if (ifptr > 0 &&
 7640              		.loc 1 3185 4 view .LVU2789
3185:source\fatfs/ff.c **** 			if (ifptr > 0 &&
 7641              		.loc 1 3185 19 is_stmt 0 view .LVU2790
 7642 0142 D4F80002 		ldr	r0, [r4, #512]
 7643              	.LVL862:
3185:source\fatfs/ff.c **** 			if (ifptr > 0 &&
 7644              		.loc 1 3185 10 view .LVU2791
 7645 0146 90F80272 		ldrb	r7, [r0, #514]	@ zero_extendqisi2
3185:source\fatfs/ff.c **** 			if (ifptr > 0 &&
 7646              		.loc 1 3185 8 view .LVU2792
 7647 014a 7F02     		lsls	r7, r7, #9
 7648              	.LVL863:
3186:source\fatfs/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 7649              		.loc 1 3186 4 is_stmt 1 view .LVU2793
3186:source\fatfs/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 7650              		.loc 1 3186 7 is_stmt 0 view .LVU2794
 7651 014c 002B     		cmp	r3, #0
 7652 014e 52D0     		beq	.L786
3187:source\fatfs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 7653              		.loc 1 3187 31 discriminator 1 view .LVU2795
 7654 0150 013B     		subs	r3, r3, #1
3187:source\fatfs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 7655              		.loc 1 3187 10 discriminator 1 view .LVU2796
 7656 0152 6A1E     		subs	r2, r5, #1
3187:source\fatfs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 7657              		.loc 1 3187 36 discriminator 1 view .LVU2797
 7658 0154 B3FBF7F1 		udiv	r1, r3, r7
3187:source\fatfs/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 7659              		.loc 1 3187 15 discriminator 1 view .LVU2798
 7660 0158 B2FBF7F2 		udiv	r2, r2, r7
3186:source\fatfs/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 7661              		.loc 1 3186 18 discriminator 1 view .LVU2799
 7662 015c 8A42     		cmp	r2, r1
 7663 015e 4AD3     		bcc	.L786
3188:source\fatfs/ff.c **** 				ofs -= fp->fptr;
 7664              		.loc 1 3188 5 is_stmt 1 view .LVU2800
3188:source\fatfs/ff.c **** 				ofs -= fp->fptr;
 7665              		.loc 1 3188 30 is_stmt 0 view .LVU2801
 7666 0160 7A42     		rsbs	r2, r7, #0
3188:source\fatfs/ff.c **** 				ofs -= fp->fptr;
 7667              		.loc 1 3188 28 view .LVU2802
 7668 0162 1340     		ands	r3, r3, r2
3190:source\fatfs/ff.c **** 			} else {									/* When seek to back cluster, */
 7669              		.loc 1 3190 10 view .LVU2803
 7670 0164 D4F81412 		ldr	r1, [r4, #532]
3188:source\fatfs/ff.c **** 				ofs -= fp->fptr;
 7671              		.loc 1 3188 14 view .LVU2804
 7672 0168 C4F80832 		str	r3, [r4, #520]
3189:source\fatfs/ff.c **** 				clst = fp->clust;
 7673              		.loc 1 3189 5 is_stmt 1 view .LVU2805
3189:source\fatfs/ff.c **** 				clst = fp->clust;
 7674              		.loc 1 3189 9 is_stmt 0 view .LVU2806
 7675 016c ED1A     		subs	r5, r5, r3
 7676              	.LVL864:
3190:source\fatfs/ff.c **** 			} else {									/* When seek to back cluster, */
 7677              		.loc 1 3190 5 is_stmt 1 view .LVU2807
 7678              	.L787:
3203:source\fatfs/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 7679              		.loc 1 3203 4 view .LVU2808
3203:source\fatfs/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 7680              		.loc 1 3203 7 is_stmt 0 view .LVU2809
 7681 016e 0029     		cmp	r1, #0
 7682 0170 46D1     		bne	.L789
 7683              	.L791:
3183:source\fatfs/ff.c **** 		if (ofs) {
 7684              		.loc 1 3183 20 view .LVU2810
 7685 0172 0025     		movs	r5, #0
 7686              	.LVL865:
 7687              	.L785:
3228:source\fatfs/ff.c **** #if !_FS_TINY
 7688              		.loc 1 3228 3 is_stmt 1 view .LVU2811
3228:source\fatfs/ff.c **** #if !_FS_TINY
 7689              		.loc 1 3228 16 is_stmt 0 view .LVU2812
 7690 0174 D4F80832 		ldr	r3, [r4, #520]
 7691 0178 C3F30803 		ubfx	r3, r3, #0, #9
3228:source\fatfs/ff.c **** #if !_FS_TINY
 7692              		.loc 1 3228 6 view .LVU2813
 7693 017c 6BB3     		cbz	r3, .L784
3228:source\fatfs/ff.c **** #if !_FS_TINY
 7694              		.loc 1 3228 43 discriminator 1 view .LVU2814
 7695 017e D4F81822 		ldr	r2, [r4, #536]
3228:source\fatfs/ff.c **** #if !_FS_TINY
 7696              		.loc 1 3228 29 discriminator 1 view .LVU2815
 7697 0182 AA42     		cmp	r2, r5
 7698 0184 29D0     		beq	.L784
3231:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 7699              		.loc 1 3231 4 is_stmt 1 view .LVU2816
3232:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 7700              		.loc 1 3232 9 is_stmt 0 view .LVU2817
 7701 0186 D4F80032 		ldr	r3, [r4, #512]
 7702 018a 93F80102 		ldrb	r0, [r3, #513]	@ zero_extendqisi2
3231:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 7703              		.loc 1 3231 7 view .LVU2818
 7704 018e 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 7705 0192 5B06     		lsls	r3, r3, #25
 7706 0194 0CD5     		bpl	.L796
3232:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 7707              		.loc 1 3232 5 is_stmt 1 view .LVU2819
3232:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 7708              		.loc 1 3232 9 is_stmt 0 view .LVU2820
 7709 0196 0123     		movs	r3, #1
 7710 0198 2146     		mov	r1, r4
 7711 019a FFF7FEFF 		bl	disk_write
 7712              	.LVL866:
3232:source\fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 7713              		.loc 1 3232 8 view .LVU2821
 7714 019e 0028     		cmp	r0, #0
 7715 01a0 7FF460AF 		bne	.L781
3233:source\fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
 7716              		.loc 1 3233 32 is_stmt 1 view .LVU2822
3234:source\fatfs/ff.c **** 			}
 7717              		.loc 1 3234 5 view .LVU2823
3234:source\fatfs/ff.c **** 			}
 7718              		.loc 1 3234 14 is_stmt 0 view .LVU2824
 7719 01a4 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 7720 01a8 23F04003 		bic	r3, r3, #64
 7721 01ac 84F80632 		strb	r3, [r4, #518]
 7722              	.L796:
3237:source\fatfs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
 7723              		.loc 1 3237 4 is_stmt 1 view .LVU2825
3237:source\fatfs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
 7724              		.loc 1 3237 8 is_stmt 0 view .LVU2826
 7725 01b0 D4F80002 		ldr	r0, [r4, #512]
 7726 01b4 0123     		movs	r3, #1
 7727 01b6 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 7728 01ba 2A46     		mov	r2, r5
 7729 01bc 2146     		mov	r1, r4
 7730 01be FFF7FEFF 		bl	disk_read
 7731              	.LVL867:
3237:source\fatfs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
 7732              		.loc 1 3237 7 view .LVU2827
 7733 01c2 0028     		cmp	r0, #0
 7734 01c4 7FF44EAF 		bne	.L781
3238:source\fatfs/ff.c **** #endif
 7735              		.loc 1 3238 31 is_stmt 1 view .LVU2828
3240:source\fatfs/ff.c **** 		}
 7736              		.loc 1 3240 4 view .LVU2829
3240:source\fatfs/ff.c **** 		}
 7737              		.loc 1 3240 14 is_stmt 0 view .LVU2830
 7738 01c8 C4F81852 		str	r5, [r4, #536]
 7739 01cc 05E0     		b	.L784
 7740              	.LVL868:
 7741              	.L800:
3240:source\fatfs/ff.c **** 		}
 7742              		.loc 1 3240 14 view .LVU2831
 7743 01ce 1546     		mov	r5, r2
 7744              	.LVL869:
 7745              	.L782:
3182:source\fatfs/ff.c **** 		fp->fptr = nsect = 0;
 7746              		.loc 1 3182 3 is_stmt 1 view .LVU2832
3183:source\fatfs/ff.c **** 		if (ofs) {
 7747              		.loc 1 3183 3 view .LVU2833
3183:source\fatfs/ff.c **** 		if (ofs) {
 7748              		.loc 1 3183 12 is_stmt 0 view .LVU2834
 7749 01d0 0022     		movs	r2, #0
 7750 01d2 C4F80822 		str	r2, [r4, #520]
 7751              	.LVL870:
3184:source\fatfs/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 7752              		.loc 1 3184 3 is_stmt 1 view .LVU2835
3184:source\fatfs/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 7753              		.loc 1 3184 6 is_stmt 0 view .LVU2836
 7754 01d6 002D     		cmp	r5, #0
 7755 01d8 B3D1     		bne	.L783
 7756              	.LVL871:
 7757              	.L784:
3243:source\fatfs/ff.c **** 			fp->fsize = fp->fptr;
 7758              		.loc 1 3243 3 is_stmt 1 view .LVU2837
3243:source\fatfs/ff.c **** 			fp->fsize = fp->fptr;
 7759              		.loc 1 3243 6 is_stmt 0 view .LVU2838
 7760 01da D4E98232 		ldrd	r3, r2, [r4, #520]
 7761 01de 9342     		cmp	r3, r2
 7762 01e0 7FF639AF 		bls	.L767
3244:source\fatfs/ff.c **** 			fp->flag |= FA__WRITTEN;
 7763              		.loc 1 3244 4 is_stmt 1 view .LVU2839
3244:source\fatfs/ff.c **** 			fp->flag |= FA__WRITTEN;
 7764              		.loc 1 3244 14 is_stmt 0 view .LVU2840
 7765 01e4 C4F80C32 		str	r3, [r4, #524]
3245:source\fatfs/ff.c **** 		}
 7766              		.loc 1 3245 4 is_stmt 1 view .LVU2841
3245:source\fatfs/ff.c **** 		}
 7767              		.loc 1 3245 13 is_stmt 0 view .LVU2842
 7768 01e8 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 7769 01ec 43F02003 		orr	r3, r3, #32
 7770 01f0 84F80632 		strb	r3, [r4, #518]
 7771 01f4 2FE7     		b	.L767
 7772              	.LVL872:
 7773              	.L786:
3192:source\fatfs/ff.c **** #if !_FS_READONLY
 7774              		.loc 1 3192 5 is_stmt 1 view .LVU2843
3192:source\fatfs/ff.c **** #if !_FS_READONLY
 7775              		.loc 1 3192 10 is_stmt 0 view .LVU2844
 7776 01f6 D4F81012 		ldr	r1, [r4, #528]
 7777              	.LVL873:
3194:source\fatfs/ff.c **** 					clst = create_chain(fp->fs, 0);
 7778              		.loc 1 3194 5 is_stmt 1 view .LVU2845
3194:source\fatfs/ff.c **** 					clst = create_chain(fp->fs, 0);
 7779              		.loc 1 3194 8 is_stmt 0 view .LVU2846
 7780 01fa B1B1     		cbz	r1, .L788
3201:source\fatfs/ff.c **** 			}
 7781              		.loc 1 3201 5 is_stmt 1 view .LVU2847
3201:source\fatfs/ff.c **** 			}
 7782              		.loc 1 3201 15 is_stmt 0 view .LVU2848
 7783 01fc C4F81412 		str	r1, [r4, #532]
3203:source\fatfs/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 7784              		.loc 1 3203 4 is_stmt 1 view .LVU2849
 7785              	.L789:
3204:source\fatfs/ff.c **** #if !_FS_READONLY
 7786              		.loc 1 3204 16 view .LVU2850
 7787 0200 BD42     		cmp	r5, r7
 7788 0202 1ED8     		bhi	.L795
 7789              	.LVL874:
 7790              	.L793:
3220:source\fatfs/ff.c **** 				if (ofs % SS(fp->fs)) {
 7791              		.loc 1 3220 5 view .LVU2851
3220:source\fatfs/ff.c **** 				if (ofs % SS(fp->fs)) {
 7792              		.loc 1 3220 14 is_stmt 0 view .LVU2852
 7793 0204 D4F80832 		ldr	r3, [r4, #520]
 7794 0208 2B44     		add	r3, r3, r5
 7795 020a C4F80832 		str	r3, [r4, #520]
3221:source\fatfs/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 7796              		.loc 1 3221 5 is_stmt 1 view .LVU2853
3221:source\fatfs/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 7797              		.loc 1 3221 13 is_stmt 0 view .LVU2854
 7798 020e C5F30803 		ubfx	r3, r5, #0, #9
3221:source\fatfs/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 7799              		.loc 1 3221 8 view .LVU2855
 7800 0212 002B     		cmp	r3, #0
 7801 0214 ADD0     		beq	.L791
3222:source\fatfs/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 7802              		.loc 1 3222 6 is_stmt 1 view .LVU2856
3222:source\fatfs/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 7803              		.loc 1 3222 14 is_stmt 0 view .LVU2857
 7804 0216 D4F80002 		ldr	r0, [r4, #512]
 7805 021a FFF7FEFF 		bl	clust2sect
 7806              	.LVL875:
3223:source\fatfs/ff.c **** 					nsect += ofs / SS(fp->fs);
 7807              		.loc 1 3223 6 is_stmt 1 view .LVU2858
3223:source\fatfs/ff.c **** 					nsect += ofs / SS(fp->fs);
 7808              		.loc 1 3223 9 is_stmt 0 view .LVU2859
 7809 021e 0028     		cmp	r0, #0
 7810 0220 3FF416AF 		beq	.L778
3223:source\fatfs/ff.c **** 					nsect += ofs / SS(fp->fs);
 7811              		.loc 1 3223 43 is_stmt 1 discriminator 2 view .LVU2860
3224:source\fatfs/ff.c **** 				}
 7812              		.loc 1 3224 6 discriminator 2 view .LVU2861
3224:source\fatfs/ff.c **** 				}
 7813              		.loc 1 3224 12 is_stmt 0 discriminator 2 view .LVU2862
 7814 0224 00EB5525 		add	r5, r0, r5, lsr #9
 7815              	.LVL876:
3224:source\fatfs/ff.c **** 				}
 7816              		.loc 1 3224 12 discriminator 2 view .LVU2863
 7817 0228 A4E7     		b	.L785
 7818              	.LVL877:
 7819              	.L788:
3195:source\fatfs/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 7820              		.loc 1 3195 6 is_stmt 1 view .LVU2864
3195:source\fatfs/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 7821              		.loc 1 3195 13 is_stmt 0 view .LVU2865
 7822 022a FFF7FEFF 		bl	create_chain
 7823              	.LVL878:
3196:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7824              		.loc 1 3196 9 view .LVU2866
 7825 022e 0128     		cmp	r0, #1
3195:source\fatfs/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 7826              		.loc 1 3195 13 view .LVU2867
 7827 0230 0146     		mov	r1, r0
 7828              	.LVL879:
3196:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7829              		.loc 1 3196 6 is_stmt 1 view .LVU2868
3196:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7830              		.loc 1 3196 9 is_stmt 0 view .LVU2869
 7831 0232 3FF40DAF 		beq	.L778
3196:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7832              		.loc 1 3196 46 is_stmt 1 discriminator 2 view .LVU2870
3197:source\fatfs/ff.c **** 					fp->sclust = clst;
 7833              		.loc 1 3197 6 discriminator 2 view .LVU2871
3197:source\fatfs/ff.c **** 					fp->sclust = clst;
 7834              		.loc 1 3197 9 is_stmt 0 discriminator 2 view .LVU2872
 7835 0236 421C     		adds	r2, r0, #1
 7836 0238 3FF414AF 		beq	.L781
3197:source\fatfs/ff.c **** 					fp->sclust = clst;
 7837              		.loc 1 3197 56 is_stmt 1 discriminator 2 view .LVU2873
3198:source\fatfs/ff.c **** 				}
 7838              		.loc 1 3198 6 discriminator 2 view .LVU2874
3201:source\fatfs/ff.c **** 			}
 7839              		.loc 1 3201 15 is_stmt 0 discriminator 2 view .LVU2875
 7840 023c C4E98400 		strd	r0, r0, [r4, #528]
 7841 0240 95E7     		b	.L787
 7842              	.LVL880:
 7843              	.L795:
3206:source\fatfs/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 7844              		.loc 1 3206 6 is_stmt 1 view .LVU2876
3206:source\fatfs/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 7845              		.loc 1 3206 9 is_stmt 0 view .LVU2877
 7846 0242 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
3207:source\fatfs/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 7847              		.loc 1 3207 14 view .LVU2878
 7848 0246 D4F80002 		ldr	r0, [r4, #512]
3206:source\fatfs/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 7849              		.loc 1 3206 9 view .LVU2879
 7850 024a 9B07     		lsls	r3, r3, #30
 7851 024c 05D5     		bpl	.L792
3207:source\fatfs/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 7852              		.loc 1 3207 7 is_stmt 1 view .LVU2880
3207:source\fatfs/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 7853              		.loc 1 3207 14 is_stmt 0 view .LVU2881
 7854 024e FFF7FEFF 		bl	create_chain
 7855              	.LVL881:
3208:source\fatfs/ff.c **** 							ofs = bcs; break;
 7856              		.loc 1 3208 7 is_stmt 1 view .LVU2882
3208:source\fatfs/ff.c **** 							ofs = bcs; break;
 7857              		.loc 1 3208 10 is_stmt 0 view .LVU2883
 7858 0252 0146     		mov	r1, r0
 7859 0254 20B9     		cbnz	r0, .L794
 7860 0256 3D46     		mov	r5, r7
 7861              	.LVL882:
3208:source\fatfs/ff.c **** 							ofs = bcs; break;
 7862              		.loc 1 3208 10 view .LVU2884
 7863 0258 D4E7     		b	.L793
 7864              	.LVL883:
 7865              	.L792:
3213:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7866              		.loc 1 3213 7 is_stmt 1 view .LVU2885
3213:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7867              		.loc 1 3213 14 is_stmt 0 view .LVU2886
 7868 025a FFF7FEFF 		bl	get_fat
 7869              	.LVL884:
3213:source\fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 7870              		.loc 1 3213 14 view .LVU2887
 7871 025e 0146     		mov	r1, r0
 7872              	.LVL885:
 7873              	.L794:
3214:source\fatfs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 7874              		.loc 1 3214 6 is_stmt 1 view .LVU2888
3214:source\fatfs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 7875              		.loc 1 3214 9 is_stmt 0 view .LVU2889
 7876 0260 4A1C     		adds	r2, r1, #1
 7877 0262 3FF4FFAE 		beq	.L781
3214:source\fatfs/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 7878              		.loc 1 3214 56 is_stmt 1 discriminator 2 view .LVU2890
3215:source\fatfs/ff.c **** 					fp->clust = clst;
 7879              		.loc 1 3215 6 discriminator 2 view .LVU2891
3215:source\fatfs/ff.c **** 					fp->clust = clst;
 7880              		.loc 1 3215 9 is_stmt 0 discriminator 2 view .LVU2892
 7881 0266 0129     		cmp	r1, #1
 7882 0268 7FF6F2AE 		bls	.L778
3215:source\fatfs/ff.c **** 					fp->clust = clst;
 7883              		.loc 1 3215 37 discriminator 2 view .LVU2893
 7884 026c D4F80032 		ldr	r3, [r4, #512]
3215:source\fatfs/ff.c **** 					fp->clust = clst;
 7885              		.loc 1 3215 20 discriminator 2 view .LVU2894
 7886 0270 D3F81432 		ldr	r3, [r3, #532]
 7887 0274 8B42     		cmp	r3, r1
 7888 0276 7FF6EBAE 		bls	.L778
3215:source\fatfs/ff.c **** 					fp->clust = clst;
 7889              		.loc 1 3215 74 is_stmt 1 discriminator 4 view .LVU2895
3216:source\fatfs/ff.c **** 					fp->fptr += bcs;
 7890              		.loc 1 3216 6 discriminator 4 view .LVU2896
3217:source\fatfs/ff.c **** 					ofs -= bcs;
 7891              		.loc 1 3217 15 is_stmt 0 discriminator 4 view .LVU2897
 7892 027a D4F80832 		ldr	r3, [r4, #520]
3216:source\fatfs/ff.c **** 					fp->fptr += bcs;
 7893              		.loc 1 3216 16 discriminator 4 view .LVU2898
 7894 027e C4F81412 		str	r1, [r4, #532]
3217:source\fatfs/ff.c **** 					ofs -= bcs;
 7895              		.loc 1 3217 6 is_stmt 1 discriminator 4 view .LVU2899
3217:source\fatfs/ff.c **** 					ofs -= bcs;
 7896              		.loc 1 3217 15 is_stmt 0 discriminator 4 view .LVU2900
 7897 0282 3B44     		add	r3, r3, r7
 7898 0284 C4F80832 		str	r3, [r4, #520]
3218:source\fatfs/ff.c **** 				}
 7899              		.loc 1 3218 6 is_stmt 1 discriminator 4 view .LVU2901
3218:source\fatfs/ff.c **** 				}
 7900              		.loc 1 3218 10 is_stmt 0 discriminator 4 view .LVU2902
 7901 0288 ED1B     		subs	r5, r5, r7
 7902              	.LVL886:
3218:source\fatfs/ff.c **** 				}
 7903              		.loc 1 3218 10 discriminator 4 view .LVU2903
 7904 028a B9E7     		b	.L789
 7905              	.LVL887:
 7906              	.L799:
3144:source\fatfs/ff.c **** 
 7907              		.loc 1 3144 9 view .LVU2904
 7908 028c 1126     		movs	r6, #17
 7909 028e E2E6     		b	.L767
 7910              		.cfi_endproc
 7911              	.LFE168:
 7913              		.section	.text.f_opendir,"ax",%progbits
 7914              		.align	1
 7915              		.global	f_opendir
 7916              		.syntax unified
 7917              		.thumb
 7918              		.thumb_func
 7920              	f_opendir:
 7921              	.LVL888:
 7922              	.LFB169:
3264:source\fatfs/ff.c **** 	FRESULT res;
 7923              		.loc 1 3264 1 is_stmt 1 view -0
 7924              		.cfi_startproc
 7925              		@ args = 0, pretend = 0, frame = 24
 7926              		@ frame_needed = 0, uses_anonymous_args = 0
3265:source\fatfs/ff.c **** 	FATFS* fs;
 7927              		.loc 1 3265 2 view .LVU2906
3266:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 7928              		.loc 1 3266 2 view .LVU2907
3267:source\fatfs/ff.c **** 
 7929              		.loc 1 3267 2 view .LVU2908
3267:source\fatfs/ff.c **** 
 7930              		.loc 1 3267 2 view .LVU2909
3270:source\fatfs/ff.c **** 
 7931              		.loc 1 3270 2 view .LVU2910
3264:source\fatfs/ff.c **** 	FRESULT res;
 7932              		.loc 1 3264 1 is_stmt 0 view .LVU2911
 7933 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 7934              		.cfi_def_cfa_offset 20
 7935              		.cfi_offset 4, -20
 7936              		.cfi_offset 5, -16
 7937              		.cfi_offset 6, -12
 7938              		.cfi_offset 7, -8
 7939              		.cfi_offset 14, -4
 7940 0002 87B0     		sub	sp, sp, #28
 7941              		.cfi_def_cfa_offset 48
3270:source\fatfs/ff.c **** 
 7942              		.loc 1 3270 5 view .LVU2912
 7943 0004 0546     		mov	r5, r0
3264:source\fatfs/ff.c **** 	FRESULT res;
 7944              		.loc 1 3264 1 view .LVU2913
 7945 0006 0191     		str	r1, [sp, #4]
3270:source\fatfs/ff.c **** 
 7946              		.loc 1 3270 5 view .LVU2914
 7947 0008 0028     		cmp	r0, #0
 7948 000a 4ED0     		beq	.L847
3273:source\fatfs/ff.c **** 	if (res == FR_OK) {
 7949              		.loc 1 3273 2 is_stmt 1 view .LVU2915
3273:source\fatfs/ff.c **** 	if (res == FR_OK) {
 7950              		.loc 1 3273 8 is_stmt 0 view .LVU2916
 7951 000c 0022     		movs	r2, #0
 7952 000e 01A9     		add	r1, sp, #4
 7953              	.LVL889:
3273:source\fatfs/ff.c **** 	if (res == FR_OK) {
 7954              		.loc 1 3273 8 view .LVU2917
 7955 0010 02A8     		add	r0, sp, #8
 7956              	.LVL890:
3273:source\fatfs/ff.c **** 	if (res == FR_OK) {
 7957              		.loc 1 3273 8 view .LVU2918
 7958 0012 FFF7FEFF 		bl	find_volume
 7959              	.LVL891:
3274:source\fatfs/ff.c **** 		dp->fs = fs;
 7960              		.loc 1 3274 2 is_stmt 1 view .LVU2919
3274:source\fatfs/ff.c **** 		dp->fs = fs;
 7961              		.loc 1 3274 5 is_stmt 0 view .LVU2920
 7962 0016 0446     		mov	r4, r0
 7963 0018 F0B9     		cbnz	r0, .L839
3275:source\fatfs/ff.c **** 		INIT_BUF(*dp);
 7964              		.loc 1 3275 3 is_stmt 1 view .LVU2921
3275:source\fatfs/ff.c **** 		INIT_BUF(*dp);
 7965              		.loc 1 3275 10 is_stmt 0 view .LVU2922
 7966 001a 029F     		ldr	r7, [sp, #8]
 7967 001c C5F80072 		str	r7, [r5, #512]
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7968              		.loc 1 3276 3 is_stmt 1 view .LVU2923
 7969 0020 4FF40070 		mov	r0, #512
 7970              	.LVL892:
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7971              		.loc 1 3276 3 is_stmt 0 view .LVU2924
 7972 0024 FFF7FEFF 		bl	ff_memalloc
 7973              	.LVL893:
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7974              		.loc 1 3276 3 is_stmt 1 view .LVU2925
 7975 0028 0646     		mov	r6, r0
 7976 002a 0028     		cmp	r0, #0
 7977 002c 3FD0     		beq	.L848
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7978              		.loc 1 3276 3 discriminator 2 view .LVU2926
 7979 002e 03AB     		add	r3, sp, #12
 7980 0030 C5F82002 		str	r0, [r5, #544]
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7981              		.loc 1 3276 3 discriminator 2 view .LVU2927
3277:source\fatfs/ff.c **** 		FREE_BUF();
 7982              		.loc 1 3277 9 is_stmt 0 discriminator 2 view .LVU2928
 7983 0034 0199     		ldr	r1, [sp, #4]
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7984              		.loc 1 3276 3 discriminator 2 view .LVU2929
 7985 0036 C5F81832 		str	r3, [r5, #536]
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7986              		.loc 1 3276 16 is_stmt 1 discriminator 2 view .LVU2930
3277:source\fatfs/ff.c **** 		FREE_BUF();
 7987              		.loc 1 3277 3 discriminator 2 view .LVU2931
3277:source\fatfs/ff.c **** 		FREE_BUF();
 7988              		.loc 1 3277 9 is_stmt 0 discriminator 2 view .LVU2932
 7989 003a 2846     		mov	r0, r5
 7990              	.LVL894:
3277:source\fatfs/ff.c **** 		FREE_BUF();
 7991              		.loc 1 3277 9 discriminator 2 view .LVU2933
 7992 003c FFF7FEFF 		bl	follow_path
 7993              	.LVL895:
 7994 0040 0446     		mov	r4, r0
 7995              	.LVL896:
3278:source\fatfs/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 7996              		.loc 1 3278 3 is_stmt 1 discriminator 2 view .LVU2934
 7997 0042 3046     		mov	r0, r6
 7998 0044 FFF7FEFF 		bl	ff_memfree
 7999              	.LVL897:
3279:source\fatfs/ff.c **** 			if (dp->dir) {						/* It is not the origin directory itself */
 8000              		.loc 1 3279 3 discriminator 2 view .LVU2935
3279:source\fatfs/ff.c **** 			if (dp->dir) {						/* It is not the origin directory itself */
 8001              		.loc 1 3279 6 is_stmt 0 discriminator 2 view .LVU2936
 8002 0048 54BB     		cbnz	r4, .L840
3280:source\fatfs/ff.c **** 				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8003              		.loc 1 3280 4 is_stmt 1 view .LVU2937
3280:source\fatfs/ff.c **** 				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8004              		.loc 1 3280 10 is_stmt 0 view .LVU2938
 8005 004a D5F81412 		ldr	r1, [r5, #532]
3280:source\fatfs/ff.c **** 				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8006              		.loc 1 3280 7 view .LVU2939
 8007 004e 69B1     		cbz	r1, .L841
3281:source\fatfs/ff.c **** 					dp->sclust = ld_clust(fs, dp->dir);
 8008              		.loc 1 3281 5 is_stmt 1 view .LVU2940
3281:source\fatfs/ff.c **** 					dp->sclust = ld_clust(fs, dp->dir);
 8009              		.loc 1 3281 8 is_stmt 0 view .LVU2941
 8010 0050 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 8011 0052 DB06     		lsls	r3, r3, #27
 8012 0054 04D4     		bmi	.L842
 8013              	.L846:
3284:source\fatfs/ff.c **** 			}
 8014              		.loc 1 3284 10 view .LVU2942
 8015 0056 0524     		movs	r4, #5
 8016              	.LVL898:
 8017              	.L839:
3304:source\fatfs/ff.c **** 
 8018              		.loc 1 3304 20 is_stmt 1 discriminator 1 view .LVU2943
3304:source\fatfs/ff.c **** 
 8019              		.loc 1 3304 27 is_stmt 0 discriminator 1 view .LVU2944
 8020 0058 0023     		movs	r3, #0
 8021 005a C5F80032 		str	r3, [r5, #512]
 8022 005e 19E0     		b	.L838
 8023              	.LVL899:
 8024              	.L842:
3282:source\fatfs/ff.c **** 				else							/* The object is a file */
 8025              		.loc 1 3282 6 is_stmt 1 view .LVU2945
3282:source\fatfs/ff.c **** 				else							/* The object is a file */
 8026              		.loc 1 3282 19 is_stmt 0 view .LVU2946
 8027 0060 97F80002 		ldrb	r0, [r7, #512]	@ zero_extendqisi2
 8028 0064 FFF7FEFF 		bl	ld_clust.isra.0
 8029              	.LVL900:
3282:source\fatfs/ff.c **** 				else							/* The object is a file */
 8030              		.loc 1 3282 17 view .LVU2947
 8031 0068 C5F80802 		str	r0, [r5, #520]
 8032              	.L841:
 8033              	.LVL901:
3286:source\fatfs/ff.c **** 				dp->id = fs->id;
 8034              		.loc 1 3286 4 is_stmt 1 view .LVU2948
3287:source\fatfs/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 8035              		.loc 1 3287 5 view .LVU2949
3287:source\fatfs/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 8036              		.loc 1 3287 12 is_stmt 0 view .LVU2950
 8037 006c B7F80632 		ldrh	r3, [r7, #518]
 8038 0070 A5F80432 		strh	r3, [r5, #516]	@ movhi
3288:source\fatfs/ff.c **** #if _FS_LOCK
 8039              		.loc 1 3288 5 is_stmt 1 view .LVU2951
3288:source\fatfs/ff.c **** #if _FS_LOCK
 8040              		.loc 1 3288 11 is_stmt 0 view .LVU2952
 8041 0074 0021     		movs	r1, #0
 8042 0076 2846     		mov	r0, r5
 8043 0078 FFF7FEFF 		bl	dir_sdi
 8044              	.LVL902:
3290:source\fatfs/ff.c **** 					if (dp->sclust) {
 8045              		.loc 1 3290 5 is_stmt 1 view .LVU2953
3290:source\fatfs/ff.c **** 					if (dp->sclust) {
 8046              		.loc 1 3290 8 is_stmt 0 view .LVU2954
 8047 007c 0446     		mov	r4, r0
 8048 007e 78B9     		cbnz	r0, .L840
3291:source\fatfs/ff.c **** 						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8049              		.loc 1 3291 6 is_stmt 1 view .LVU2955
3291:source\fatfs/ff.c **** 						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8050              		.loc 1 3291 9 is_stmt 0 view .LVU2956
 8051 0080 D5F80832 		ldr	r3, [r5, #520]
 8052 0084 4BB1     		cbz	r3, .L844
3292:source\fatfs/ff.c **** 						if (!dp->lockid)
 8053              		.loc 1 3292 7 is_stmt 1 view .LVU2957
3292:source\fatfs/ff.c **** 						if (!dp->lockid)
 8054              		.loc 1 3292 20 is_stmt 0 view .LVU2958
 8055 0086 0146     		mov	r1, r0
 8056 0088 2846     		mov	r0, r5
 8057              	.LVL903:
3292:source\fatfs/ff.c **** 						if (!dp->lockid)
 8058              		.loc 1 3292 20 view .LVU2959
 8059 008a FFF7FEFF 		bl	inc_lock
 8060              	.LVL904:
3292:source\fatfs/ff.c **** 						if (!dp->lockid)
 8061              		.loc 1 3292 18 view .LVU2960
 8062 008e C5F81C02 		str	r0, [r5, #540]
3293:source\fatfs/ff.c **** 							res = FR_TOO_MANY_OPEN_FILES;
 8063              		.loc 1 3293 7 is_stmt 1 view .LVU2961
3293:source\fatfs/ff.c **** 							res = FR_TOO_MANY_OPEN_FILES;
 8064              		.loc 1 3293 10 is_stmt 0 view .LVU2962
 8065 0092 40B1     		cbz	r0, .L849
 8066              	.LVL905:
 8067              	.L838:
3307:source\fatfs/ff.c **** 
 8068              		.loc 1 3307 1 view .LVU2963
 8069 0094 2046     		mov	r0, r4
 8070 0096 07B0     		add	sp, sp, #28
 8071              		.cfi_remember_state
 8072              		.cfi_def_cfa_offset 20
 8073              		@ sp needed
 8074 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 8075              	.LVL906:
 8076              	.L844:
 8077              		.cfi_restore_state
3296:source\fatfs/ff.c **** 					}
 8078              		.loc 1 3296 7 is_stmt 1 view .LVU2964
3296:source\fatfs/ff.c **** 					}
 8079              		.loc 1 3296 18 is_stmt 0 view .LVU2965
 8080 009a C5F81C02 		str	r0, [r5, #540]
 8081              	.LVL907:
3302:source\fatfs/ff.c **** 	}
 8082              		.loc 1 3302 3 is_stmt 1 view .LVU2966
3304:source\fatfs/ff.c **** 
 8083              		.loc 1 3304 2 view .LVU2967
 8084 009e F9E7     		b	.L838
 8085              	.LVL908:
 8086              	.L840:
3302:source\fatfs/ff.c **** 	}
 8087              		.loc 1 3302 3 view .LVU2968
3302:source\fatfs/ff.c **** 	}
 8088              		.loc 1 3302 6 is_stmt 0 view .LVU2969
 8089 00a0 042C     		cmp	r4, #4
 8090 00a2 D9D1     		bne	.L839
 8091 00a4 D7E7     		b	.L846
 8092              	.LVL909:
 8093              	.L849:
3294:source\fatfs/ff.c **** 					} else {
 8094              		.loc 1 3294 12 view .LVU2970
 8095 00a6 1224     		movs	r4, #18
 8096 00a8 D6E7     		b	.L839
 8097              	.LVL910:
 8098              	.L847:
3270:source\fatfs/ff.c **** 
 8099              		.loc 1 3270 18 view .LVU2971
 8100 00aa 0924     		movs	r4, #9
 8101 00ac F2E7     		b	.L838
 8102              	.LVL911:
 8103              	.L848:
3276:source\fatfs/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 8104              		.loc 1 3276 3 view .LVU2972
 8105 00ae 1124     		movs	r4, #17
 8106 00b0 F0E7     		b	.L838
 8107              		.cfi_endproc
 8108              	.LFE169:
 8110              		.section	.text.f_closedir,"ax",%progbits
 8111              		.align	1
 8112              		.global	f_closedir
 8113              		.syntax unified
 8114              		.thumb
 8115              		.thumb_func
 8117              	f_closedir:
 8118              	.LVL912:
 8119              	.LFB170:
3319:source\fatfs/ff.c **** 	FRESULT res;
 8120              		.loc 1 3319 1 is_stmt 1 view -0
 8121              		.cfi_startproc
 8122              		@ args = 0, pretend = 0, frame = 0
 8123              		@ frame_needed = 0, uses_anonymous_args = 0
3320:source\fatfs/ff.c **** 
 8124              		.loc 1 3320 2 view .LVU2974
3323:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8125              		.loc 1 3323 2 view .LVU2975
3319:source\fatfs/ff.c **** 	FRESULT res;
 8126              		.loc 1 3319 1 is_stmt 0 view .LVU2976
 8127 0000 38B5     		push	{r3, r4, r5, lr}
 8128              		.cfi_def_cfa_offset 16
 8129              		.cfi_offset 3, -16
 8130              		.cfi_offset 4, -12
 8131              		.cfi_offset 5, -8
 8132              		.cfi_offset 14, -4
3319:source\fatfs/ff.c **** 	FRESULT res;
 8133              		.loc 1 3319 1 view .LVU2977
 8134 0002 0546     		mov	r5, r0
3323:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8135              		.loc 1 3323 8 view .LVU2978
 8136 0004 FFF7FEFF 		bl	validate
 8137              	.LVL913:
3324:source\fatfs/ff.c **** #if _FS_REENTRANT
 8138              		.loc 1 3324 2 is_stmt 1 view .LVU2979
3324:source\fatfs/ff.c **** #if _FS_REENTRANT
 8139              		.loc 1 3324 5 is_stmt 0 view .LVU2980
 8140 0008 0446     		mov	r4, r0
 8141 000a 28B9     		cbnz	r0, .L861
3329:source\fatfs/ff.c **** 			res = dec_lock(dp->lockid);
 8142              		.loc 1 3329 3 is_stmt 1 view .LVU2981
3329:source\fatfs/ff.c **** 			res = dec_lock(dp->lockid);
 8143              		.loc 1 3329 9 is_stmt 0 view .LVU2982
 8144 000c D5F81C02 		ldr	r0, [r5, #540]
 8145              	.LVL914:
3329:source\fatfs/ff.c **** 			res = dec_lock(dp->lockid);
 8146              		.loc 1 3329 6 view .LVU2983
 8147 0010 20B9     		cbnz	r0, .L862
 8148              	.LVL915:
 8149              	.L863:
3333:source\fatfs/ff.c **** #if _FS_REENTRANT
 8150              		.loc 1 3333 4 is_stmt 1 view .LVU2984
3333:source\fatfs/ff.c **** #if _FS_REENTRANT
 8151              		.loc 1 3333 11 is_stmt 0 view .LVU2985
 8152 0012 0023     		movs	r3, #0
 8153 0014 C5F80032 		str	r3, [r5, #512]
 8154              	.L861:
 8155              	.LVL916:
3338:source\fatfs/ff.c **** }
 8156              		.loc 1 3338 2 is_stmt 1 view .LVU2986
3339:source\fatfs/ff.c **** 
 8157              		.loc 1 3339 1 is_stmt 0 view .LVU2987
 8158 0018 2046     		mov	r0, r4
 8159 001a 38BD     		pop	{r3, r4, r5, pc}
 8160              	.LVL917:
 8161              	.L862:
3330:source\fatfs/ff.c **** 		if (res == FR_OK)
 8162              		.loc 1 3330 4 is_stmt 1 view .LVU2988
3330:source\fatfs/ff.c **** 		if (res == FR_OK)
 8163              		.loc 1 3330 10 is_stmt 0 view .LVU2989
 8164 001c FFF7FEFF 		bl	dec_lock
 8165              	.LVL918:
3331:source\fatfs/ff.c **** #endif
 8166              		.loc 1 3331 3 is_stmt 1 view .LVU2990
3331:source\fatfs/ff.c **** #endif
 8167              		.loc 1 3331 6 is_stmt 0 view .LVU2991
 8168 0020 0028     		cmp	r0, #0
 8169 0022 F6D0     		beq	.L863
 8170 0024 0446     		mov	r4, r0
 8171 0026 F7E7     		b	.L861
 8172              		.cfi_endproc
 8173              	.LFE170:
 8175              		.section	.text.f_readdir,"ax",%progbits
 8176              		.align	1
 8177              		.global	f_readdir
 8178              		.syntax unified
 8179              		.thumb
 8180              		.thumb_func
 8182              	f_readdir:
 8183              	.LVL919:
 8184              	.LFB171:
3352:source\fatfs/ff.c **** 	FRESULT res;
 8185              		.loc 1 3352 1 is_stmt 1 view -0
 8186              		.cfi_startproc
 8187              		@ args = 0, pretend = 0, frame = 16
 8188              		@ frame_needed = 0, uses_anonymous_args = 0
3353:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 8189              		.loc 1 3353 2 view .LVU2993
3354:source\fatfs/ff.c **** 
 8190              		.loc 1 3354 2 view .LVU2994
3354:source\fatfs/ff.c **** 
 8191              		.loc 1 3354 2 view .LVU2995
3357:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8192              		.loc 1 3357 2 view .LVU2996
3352:source\fatfs/ff.c **** 	FRESULT res;
 8193              		.loc 1 3352 1 is_stmt 0 view .LVU2997
 8194 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8195              		.cfi_def_cfa_offset 40
 8196              		.cfi_offset 4, -24
 8197              		.cfi_offset 5, -20
 8198              		.cfi_offset 6, -16
 8199              		.cfi_offset 7, -12
 8200              		.cfi_offset 8, -8
 8201              		.cfi_offset 14, -4
3352:source\fatfs/ff.c **** 	FRESULT res;
 8202              		.loc 1 3352 1 view .LVU2998
 8203 0004 0546     		mov	r5, r0
 8204 0006 8846     		mov	r8, r1
3357:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8205              		.loc 1 3357 8 view .LVU2999
 8206 0008 FFF7FEFF 		bl	validate
 8207              	.LVL920:
3358:source\fatfs/ff.c **** 		if (!fno) {
 8208              		.loc 1 3358 2 is_stmt 1 view .LVU3000
3358:source\fatfs/ff.c **** 		if (!fno) {
 8209              		.loc 1 3358 5 is_stmt 0 view .LVU3001
 8210 000c 0646     		mov	r6, r0
 8211 000e 88BB     		cbnz	r0, .L868
3359:source\fatfs/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8212              		.loc 1 3359 3 is_stmt 1 view .LVU3002
3359:source\fatfs/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8213              		.loc 1 3359 6 is_stmt 0 view .LVU3003
 8214 0010 B8F1000F 		cmp	r8, #0
 8215 0014 06D1     		bne	.L869
3360:source\fatfs/ff.c **** 		} else {
 8216              		.loc 1 3360 4 is_stmt 1 view .LVU3004
3360:source\fatfs/ff.c **** 		} else {
 8217              		.loc 1 3360 10 is_stmt 0 view .LVU3005
 8218 0016 4146     		mov	r1, r8
 8219 0018 2846     		mov	r0, r5
 8220              	.LVL921:
3381:source\fatfs/ff.c **** 
 8221              		.loc 1 3381 1 view .LVU3006
 8222 001a 04B0     		add	sp, sp, #16
 8223              		.cfi_remember_state
 8224              		.cfi_def_cfa_offset 24
 8225              		@ sp needed
 8226 001c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 8227              		.cfi_restore 14
 8228              		.cfi_restore 8
 8229              		.cfi_restore 7
 8230              		.cfi_restore 6
 8231              		.cfi_restore 5
 8232              		.cfi_restore 4
 8233              		.cfi_def_cfa_offset 0
 8234              	.LVL922:
3360:source\fatfs/ff.c **** 		} else {
 8235              		.loc 1 3360 10 view .LVU3007
 8236 0020 FFF7FEBF 		b	dir_sdi
 8237              	.LVL923:
 8238              	.L869:
 8239              		.cfi_restore_state
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8240              		.loc 1 3362 4 is_stmt 1 view .LVU3008
 8241 0024 4FF40070 		mov	r0, #512
 8242              	.LVL924:
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8243              		.loc 1 3362 4 is_stmt 0 view .LVU3009
 8244 0028 FFF7FEFF 		bl	ff_memalloc
 8245              	.LVL925:
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8246              		.loc 1 3362 4 is_stmt 1 view .LVU3010
 8247 002c 0746     		mov	r7, r0
 8248 002e 28B3     		cbz	r0, .L873
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8249              		.loc 1 3362 4 discriminator 2 view .LVU3011
 8250 0030 01AB     		add	r3, sp, #4
 8251 0032 C5F82002 		str	r0, [r5, #544]
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8252              		.loc 1 3362 4 discriminator 2 view .LVU3012
 8253 0036 C5F81832 		str	r3, [r5, #536]
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8254              		.loc 1 3362 17 discriminator 2 view .LVU3013
3363:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8255              		.loc 1 3363 4 discriminator 2 view .LVU3014
3363:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8256              		.loc 1 3363 10 is_stmt 0 discriminator 2 view .LVU3015
 8257 003a 2846     		mov	r0, r5
 8258              	.LVL926:
3363:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8259              		.loc 1 3363 10 discriminator 2 view .LVU3016
 8260 003c FFF7FEFF 		bl	dir_read.constprop.0
 8261              	.LVL927:
3364:source\fatfs/ff.c **** 				dp->sect = 0;
 8262              		.loc 1 3364 7 discriminator 2 view .LVU3017
 8263 0040 0428     		cmp	r0, #4
3363:source\fatfs/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8264              		.loc 1 3363 10 discriminator 2 view .LVU3018
 8265 0042 0446     		mov	r4, r0
 8266              	.LVL928:
3364:source\fatfs/ff.c **** 				dp->sect = 0;
 8267              		.loc 1 3364 4 is_stmt 1 discriminator 2 view .LVU3019
3364:source\fatfs/ff.c **** 				dp->sect = 0;
 8268              		.loc 1 3364 7 is_stmt 0 discriminator 2 view .LVU3020
 8269 0044 10D1     		bne	.L870
3365:source\fatfs/ff.c **** 				res = FR_OK;
 8270              		.loc 1 3365 5 is_stmt 1 view .LVU3021
3365:source\fatfs/ff.c **** 				res = FR_OK;
 8271              		.loc 1 3365 14 is_stmt 0 view .LVU3022
 8272 0046 C5F81062 		str	r6, [r5, #528]
3366:source\fatfs/ff.c **** 			}
 8273              		.loc 1 3366 5 is_stmt 1 view .LVU3023
 8274              	.LVL929:
3368:source\fatfs/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 8275              		.loc 1 3368 4 view .LVU3024
 8276              	.L871:
3369:source\fatfs/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
 8277              		.loc 1 3369 5 view .LVU3025
 8278 004a 4146     		mov	r1, r8
 8279 004c 2846     		mov	r0, r5
 8280 004e FFF7FEFF 		bl	get_fileinfo
 8281              	.LVL930:
3370:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) {
 8282              		.loc 1 3370 5 view .LVU3026
3370:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) {
 8283              		.loc 1 3370 11 is_stmt 0 view .LVU3027
 8284 0052 0021     		movs	r1, #0
 8285 0054 2846     		mov	r0, r5
 8286 0056 FFF7FEFF 		bl	dir_next
 8287              	.LVL931:
3371:source\fatfs/ff.c **** 					dp->sect = 0;
 8288              		.loc 1 3371 8 view .LVU3028
 8289 005a 0428     		cmp	r0, #4
3370:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) {
 8290              		.loc 1 3370 11 view .LVU3029
 8291 005c 0446     		mov	r4, r0
 8292              	.LVL932:
3371:source\fatfs/ff.c **** 					dp->sect = 0;
 8293              		.loc 1 3371 5 is_stmt 1 view .LVU3030
3372:source\fatfs/ff.c **** 					res = FR_OK;
 8294              		.loc 1 3372 6 view .LVU3031
3372:source\fatfs/ff.c **** 					res = FR_OK;
 8295              		.loc 1 3372 15 is_stmt 0 view .LVU3032
 8296 005e 04BF     		itt	eq
 8297 0060 0024     		moveq	r4, #0
 8298 0062 C5F81042 		streq	r4, [r5, #528]
3373:source\fatfs/ff.c **** 				}
 8299              		.loc 1 3373 6 is_stmt 1 view .LVU3033
 8300              	.LVL933:
3373:source\fatfs/ff.c **** 				}
 8301              		.loc 1 3373 6 is_stmt 0 view .LVU3034
 8302 0066 01E0     		b	.L872
 8303              	.LVL934:
 8304              	.L870:
3368:source\fatfs/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 8305              		.loc 1 3368 4 is_stmt 1 view .LVU3035
3368:source\fatfs/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 8306              		.loc 1 3368 7 is_stmt 0 view .LVU3036
 8307 0068 0028     		cmp	r0, #0
 8308 006a EED0     		beq	.L871
 8309              	.LVL935:
 8310              	.L872:
3376:source\fatfs/ff.c **** 		}
 8311              		.loc 1 3376 4 is_stmt 1 view .LVU3037
 8312 006c 3846     		mov	r0, r7
 8313 006e FFF7FEFF 		bl	ff_memfree
 8314              	.LVL936:
 8315 0072 2646     		mov	r6, r4
 8316              	.LVL937:
 8317              	.L868:
3381:source\fatfs/ff.c **** 
 8318              		.loc 1 3381 1 is_stmt 0 view .LVU3038
 8319 0074 3046     		mov	r0, r6
 8320 0076 04B0     		add	sp, sp, #16
 8321              		.cfi_remember_state
 8322              		.cfi_def_cfa_offset 24
 8323              		@ sp needed
 8324 0078 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8325              	.LVL938:
 8326              	.L873:
 8327              		.cfi_restore_state
3362:source\fatfs/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 8328              		.loc 1 3362 4 view .LVU3039
 8329 007c 1126     		movs	r6, #17
 8330 007e F9E7     		b	.L868
 8331              		.cfi_endproc
 8332              	.LFE171:
 8334              		.section	.text.f_stat,"ax",%progbits
 8335              		.align	1
 8336              		.global	f_stat
 8337              		.syntax unified
 8338              		.thumb
 8339              		.thumb_func
 8341              	f_stat:
 8342              	.LVL939:
 8343              	.LFB172:
3446:source\fatfs/ff.c **** 	FRESULT res;
 8344              		.loc 1 3446 1 is_stmt 1 view -0
 8345              		.cfi_startproc
 8346              		@ args = 0, pretend = 0, frame = 576
 8347              		@ frame_needed = 0, uses_anonymous_args = 0
3447:source\fatfs/ff.c **** 	DIR dj;
 8348              		.loc 1 3447 2 view .LVU3041
3448:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 8349              		.loc 1 3448 2 view .LVU3042
3449:source\fatfs/ff.c **** 
 8350              		.loc 1 3449 2 view .LVU3043
3449:source\fatfs/ff.c **** 
 8351              		.loc 1 3449 2 view .LVU3044
3453:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8352              		.loc 1 3453 2 view .LVU3045
3446:source\fatfs/ff.c **** 	FRESULT res;
 8353              		.loc 1 3446 1 is_stmt 0 view .LVU3046
 8354 0000 70B5     		push	{r4, r5, r6, lr}
 8355              		.cfi_def_cfa_offset 16
 8356              		.cfi_offset 4, -16
 8357              		.cfi_offset 5, -12
 8358              		.cfi_offset 6, -8
 8359              		.cfi_offset 14, -4
 8360 0002 ADF5107D 		sub	sp, sp, #576
 8361              		.cfi_def_cfa_offset 592
3446:source\fatfs/ff.c **** 	FRESULT res;
 8362              		.loc 1 3446 1 view .LVU3047
 8363 0006 0E46     		mov	r6, r1
 8364 0008 0190     		str	r0, [sp, #4]
3453:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8365              		.loc 1 3453 8 view .LVU3048
 8366 000a 0022     		movs	r2, #0
 8367 000c 01A9     		add	r1, sp, #4
 8368              	.LVL940:
3453:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8369              		.loc 1 3453 8 view .LVU3049
 8370 000e 86A8     		add	r0, sp, #536
 8371              	.LVL941:
3453:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8372              		.loc 1 3453 8 view .LVU3050
 8373 0010 FFF7FEFF 		bl	find_volume
 8374              	.LVL942:
3454:source\fatfs/ff.c **** 		INIT_BUF(dj);
 8375              		.loc 1 3454 2 is_stmt 1 view .LVU3051
3454:source\fatfs/ff.c **** 		INIT_BUF(dj);
 8376              		.loc 1 3454 5 is_stmt 0 view .LVU3052
 8377 0014 0446     		mov	r4, r0
 8378 0016 C0B9     		cbnz	r0, .L875
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8379              		.loc 1 3455 3 is_stmt 1 view .LVU3053
 8380 0018 4FF40070 		mov	r0, #512
 8381              	.LVL943:
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8382              		.loc 1 3455 3 is_stmt 0 view .LVU3054
 8383 001c FFF7FEFF 		bl	ff_memalloc
 8384              	.LVL944:
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8385              		.loc 1 3455 3 is_stmt 1 view .LVU3055
 8386 0020 0546     		mov	r5, r0
 8387 0022 C0B1     		cbz	r0, .L879
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8388              		.loc 1 3455 3 discriminator 2 view .LVU3056
 8389 0024 8E90     		str	r0, [sp, #568]
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8390              		.loc 1 3455 3 discriminator 2 view .LVU3057
 8391 0026 03AB     		add	r3, sp, #12
3456:source\fatfs/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 8392              		.loc 1 3456 9 is_stmt 0 discriminator 2 view .LVU3058
 8393 0028 0199     		ldr	r1, [sp, #4]
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8394              		.loc 1 3455 3 discriminator 2 view .LVU3059
 8395 002a 8C93     		str	r3, [sp, #560]
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8396              		.loc 1 3455 15 is_stmt 1 discriminator 2 view .LVU3060
3456:source\fatfs/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 8397              		.loc 1 3456 3 discriminator 2 view .LVU3061
3456:source\fatfs/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 8398              		.loc 1 3456 9 is_stmt 0 discriminator 2 view .LVU3062
 8399 002c 06A8     		add	r0, sp, #24
 8400              	.LVL945:
3456:source\fatfs/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 8401              		.loc 1 3456 9 discriminator 2 view .LVU3063
 8402 002e FFF7FEFF 		bl	follow_path
 8403              	.LVL946:
3457:source\fatfs/ff.c **** 			if (dj.dir) {		/* Found an object */
 8404              		.loc 1 3457 3 is_stmt 1 discriminator 2 view .LVU3064
3457:source\fatfs/ff.c **** 			if (dj.dir) {		/* Found an object */
 8405              		.loc 1 3457 6 is_stmt 0 discriminator 2 view .LVU3065
 8406 0032 0446     		mov	r4, r0
 8407 0034 30B9     		cbnz	r0, .L876
3458:source\fatfs/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
 8408              		.loc 1 3458 4 is_stmt 1 view .LVU3066
3458:source\fatfs/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
 8409              		.loc 1 3458 7 is_stmt 0 view .LVU3067
 8410 0036 8B9B     		ldr	r3, [sp, #556]
 8411 0038 5BB1     		cbz	r3, .L880
3459:source\fatfs/ff.c **** 			} else {			/* It is root directory */
 8412              		.loc 1 3459 5 is_stmt 1 view .LVU3068
3459:source\fatfs/ff.c **** 			} else {			/* It is root directory */
 8413              		.loc 1 3459 8 is_stmt 0 view .LVU3069
 8414 003a 1EB1     		cbz	r6, .L876
3459:source\fatfs/ff.c **** 			} else {			/* It is root directory */
 8415              		.loc 1 3459 14 is_stmt 1 discriminator 1 view .LVU3070
 8416 003c 3146     		mov	r1, r6
 8417 003e 06A8     		add	r0, sp, #24
 8418              	.LVL947:
3459:source\fatfs/ff.c **** 			} else {			/* It is root directory */
 8419              		.loc 1 3459 14 is_stmt 0 discriminator 1 view .LVU3071
 8420 0040 FFF7FEFF 		bl	get_fileinfo
 8421              	.LVL948:
 8422              	.L876:
3464:source\fatfs/ff.c **** 	}
 8423              		.loc 1 3464 3 is_stmt 1 view .LVU3072
 8424 0044 2846     		mov	r0, r5
 8425 0046 FFF7FEFF 		bl	ff_memfree
 8426              	.LVL949:
 8427              	.L875:
3468:source\fatfs/ff.c **** 
 8428              		.loc 1 3468 1 is_stmt 0 view .LVU3073
 8429 004a 2046     		mov	r0, r4
 8430 004c 0DF5107D 		add	sp, sp, #576
 8431              		.cfi_remember_state
 8432              		.cfi_def_cfa_offset 16
 8433              		@ sp needed
 8434 0050 70BD     		pop	{r4, r5, r6, pc}
 8435              	.LVL950:
 8436              	.L880:
 8437              		.cfi_restore_state
3461:source\fatfs/ff.c **** 			}
 8438              		.loc 1 3461 9 view .LVU3074
 8439 0052 0624     		movs	r4, #6
 8440 0054 F6E7     		b	.L876
 8441              	.LVL951:
 8442              	.L879:
3455:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8443              		.loc 1 3455 3 view .LVU3075
 8444 0056 1124     		movs	r4, #17
 8445 0058 F7E7     		b	.L875
 8446              		.cfi_endproc
 8447              	.LFE172:
 8449              		.section	.text.f_getfree,"ax",%progbits
 8450              		.align	1
 8451              		.global	f_getfree
 8452              		.syntax unified
 8453              		.thumb
 8454              		.thumb_func
 8456              	f_getfree:
 8457              	.LVL952:
 8458              	.LFB173:
3482:source\fatfs/ff.c **** 	FRESULT res;
 8459              		.loc 1 3482 1 is_stmt 1 view -0
 8460              		.cfi_startproc
 8461              		@ args = 0, pretend = 0, frame = 8
 8462              		@ frame_needed = 0, uses_anonymous_args = 0
3483:source\fatfs/ff.c **** 	FATFS *fs;
 8463              		.loc 1 3483 2 view .LVU3077
3484:source\fatfs/ff.c **** 	DWORD n, clst, sect, stat;
 8464              		.loc 1 3484 2 view .LVU3078
3485:source\fatfs/ff.c **** 	UINT i;
 8465              		.loc 1 3485 2 view .LVU3079
3486:source\fatfs/ff.c **** 	BYTE fat, *p;
 8466              		.loc 1 3486 2 view .LVU3080
3487:source\fatfs/ff.c **** 
 8467              		.loc 1 3487 2 view .LVU3081
3491:source\fatfs/ff.c **** 	fs = *fatfs;
 8468              		.loc 1 3491 2 view .LVU3082
3482:source\fatfs/ff.c **** 	FRESULT res;
 8469              		.loc 1 3482 1 is_stmt 0 view .LVU3083
 8470 0000 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 8471              		.cfi_def_cfa_offset 40
 8472              		.cfi_offset 4, -32
 8473              		.cfi_offset 5, -28
 8474              		.cfi_offset 6, -24
 8475              		.cfi_offset 7, -20
 8476              		.cfi_offset 8, -16
 8477              		.cfi_offset 9, -12
 8478              		.cfi_offset 10, -8
 8479              		.cfi_offset 14, -4
3482:source\fatfs/ff.c **** 	FRESULT res;
 8480              		.loc 1 3482 1 view .LVU3084
 8481 0004 1546     		mov	r5, r2
 8482 0006 0190     		str	r0, [sp, #4]
 8483 0008 0F46     		mov	r7, r1
3491:source\fatfs/ff.c **** 	fs = *fatfs;
 8484              		.loc 1 3491 8 view .LVU3085
 8485 000a 0022     		movs	r2, #0
 8486              	.LVL953:
3491:source\fatfs/ff.c **** 	fs = *fatfs;
 8487              		.loc 1 3491 8 view .LVU3086
 8488 000c 01A9     		add	r1, sp, #4
 8489              	.LVL954:
3491:source\fatfs/ff.c **** 	fs = *fatfs;
 8490              		.loc 1 3491 8 view .LVU3087
 8491 000e 2846     		mov	r0, r5
 8492              	.LVL955:
3491:source\fatfs/ff.c **** 	fs = *fatfs;
 8493              		.loc 1 3491 8 view .LVU3088
 8494 0010 FFF7FEFF 		bl	find_volume
 8495              	.LVL956:
3492:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8496              		.loc 1 3492 2 is_stmt 1 view .LVU3089
3493:source\fatfs/ff.c **** 		/* If free_clust is valid, return it without full cluster scan */
 8497              		.loc 1 3493 2 view .LVU3090
3493:source\fatfs/ff.c **** 		/* If free_clust is valid, return it without full cluster scan */
 8498              		.loc 1 3493 5 is_stmt 0 view .LVU3091
 8499 0014 0446     		mov	r4, r0
 8500 0016 38B9     		cbnz	r0, .L882
3492:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8501              		.loc 1 3492 5 view .LVU3092
 8502 0018 2D68     		ldr	r5, [r5]
 8503              	.LVL957:
3495:source\fatfs/ff.c **** 			*nclst = fs->free_clust;
 8504              		.loc 1 3495 3 is_stmt 1 view .LVU3093
3495:source\fatfs/ff.c **** 			*nclst = fs->free_clust;
 8505              		.loc 1 3495 27 is_stmt 0 view .LVU3094
 8506 001a D5E98438 		ldrd	r3, r8, [r5, #528]
3495:source\fatfs/ff.c **** 			*nclst = fs->free_clust;
 8507              		.loc 1 3495 38 view .LVU3095
 8508 001e A8F10202 		sub	r2, r8, #2
3495:source\fatfs/ff.c **** 			*nclst = fs->free_clust;
 8509              		.loc 1 3495 6 view .LVU3096
 8510 0022 9342     		cmp	r3, r2
 8511 0024 04D8     		bhi	.L883
3496:source\fatfs/ff.c **** 		} else {
 8512              		.loc 1 3496 4 is_stmt 1 view .LVU3097
3496:source\fatfs/ff.c **** 		} else {
 8513              		.loc 1 3496 11 is_stmt 0 view .LVU3098
 8514 0026 3B60     		str	r3, [r7]
 8515              	.LVL958:
 8516              	.L882:
3534:source\fatfs/ff.c **** }
 8517              		.loc 1 3534 2 is_stmt 1 view .LVU3099
3535:source\fatfs/ff.c **** 
 8518              		.loc 1 3535 1 is_stmt 0 view .LVU3100
 8519 0028 2046     		mov	r0, r4
 8520 002a 02B0     		add	sp, sp, #8
 8521              		.cfi_remember_state
 8522              		.cfi_def_cfa_offset 32
 8523              		@ sp needed
 8524 002c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 8525              	.LVL959:
 8526              	.L883:
 8527              		.cfi_restore_state
3499:source\fatfs/ff.c **** 			n = 0;
 8528              		.loc 1 3499 4 is_stmt 1 view .LVU3101
3499:source\fatfs/ff.c **** 			n = 0;
 8529              		.loc 1 3499 8 is_stmt 0 view .LVU3102
 8530 0030 95F80092 		ldrb	r9, [r5, #512]	@ zero_extendqisi2
 8531              	.LVL960:
3500:source\fatfs/ff.c **** 			if (fat == FS_FAT12) {
 8532              		.loc 1 3500 4 is_stmt 1 view .LVU3103
3501:source\fatfs/ff.c **** 				clst = 2;
 8533              		.loc 1 3501 4 view .LVU3104
3501:source\fatfs/ff.c **** 				clst = 2;
 8534              		.loc 1 3501 7 is_stmt 0 view .LVU3105
 8535 0034 B9F1010F 		cmp	r9, #1
 8536 0038 1CD1     		bne	.L884
3502:source\fatfs/ff.c **** 				do {
 8537              		.loc 1 3502 10 view .LVU3106
 8538 003a 4FF00208 		mov	r8, #2
3500:source\fatfs/ff.c **** 			if (fat == FS_FAT12) {
 8539              		.loc 1 3500 6 view .LVU3107
 8540 003e 0646     		mov	r6, r0
 8541              	.LVL961:
 8542              	.L887:
3503:source\fatfs/ff.c **** 					stat = get_fat(fs, clst);
 8543              		.loc 1 3503 5 is_stmt 1 view .LVU3108
3504:source\fatfs/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8544              		.loc 1 3504 6 view .LVU3109
3504:source\fatfs/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8545              		.loc 1 3504 13 is_stmt 0 view .LVU3110
 8546 0040 4146     		mov	r1, r8
 8547 0042 2846     		mov	r0, r5
 8548 0044 FFF7FEFF 		bl	get_fat
 8549              	.LVL962:
3505:source\fatfs/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 8550              		.loc 1 3505 6 is_stmt 1 view .LVU3111
3505:source\fatfs/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 8551              		.loc 1 3505 9 is_stmt 0 view .LVU3112
 8552 0048 431C     		adds	r3, r0, #1
 8553 004a 37D0     		beq	.L894
3506:source\fatfs/ff.c **** 					if (stat == 0) n++;
 8554              		.loc 1 3506 6 is_stmt 1 view .LVU3113
3506:source\fatfs/ff.c **** 					if (stat == 0) n++;
 8555              		.loc 1 3506 9 is_stmt 0 view .LVU3114
 8556 004c 0128     		cmp	r0, #1
 8557 004e 37D0     		beq	.L895
3507:source\fatfs/ff.c **** 				} while (++clst < fs->n_fatent);
 8558              		.loc 1 3507 6 is_stmt 1 view .LVU3115
3507:source\fatfs/ff.c **** 				} while (++clst < fs->n_fatent);
 8559              		.loc 1 3507 9 is_stmt 0 view .LVU3116
 8560 0050 00B9     		cbnz	r0, .L886
3507:source\fatfs/ff.c **** 				} while (++clst < fs->n_fatent);
 8561              		.loc 1 3507 21 is_stmt 1 discriminator 1 view .LVU3117
3507:source\fatfs/ff.c **** 				} while (++clst < fs->n_fatent);
 8562              		.loc 1 3507 22 is_stmt 0 discriminator 1 view .LVU3118
 8563 0052 0136     		adds	r6, r6, #1
 8564              	.LVL963:
 8565              	.L886:
3508:source\fatfs/ff.c **** 			} else {
 8566              		.loc 1 3508 21 is_stmt 1 view .LVU3119
 8567 0054 D5F81432 		ldr	r3, [r5, #532]
 8568 0058 08F10108 		add	r8, r8, #1
 8569              	.LVL964:
3508:source\fatfs/ff.c **** 			} else {
 8570              		.loc 1 3508 21 is_stmt 0 view .LVU3120
 8571 005c 4345     		cmp	r3, r8
 8572 005e EFD8     		bhi	.L887
 8573              	.LVL965:
 8574              	.L885:
3529:source\fatfs/ff.c **** 			fs->fsi_flag |= 1;
 8575              		.loc 1 3529 4 is_stmt 1 view .LVU3121
3530:source\fatfs/ff.c **** 			*nclst = n;
 8576              		.loc 1 3530 17 is_stmt 0 view .LVU3122
 8577 0060 95F80532 		ldrb	r3, [r5, #517]	@ zero_extendqisi2
3529:source\fatfs/ff.c **** 			fs->fsi_flag |= 1;
 8578              		.loc 1 3529 19 view .LVU3123
 8579 0064 C5F81062 		str	r6, [r5, #528]
3530:source\fatfs/ff.c **** 			*nclst = n;
 8580              		.loc 1 3530 4 is_stmt 1 view .LVU3124
3530:source\fatfs/ff.c **** 			*nclst = n;
 8581              		.loc 1 3530 17 is_stmt 0 view .LVU3125
 8582 0068 43F00103 		orr	r3, r3, #1
 8583 006c 85F80532 		strb	r3, [r5, #517]
3531:source\fatfs/ff.c **** 		}
 8584              		.loc 1 3531 4 is_stmt 1 view .LVU3126
3531:source\fatfs/ff.c **** 		}
 8585              		.loc 1 3531 11 is_stmt 0 view .LVU3127
 8586 0070 3E60     		str	r6, [r7]
 8587 0072 D9E7     		b	.L882
 8588              	.LVL966:
 8589              	.L884:
3510:source\fatfs/ff.c **** 				sect = fs->fatbase;
 8590              		.loc 1 3510 5 is_stmt 1 view .LVU3128
3511:source\fatfs/ff.c **** 				i = 0; p = 0;
 8591              		.loc 1 3511 5 view .LVU3129
3511:source\fatfs/ff.c **** 				i = 0; p = 0;
 8592              		.loc 1 3511 10 is_stmt 0 view .LVU3130
 8593 0074 D5F82012 		ldr	r1, [r5, #544]
 8594              	.LVL967:
3512:source\fatfs/ff.c **** 				do {
 8595              		.loc 1 3512 5 is_stmt 1 view .LVU3131
3512:source\fatfs/ff.c **** 				do {
 8596              		.loc 1 3512 12 view .LVU3132
3512:source\fatfs/ff.c **** 				do {
 8597              		.loc 1 3512 14 is_stmt 0 view .LVU3133
 8598 0078 0346     		mov	r3, r0
3512:source\fatfs/ff.c **** 				do {
 8599              		.loc 1 3512 7 view .LVU3134
 8600 007a 0246     		mov	r2, r0
3500:source\fatfs/ff.c **** 			if (fat == FS_FAT12) {
 8601              		.loc 1 3500 6 view .LVU3135
 8602 007c 0646     		mov	r6, r0
 8603              	.LVL968:
 8604              	.L893:
3513:source\fatfs/ff.c **** 					if (!i) {
 8605              		.loc 1 3513 5 is_stmt 1 view .LVU3136
3514:source\fatfs/ff.c **** 						res = move_window(fs, sect++);
 8606              		.loc 1 3514 6 view .LVU3137
3514:source\fatfs/ff.c **** 						res = move_window(fs, sect++);
 8607              		.loc 1 3514 9 is_stmt 0 view .LVU3138
 8608 007e 4AB9     		cbnz	r2, .L888
 8609              	.LVL969:
3515:source\fatfs/ff.c **** 						if (res != FR_OK) break;
 8610              		.loc 1 3515 7 is_stmt 1 view .LVU3139
3515:source\fatfs/ff.c **** 						if (res != FR_OK) break;
 8611              		.loc 1 3515 13 is_stmt 0 view .LVU3140
 8612 0080 2846     		mov	r0, r5
 8613 0082 01F1010A 		add	r10, r1, #1
 8614              	.LVL970:
3515:source\fatfs/ff.c **** 						if (res != FR_OK) break;
 8615              		.loc 1 3515 13 view .LVU3141
 8616 0086 FFF7FEFF 		bl	move_window
 8617              	.LVL971:
3516:source\fatfs/ff.c **** 						p = fs->win.d8;
 8618              		.loc 1 3516 7 is_stmt 1 view .LVU3142
3516:source\fatfs/ff.c **** 						p = fs->win.d8;
 8619              		.loc 1 3516 10 is_stmt 0 view .LVU3143
 8620 008a D8B9     		cbnz	r0, .L896
3517:source\fatfs/ff.c **** 						i = SS(fs);
 8621              		.loc 1 3517 7 is_stmt 1 view .LVU3144
 8622              	.LVL972:
3517:source\fatfs/ff.c **** 						i = SS(fs);
 8623              		.loc 1 3517 9 is_stmt 0 view .LVU3145
 8624 008c 2B46     		mov	r3, r5
3518:source\fatfs/ff.c **** 					}
 8625              		.loc 1 3518 7 is_stmt 1 view .LVU3146
 8626              	.LVL973:
3515:source\fatfs/ff.c **** 						if (res != FR_OK) break;
 8627              		.loc 1 3515 13 is_stmt 0 view .LVU3147
 8628 008e 5146     		mov	r1, r10
3518:source\fatfs/ff.c **** 					}
 8629              		.loc 1 3518 9 view .LVU3148
 8630 0090 4FF40072 		mov	r2, #512
 8631              	.LVL974:
 8632              	.L888:
3520:source\fatfs/ff.c **** 						if (LD_WORD(p) == 0) n++;
 8633              		.loc 1 3520 6 is_stmt 1 view .LVU3149
3520:source\fatfs/ff.c **** 						if (LD_WORD(p) == 0) n++;
 8634              		.loc 1 3520 9 is_stmt 0 view .LVU3150
 8635 0094 B9F1020F 		cmp	r9, #2
 8636 0098 08D1     		bne	.L889
3521:source\fatfs/ff.c **** 						p += 2; i -= 2;
 8637              		.loc 1 3521 7 is_stmt 1 view .LVU3151
3521:source\fatfs/ff.c **** 						p += 2; i -= 2;
 8638              		.loc 1 3521 10 is_stmt 0 view .LVU3152
 8639 009a 1888     		ldrh	r0, [r3]	@ unaligned
 8640 009c 00B9     		cbnz	r0, .L890
3521:source\fatfs/ff.c **** 						p += 2; i -= 2;
 8641              		.loc 1 3521 28 is_stmt 1 discriminator 1 view .LVU3153
3521:source\fatfs/ff.c **** 						p += 2; i -= 2;
 8642              		.loc 1 3521 29 is_stmt 0 discriminator 1 view .LVU3154
 8643 009e 0136     		adds	r6, r6, #1
 8644              	.LVL975:
 8645              	.L890:
3522:source\fatfs/ff.c **** 					} else {
 8646              		.loc 1 3522 7 is_stmt 1 view .LVU3155
3522:source\fatfs/ff.c **** 					} else {
 8647              		.loc 1 3522 9 is_stmt 0 view .LVU3156
 8648 00a0 0233     		adds	r3, r3, #2
 8649              	.LVL976:
3522:source\fatfs/ff.c **** 					} else {
 8650              		.loc 1 3522 15 is_stmt 1 view .LVU3157
3522:source\fatfs/ff.c **** 					} else {
 8651              		.loc 1 3522 17 is_stmt 0 view .LVU3158
 8652 00a2 023A     		subs	r2, r2, #2
 8653              	.LVL977:
 8654              	.L891:
3527:source\fatfs/ff.c **** 			}
 8655              		.loc 1 3527 14 is_stmt 1 view .LVU3159
3527:source\fatfs/ff.c **** 			}
 8656              		.loc 1 3527 14 is_stmt 0 view .LVU3160
 8657 00a4 B8F10108 		subs	r8, r8, #1
 8658              	.LVL978:
3527:source\fatfs/ff.c **** 			}
 8659              		.loc 1 3527 14 view .LVU3161
 8660 00a8 E9D1     		bne	.L893
3527:source\fatfs/ff.c **** 			}
 8661              		.loc 1 3527 14 view .LVU3162
 8662 00aa D9E7     		b	.L885
 8663              	.LVL979:
 8664              	.L889:
3524:source\fatfs/ff.c **** 						p += 4; i -= 4;
 8665              		.loc 1 3524 7 is_stmt 1 view .LVU3163
3524:source\fatfs/ff.c **** 						p += 4; i -= 4;
 8666              		.loc 1 3524 12 is_stmt 0 view .LVU3164
 8667 00ac 1868     		ldr	r0, [r3]	@ unaligned
3524:source\fatfs/ff.c **** 						p += 4; i -= 4;
 8668              		.loc 1 3524 10 view .LVU3165
 8669 00ae 30F07040 		bics	r0, r0, #-268435456
3524:source\fatfs/ff.c **** 						p += 4; i -= 4;
 8670              		.loc 1 3524 44 is_stmt 1 view .LVU3166
3524:source\fatfs/ff.c **** 						p += 4; i -= 4;
 8671              		.loc 1 3524 45 is_stmt 0 view .LVU3167
 8672 00b2 08BF     		it	eq
 8673 00b4 0136     		addeq	r6, r6, #1
 8674              	.LVL980:
3525:source\fatfs/ff.c **** 					}
 8675              		.loc 1 3525 7 is_stmt 1 view .LVU3168
3525:source\fatfs/ff.c **** 					}
 8676              		.loc 1 3525 9 is_stmt 0 view .LVU3169
 8677 00b6 0433     		adds	r3, r3, #4
 8678              	.LVL981:
3525:source\fatfs/ff.c **** 					}
 8679              		.loc 1 3525 15 is_stmt 1 view .LVU3170
3525:source\fatfs/ff.c **** 					}
 8680              		.loc 1 3525 17 is_stmt 0 view .LVU3171
 8681 00b8 043A     		subs	r2, r2, #4
 8682              	.LVL982:
3525:source\fatfs/ff.c **** 					}
 8683              		.loc 1 3525 17 view .LVU3172
 8684 00ba F3E7     		b	.L891
 8685              	.LVL983:
 8686              	.L894:
3505:source\fatfs/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 8687              		.loc 1 3505 36 view .LVU3173
 8688 00bc 0124     		movs	r4, #1
 8689 00be CFE7     		b	.L885
 8690              	.L895:
3506:source\fatfs/ff.c **** 					if (stat == 0) n++;
 8691              		.loc 1 3506 27 view .LVU3174
 8692 00c0 0224     		movs	r4, #2
 8693 00c2 CDE7     		b	.L885
 8694              	.LVL984:
 8695              	.L896:
3515:source\fatfs/ff.c **** 						if (res != FR_OK) break;
 8696              		.loc 1 3515 13 view .LVU3175
 8697 00c4 0446     		mov	r4, r0
 8698 00c6 CBE7     		b	.L885
 8699              		.cfi_endproc
 8700              	.LFE173:
 8702              		.section	.text.f_truncate,"ax",%progbits
 8703              		.align	1
 8704              		.global	f_truncate
 8705              		.syntax unified
 8706              		.thumb
 8707              		.thumb_func
 8709              	f_truncate:
 8710              	.LVL985:
 8711              	.LFB174:
3547:source\fatfs/ff.c **** 	FRESULT res;
 8712              		.loc 1 3547 1 is_stmt 1 view -0
 8713              		.cfi_startproc
 8714              		@ args = 0, pretend = 0, frame = 0
 8715              		@ frame_needed = 0, uses_anonymous_args = 0
3548:source\fatfs/ff.c **** 	DWORD ncl;
 8716              		.loc 1 3548 2 view .LVU3177
3549:source\fatfs/ff.c **** 
 8717              		.loc 1 3549 2 view .LVU3178
3552:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8718              		.loc 1 3552 2 view .LVU3179
3547:source\fatfs/ff.c **** 	FRESULT res;
 8719              		.loc 1 3547 1 is_stmt 0 view .LVU3180
 8720 0000 70B5     		push	{r4, r5, r6, lr}
 8721              		.cfi_def_cfa_offset 16
 8722              		.cfi_offset 4, -16
 8723              		.cfi_offset 5, -12
 8724              		.cfi_offset 6, -8
 8725              		.cfi_offset 14, -4
3547:source\fatfs/ff.c **** 	FRESULT res;
 8726              		.loc 1 3547 1 view .LVU3181
 8727 0002 0446     		mov	r4, r0
3552:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8728              		.loc 1 3552 8 view .LVU3182
 8729 0004 FFF7FEFF 		bl	validate
 8730              	.LVL986:
3553:source\fatfs/ff.c **** 		if (fp->err) {						/* Check error */
 8731              		.loc 1 3553 2 is_stmt 1 view .LVU3183
3553:source\fatfs/ff.c **** 		if (fp->err) {						/* Check error */
 8732              		.loc 1 3553 5 is_stmt 0 view .LVU3184
 8733 0008 0546     		mov	r5, r0
 8734 000a 0028     		cmp	r0, #0
 8735 000c 43D1     		bne	.L900
3554:source\fatfs/ff.c **** 			res = (FRESULT)fp->err;
 8736              		.loc 1 3554 3 is_stmt 1 view .LVU3185
3554:source\fatfs/ff.c **** 			res = (FRESULT)fp->err;
 8737              		.loc 1 3554 9 is_stmt 0 view .LVU3186
 8738 000e 94F80752 		ldrb	r5, [r4, #519]	@ zero_extendqisi2
3554:source\fatfs/ff.c **** 			res = (FRESULT)fp->err;
 8739              		.loc 1 3554 6 view .LVU3187
 8740 0012 002D     		cmp	r5, #0
 8741 0014 3FD1     		bne	.L900
3557:source\fatfs/ff.c **** 				res = FR_DENIED;
 8742              		.loc 1 3557 4 is_stmt 1 view .LVU3188
3557:source\fatfs/ff.c **** 				res = FR_DENIED;
 8743              		.loc 1 3557 12 is_stmt 0 view .LVU3189
 8744 0016 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
3557:source\fatfs/ff.c **** 				res = FR_DENIED;
 8745              		.loc 1 3557 7 view .LVU3190
 8746 001a 9907     		lsls	r1, r3, #30
 8747 001c 4FD5     		bpl	.L911
 8748              	.LVL987:
3561:source\fatfs/ff.c **** 		if (fp->fsize > fp->fptr) {
 8749              		.loc 1 3561 2 is_stmt 1 view .LVU3191
3562:source\fatfs/ff.c **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 8750              		.loc 1 3562 3 view .LVU3192
3562:source\fatfs/ff.c **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 8751              		.loc 1 3562 6 is_stmt 0 view .LVU3193
 8752 001e D4E98221 		ldrd	r2, r1, [r4, #520]
 8753 0022 9142     		cmp	r1, r2
 8754 0024 37D9     		bls	.L900
3563:source\fatfs/ff.c **** 			fp->flag |= FA__WRITTEN;
 8755              		.loc 1 3563 4 is_stmt 1 view .LVU3194
3564:source\fatfs/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8756              		.loc 1 3564 13 is_stmt 0 view .LVU3195
 8757 0026 43F02003 		orr	r3, r3, #32
3566:source\fatfs/ff.c **** 				fp->sclust = 0;
 8758              		.loc 1 3566 11 view .LVU3196
 8759 002a D4F80002 		ldr	r0, [r4, #512]
3563:source\fatfs/ff.c **** 			fp->flag |= FA__WRITTEN;
 8760              		.loc 1 3563 14 view .LVU3197
 8761 002e C4F80C22 		str	r2, [r4, #524]
3564:source\fatfs/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8762              		.loc 1 3564 4 is_stmt 1 view .LVU3198
3564:source\fatfs/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8763              		.loc 1 3564 13 is_stmt 0 view .LVU3199
 8764 0032 84F80632 		strb	r3, [r4, #518]
3565:source\fatfs/ff.c **** 				res = remove_chain(fp->fs, fp->sclust);
 8765              		.loc 1 3565 4 is_stmt 1 view .LVU3200
3565:source\fatfs/ff.c **** 				res = remove_chain(fp->fs, fp->sclust);
 8766              		.loc 1 3565 7 is_stmt 0 view .LVU3201
 8767 0036 52B9     		cbnz	r2, .L902
3566:source\fatfs/ff.c **** 				fp->sclust = 0;
 8768              		.loc 1 3566 5 is_stmt 1 view .LVU3202
3566:source\fatfs/ff.c **** 				fp->sclust = 0;
 8769              		.loc 1 3566 11 is_stmt 0 view .LVU3203
 8770 0038 D4F81012 		ldr	r1, [r4, #528]
 8771 003c FFF7FEFF 		bl	remove_chain
 8772              	.LVL988:
3567:source\fatfs/ff.c **** 			} else {				/* When truncate a part of the file, remove remaining clusters */
 8773              		.loc 1 3567 5 is_stmt 1 view .LVU3204
3567:source\fatfs/ff.c **** 			} else {				/* When truncate a part of the file, remove remaining clusters */
 8774              		.loc 1 3567 16 is_stmt 0 view .LVU3205
 8775 0040 C4F81052 		str	r5, [r4, #528]
 8776              	.L903:
3579:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8777              		.loc 1 3579 4 is_stmt 1 view .LVU3206
3579:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8778              		.loc 1 3579 7 is_stmt 0 view .LVU3207
 8779 0044 90B1     		cbz	r0, .L909
 8780              	.LVL989:
 8781              	.L905:
3587:source\fatfs/ff.c **** 	}
 8782              		.loc 1 3587 21 is_stmt 1 discriminator 1 view .LVU3208
3587:source\fatfs/ff.c **** 	}
 8783              		.loc 1 3587 29 is_stmt 0 discriminator 1 view .LVU3209
 8784 0046 84F80702 		strb	r0, [r4, #519]
 8785 004a 0546     		mov	r5, r0
 8786 004c 23E0     		b	.L900
 8787              	.LVL990:
 8788              	.L902:
3569:source\fatfs/ff.c **** 				res = FR_OK;
 8789              		.loc 1 3569 5 is_stmt 1 view .LVU3210
3569:source\fatfs/ff.c **** 				res = FR_OK;
 8790              		.loc 1 3569 11 is_stmt 0 view .LVU3211
 8791 004e D4F81412 		ldr	r1, [r4, #532]
 8792 0052 FFF7FEFF 		bl	get_fat
 8793              	.LVL991:
3571:source\fatfs/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
 8794              		.loc 1 3571 8 view .LVU3212
 8795 0056 421C     		adds	r2, r0, #1
3569:source\fatfs/ff.c **** 				res = FR_OK;
 8796              		.loc 1 3569 11 view .LVU3213
 8797 0058 0646     		mov	r6, r0
 8798              	.LVL992:
3570:source\fatfs/ff.c **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8799              		.loc 1 3570 5 is_stmt 1 view .LVU3214
3571:source\fatfs/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
 8800              		.loc 1 3571 5 view .LVU3215
3571:source\fatfs/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
 8801              		.loc 1 3571 8 is_stmt 0 view .LVU3216
 8802 005a 2CD0     		beq	.L904
3572:source\fatfs/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 8803              		.loc 1 3572 5 is_stmt 1 view .LVU3217
3572:source\fatfs/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 8804              		.loc 1 3572 8 is_stmt 0 view .LVU3218
 8805 005c 0128     		cmp	r0, #1
 8806 005e 2CD0     		beq	.L912
3573:source\fatfs/ff.c **** 					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 8807              		.loc 1 3573 5 is_stmt 1 view .LVU3219
3573:source\fatfs/ff.c **** 					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 8808              		.loc 1 3573 33 is_stmt 0 view .LVU3220
 8809 0060 D4F80002 		ldr	r0, [r4, #512]
 8810              	.LVL993:
3573:source\fatfs/ff.c **** 					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 8811              		.loc 1 3573 22 view .LVU3221
 8812 0064 D0F81432 		ldr	r3, [r0, #532]
 8813 0068 B342     		cmp	r3, r6
 8814 006a 16D8     		bhi	.L906
 8815              	.LVL994:
 8816              	.L909:
3579:source\fatfs/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8817              		.loc 1 3579 21 view .LVU3222
 8818 006c 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 8819 0070 5B06     		lsls	r3, r3, #25
 8820 0072 10D5     		bpl	.L900
3580:source\fatfs/ff.c **** 					res = FR_DISK_ERR;
 8821              		.loc 1 3580 5 is_stmt 1 view .LVU3223
3580:source\fatfs/ff.c **** 					res = FR_DISK_ERR;
 8822              		.loc 1 3580 9 is_stmt 0 view .LVU3224
 8823 0074 D4F80002 		ldr	r0, [r4, #512]
 8824 0078 D4F81822 		ldr	r2, [r4, #536]
 8825 007c 90F80102 		ldrb	r0, [r0, #513]	@ zero_extendqisi2
 8826 0080 0123     		movs	r3, #1
 8827 0082 2146     		mov	r1, r4
 8828 0084 FFF7FEFF 		bl	disk_write
 8829              	.LVL995:
3580:source\fatfs/ff.c **** 					res = FR_DISK_ERR;
 8830              		.loc 1 3580 8 view .LVU3225
 8831 0088 A8B9     		cbnz	r0, .L904
3583:source\fatfs/ff.c **** 			}
 8832              		.loc 1 3583 6 is_stmt 1 view .LVU3226
3583:source\fatfs/ff.c **** 			}
 8833              		.loc 1 3583 15 is_stmt 0 view .LVU3227
 8834 008a 94F80632 		ldrb	r3, [r4, #518]	@ zero_extendqisi2
 8835 008e 23F04003 		bic	r3, r3, #64
 8836 0092 84F80632 		strb	r3, [r4, #518]
 8837              	.L900:
 8838              	.LVL996:
3590:source\fatfs/ff.c **** }
 8839              		.loc 1 3590 2 is_stmt 1 view .LVU3228
3591:source\fatfs/ff.c **** 
 8840              		.loc 1 3591 1 is_stmt 0 view .LVU3229
 8841 0096 2846     		mov	r0, r5
 8842 0098 70BD     		pop	{r4, r5, r6, pc}
 8843              	.LVL997:
 8844              	.L906:
3574:source\fatfs/ff.c **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 8845              		.loc 1 3574 6 is_stmt 1 view .LVU3230
3574:source\fatfs/ff.c **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 8846              		.loc 1 3574 12 is_stmt 0 view .LVU3231
 8847 009a D4F81412 		ldr	r1, [r4, #532]
 8848 009e 6FF07042 		mvn	r2, #-268435456
 8849 00a2 FFF7FEFF 		bl	put_fat
 8850              	.LVL998:
3575:source\fatfs/ff.c **** 				}
 8851              		.loc 1 3575 6 is_stmt 1 view .LVU3232
3575:source\fatfs/ff.c **** 				}
 8852              		.loc 1 3575 9 is_stmt 0 view .LVU3233
 8853 00a6 0028     		cmp	r0, #0
 8854 00a8 CDD1     		bne	.L905
3575:source\fatfs/ff.c **** 				}
 8855              		.loc 1 3575 24 is_stmt 1 discriminator 1 view .LVU3234
3575:source\fatfs/ff.c **** 				}
 8856              		.loc 1 3575 30 is_stmt 0 discriminator 1 view .LVU3235
 8857 00aa D4F80002 		ldr	r0, [r4, #512]
 8858              	.LVL999:
3575:source\fatfs/ff.c **** 				}
 8859              		.loc 1 3575 30 discriminator 1 view .LVU3236
 8860 00ae 3146     		mov	r1, r6
 8861 00b0 FFF7FEFF 		bl	remove_chain
 8862              	.LVL1000:
3575:source\fatfs/ff.c **** 				}
 8863              		.loc 1 3575 30 discriminator 1 view .LVU3237
 8864 00b4 C6E7     		b	.L903
 8865              	.LVL1001:
 8866              	.L904:
3581:source\fatfs/ff.c **** 				else
 8867              		.loc 1 3581 10 view .LVU3238
 8868 00b6 0120     		movs	r0, #1
 8869 00b8 C5E7     		b	.L905
 8870              	.LVL1002:
 8871              	.L912:
3572:source\fatfs/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 8872              		.loc 1 3572 23 view .LVU3239
 8873 00ba 0220     		movs	r0, #2
 8874              	.LVL1003:
3572:source\fatfs/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 8875              		.loc 1 3572 23 view .LVU3240
 8876 00bc C3E7     		b	.L905
 8877              	.LVL1004:
 8878              	.L911:
3558:source\fatfs/ff.c **** 		}
 8879              		.loc 1 3558 9 view .LVU3241
 8880 00be 0725     		movs	r5, #7
 8881 00c0 E9E7     		b	.L900
 8882              		.cfi_endproc
 8883              	.LFE174:
 8885              		.section	.text.f_unlink,"ax",%progbits
 8886              		.align	1
 8887              		.global	f_unlink
 8888              		.syntax unified
 8889              		.thumb
 8890              		.thumb_func
 8892              	f_unlink:
 8893              	.LVL1005:
 8894              	.LFB175:
3603:source\fatfs/ff.c **** 	FRESULT res;
 8895              		.loc 1 3603 1 is_stmt 1 view -0
 8896              		.cfi_startproc
 8897              		@ args = 0, pretend = 0, frame = 1128
 8898              		@ frame_needed = 0, uses_anonymous_args = 0
3604:source\fatfs/ff.c **** 	DIR dj, sdj;
 8899              		.loc 1 3604 2 view .LVU3243
3605:source\fatfs/ff.c **** 	BYTE *dir;
 8900              		.loc 1 3605 2 view .LVU3244
3606:source\fatfs/ff.c **** 	DWORD dclst = 0;
 8901              		.loc 1 3606 2 view .LVU3245
3607:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 8902              		.loc 1 3607 2 view .LVU3246
3608:source\fatfs/ff.c **** 
 8903              		.loc 1 3608 2 view .LVU3247
3608:source\fatfs/ff.c **** 
 8904              		.loc 1 3608 2 view .LVU3248
3612:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8905              		.loc 1 3612 2 view .LVU3249
3603:source\fatfs/ff.c **** 	FRESULT res;
 8906              		.loc 1 3603 1 is_stmt 0 view .LVU3250
 8907 0000 70B5     		push	{r4, r5, r6, lr}
 8908              		.cfi_def_cfa_offset 16
 8909              		.cfi_offset 4, -16
 8910              		.cfi_offset 5, -12
 8911              		.cfi_offset 6, -8
 8912              		.cfi_offset 14, -4
 8913 0002 ADF58D6D 		sub	sp, sp, #1128
 8914              		.cfi_def_cfa_offset 1144
3612:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8915              		.loc 1 3612 8 view .LVU3251
 8916 0006 0122     		movs	r2, #1
3603:source\fatfs/ff.c **** 	FRESULT res;
 8917              		.loc 1 3603 1 view .LVU3252
 8918 0008 0190     		str	r0, [sp, #4]
3612:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8919              		.loc 1 3612 8 view .LVU3253
 8920 000a 01A9     		add	r1, sp, #4
 8921 000c 86A8     		add	r0, sp, #536
 8922              	.LVL1006:
3612:source\fatfs/ff.c **** 	if (res == FR_OK) {
 8923              		.loc 1 3612 8 view .LVU3254
 8924 000e FFF7FEFF 		bl	find_volume
 8925              	.LVL1007:
3613:source\fatfs/ff.c **** 		INIT_BUF(dj);
 8926              		.loc 1 3613 2 is_stmt 1 view .LVU3255
3613:source\fatfs/ff.c **** 		INIT_BUF(dj);
 8927              		.loc 1 3613 5 is_stmt 0 view .LVU3256
 8928 0012 0446     		mov	r4, r0
 8929 0014 F8B9     		cbnz	r0, .L920
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8930              		.loc 1 3614 3 is_stmt 1 view .LVU3257
 8931 0016 4FF40070 		mov	r0, #512
 8932              	.LVL1008:
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8933              		.loc 1 3614 3 is_stmt 0 view .LVU3258
 8934 001a FFF7FEFF 		bl	ff_memalloc
 8935              	.LVL1009:
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8936              		.loc 1 3614 3 is_stmt 1 view .LVU3259
 8937 001e 0546     		mov	r5, r0
 8938 0020 0028     		cmp	r0, #0
 8939 0022 54D0     		beq	.L928
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8940              		.loc 1 3614 3 discriminator 2 view .LVU3260
 8941 0024 8E90     		str	r0, [sp, #568]
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8942              		.loc 1 3614 3 discriminator 2 view .LVU3261
 8943 0026 03AB     		add	r3, sp, #12
3615:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 8944              		.loc 1 3615 9 is_stmt 0 discriminator 2 view .LVU3262
 8945 0028 0199     		ldr	r1, [sp, #4]
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8946              		.loc 1 3614 3 discriminator 2 view .LVU3263
 8947 002a 8C93     		str	r3, [sp, #560]
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8948              		.loc 1 3614 15 is_stmt 1 discriminator 2 view .LVU3264
3615:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 8949              		.loc 1 3615 3 discriminator 2 view .LVU3265
3615:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 8950              		.loc 1 3615 9 is_stmt 0 discriminator 2 view .LVU3266
 8951 002c 06A8     		add	r0, sp, #24
 8952              	.LVL1010:
3615:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 8953              		.loc 1 3615 9 discriminator 2 view .LVU3267
 8954 002e FFF7FEFF 		bl	follow_path
 8955              	.LVL1011:
3616:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8956              		.loc 1 3616 3 is_stmt 1 discriminator 2 view .LVU3268
3619:source\fatfs/ff.c **** #endif
 8957              		.loc 1 3619 3 discriminator 2 view .LVU3269
3619:source\fatfs/ff.c **** #endif
 8958              		.loc 1 3619 6 is_stmt 0 discriminator 2 view .LVU3270
 8959 0032 0446     		mov	r4, r0
 8960 0034 60B9     		cbnz	r0, .L921
3619:source\fatfs/ff.c **** #endif
 8961              		.loc 1 3619 21 is_stmt 1 discriminator 1 view .LVU3271
3619:source\fatfs/ff.c **** #endif
 8962              		.loc 1 3619 27 is_stmt 0 discriminator 1 view .LVU3272
 8963 0036 0221     		movs	r1, #2
 8964 0038 06A8     		add	r0, sp, #24
 8965              	.LVL1012:
3619:source\fatfs/ff.c **** #endif
 8966              		.loc 1 3619 27 discriminator 1 view .LVU3273
 8967 003a FFF7FEFF 		bl	chk_lock
 8968              	.LVL1013:
3621:source\fatfs/ff.c **** 			dir = dj.dir;
 8969              		.loc 1 3621 3 is_stmt 1 discriminator 1 view .LVU3274
3621:source\fatfs/ff.c **** 			dir = dj.dir;
 8970              		.loc 1 3621 6 is_stmt 0 discriminator 1 view .LVU3275
 8971 003e 0446     		mov	r4, r0
 8972 0040 30B9     		cbnz	r0, .L921
3622:source\fatfs/ff.c **** 			if (!dir) {
 8973              		.loc 1 3622 4 is_stmt 1 view .LVU3276
3622:source\fatfs/ff.c **** 			if (!dir) {
 8974              		.loc 1 3622 8 is_stmt 0 view .LVU3277
 8975 0042 8B99     		ldr	r1, [sp, #556]
 8976              	.LVL1014:
3623:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8977              		.loc 1 3623 4 is_stmt 1 view .LVU3278
3623:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8978              		.loc 1 3623 7 is_stmt 0 view .LVU3279
 8979 0044 0029     		cmp	r1, #0
 8980 0046 40D0     		beq	.L929
3626:source\fatfs/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 8981              		.loc 1 3626 5 is_stmt 1 view .LVU3280
3626:source\fatfs/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 8982              		.loc 1 3626 12 is_stmt 0 view .LVU3281
 8983 0048 CC7A     		ldrb	r4, [r1, #11]	@ zero_extendqisi2
3626:source\fatfs/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 8984              		.loc 1 3626 8 view .LVU3282
 8985 004a E207     		lsls	r2, r4, #31
 8986 004c 07D5     		bpl	.L922
 8987              	.LVL1015:
 8988              	.L925:
3627:source\fatfs/ff.c **** 			}
 8989              		.loc 1 3627 10 view .LVU3283
 8990 004e 0724     		movs	r4, #7
 8991              	.LVL1016:
 8992              	.L921:
3656:source\fatfs/ff.c **** 	}
 8993              		.loc 1 3656 3 is_stmt 1 view .LVU3284
 8994 0050 2846     		mov	r0, r5
 8995 0052 FFF7FEFF 		bl	ff_memfree
 8996              	.LVL1017:
 8997              	.L920:
3660:source\fatfs/ff.c **** 
 8998              		.loc 1 3660 1 is_stmt 0 view .LVU3285
 8999 0056 2046     		mov	r0, r4
 9000 0058 0DF58D6D 		add	sp, sp, #1128
 9001              		.cfi_remember_state
 9002              		.cfi_def_cfa_offset 16
 9003              		@ sp needed
 9004 005c 70BD     		pop	{r4, r5, r6, pc}
 9005              	.LVL1018:
 9006              	.L922:
 9007              		.cfi_restore_state
3629:source\fatfs/ff.c **** 				dclst = ld_clust(dj.fs, dir);
 9008              		.loc 1 3629 4 is_stmt 1 view .LVU3286
3630:source\fatfs/ff.c **** 				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 9009              		.loc 1 3630 5 view .LVU3287
3630:source\fatfs/ff.c **** 				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 9010              		.loc 1 3630 13 is_stmt 0 view .LVU3288
 9011 005e 869B     		ldr	r3, [sp, #536]
 9012 0060 93F80002 		ldrb	r0, [r3, #512]	@ zero_extendqisi2
 9013 0064 FFF7FEFF 		bl	ld_clust.isra.0
 9014              	.LVL1019:
3631:source\fatfs/ff.c **** #if _FS_RPATH
 9015              		.loc 1 3631 5 is_stmt 1 view .LVU3289
3631:source\fatfs/ff.c **** #if _FS_RPATH
 9016              		.loc 1 3631 8 is_stmt 0 view .LVU3290
 9017 0068 0646     		mov	r6, r0
 9018 006a 50B3     		cbz	r0, .L923
3631:source\fatfs/ff.c **** #if _FS_RPATH
 9019              		.loc 1 3631 15 discriminator 1 view .LVU3291
 9020 006c E306     		lsls	r3, r4, #27
 9021 006e 16D5     		bpl	.L939
3638:source\fatfs/ff.c **** 						sdj.sclust = dclst;
 9022              		.loc 1 3638 7 is_stmt 1 view .LVU3292
 9023 0070 4FF40A72 		mov	r2, #552
 9024 0074 06A9     		add	r1, sp, #24
 9025              	.LVL1020:
3638:source\fatfs/ff.c **** 						sdj.sclust = dclst;
 9026              		.loc 1 3638 7 is_stmt 0 view .LVU3293
 9027 0076 90A8     		add	r0, sp, #576
 9028              	.LVL1021:
3638:source\fatfs/ff.c **** 						sdj.sclust = dclst;
 9029              		.loc 1 3638 7 view .LVU3294
 9030 0078 FFF7FEFF 		bl	mem_cpy
 9031              	.LVL1022:
3639:source\fatfs/ff.c **** 						res = dir_sdi(&sdj, 2);
 9032              		.loc 1 3639 7 is_stmt 1 view .LVU3295
3640:source\fatfs/ff.c **** 						if (res == FR_OK) {
 9033              		.loc 1 3640 13 is_stmt 0 view .LVU3296
 9034 007c 0221     		movs	r1, #2
 9035 007e 90A8     		add	r0, sp, #576
3639:source\fatfs/ff.c **** 						res = dir_sdi(&sdj, 2);
 9036              		.loc 1 3639 18 view .LVU3297
 9037 0080 CDF84864 		str	r6, [sp, #1096]
3640:source\fatfs/ff.c **** 						if (res == FR_OK) {
 9038              		.loc 1 3640 7 is_stmt 1 view .LVU3298
3640:source\fatfs/ff.c **** 						if (res == FR_OK) {
 9039              		.loc 1 3640 13 is_stmt 0 view .LVU3299
 9040 0084 FFF7FEFF 		bl	dir_sdi
 9041              	.LVL1023:
3641:source\fatfs/ff.c **** 							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 9042              		.loc 1 3641 7 is_stmt 1 view .LVU3300
3641:source\fatfs/ff.c **** 							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 9043              		.loc 1 3641 10 is_stmt 0 view .LVU3301
 9044 0088 0446     		mov	r4, r0
 9045 008a 0028     		cmp	r0, #0
 9046 008c E0D1     		bne	.L921
3642:source\fatfs/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 9047              		.loc 1 3642 8 is_stmt 1 view .LVU3302
3642:source\fatfs/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 9048              		.loc 1 3642 14 is_stmt 0 view .LVU3303
 9049 008e 90A8     		add	r0, sp, #576
 9050              	.LVL1024:
3642:source\fatfs/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 9051              		.loc 1 3642 14 view .LVU3304
 9052 0090 FFF7FEFF 		bl	dir_read.constprop.0
 9053              	.LVL1025:
3643:source\fatfs/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 9054              		.loc 1 3643 8 is_stmt 1 view .LVU3305
3643:source\fatfs/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 9055              		.loc 1 3643 11 is_stmt 0 view .LVU3306
 9056 0094 0446     		mov	r4, r0
 9057 0096 0028     		cmp	r0, #0
 9058 0098 D9D0     		beq	.L925
3644:source\fatfs/ff.c **** 						}
 9059              		.loc 1 3644 8 is_stmt 1 view .LVU3307
3644:source\fatfs/ff.c **** 						}
 9060              		.loc 1 3644 11 is_stmt 0 view .LVU3308
 9061 009a 0428     		cmp	r0, #4
 9062 009c D8D1     		bne	.L921
 9063              	.LVL1026:
 9064              	.L939:
3650:source\fatfs/ff.c **** 				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 9065              		.loc 1 3650 5 is_stmt 1 view .LVU3309
3650:source\fatfs/ff.c **** 				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 9066              		.loc 1 3650 11 is_stmt 0 view .LVU3310
 9067 009e 06A8     		add	r0, sp, #24
 9068 00a0 FFF7FEFF 		bl	dir_remove
 9069              	.LVL1027:
3651:source\fatfs/ff.c **** 					res = remove_chain(dj.fs, dclst);
 9070              		.loc 1 3651 5 is_stmt 1 view .LVU3311
3651:source\fatfs/ff.c **** 					res = remove_chain(dj.fs, dclst);
 9071              		.loc 1 3651 8 is_stmt 0 view .LVU3312
 9072 00a4 0446     		mov	r4, r0
 9073 00a6 0028     		cmp	r0, #0
 9074 00a8 D2D1     		bne	.L921
3652:source\fatfs/ff.c **** 				if (res == FR_OK) res = sync_fs(dj.fs);
 9075              		.loc 1 3652 6 is_stmt 1 view .LVU3313
3652:source\fatfs/ff.c **** 				if (res == FR_OK) res = sync_fs(dj.fs);
 9076              		.loc 1 3652 12 is_stmt 0 view .LVU3314
 9077 00aa 8698     		ldr	r0, [sp, #536]
 9078              	.LVL1028:
3652:source\fatfs/ff.c **** 				if (res == FR_OK) res = sync_fs(dj.fs);
 9079              		.loc 1 3652 12 view .LVU3315
 9080 00ac 3146     		mov	r1, r6
 9081 00ae FFF7FEFF 		bl	remove_chain
 9082              	.LVL1029:
 9083              	.L941:
3651:source\fatfs/ff.c **** 					res = remove_chain(dj.fs, dclst);
 9084              		.loc 1 3651 5 is_stmt 1 view .LVU3316
3651:source\fatfs/ff.c **** 					res = remove_chain(dj.fs, dclst);
 9085              		.loc 1 3651 8 is_stmt 0 view .LVU3317
 9086 00b2 0446     		mov	r4, r0
 9087 00b4 0028     		cmp	r0, #0
 9088 00b6 CBD1     		bne	.L921
 9089              	.LVL1030:
3653:source\fatfs/ff.c **** 			}
 9090              		.loc 1 3653 23 is_stmt 1 view .LVU3318
3653:source\fatfs/ff.c **** 			}
 9091              		.loc 1 3653 29 is_stmt 0 view .LVU3319
 9092 00b8 8698     		ldr	r0, [sp, #536]
 9093 00ba FFF7FEFF 		bl	sync_fs
 9094              	.LVL1031:
 9095 00be 0446     		mov	r4, r0
 9096              	.LVL1032:
3653:source\fatfs/ff.c **** 			}
 9097              		.loc 1 3653 29 view .LVU3320
 9098 00c0 C6E7     		b	.L921
 9099              	.LVL1033:
 9100              	.L923:
3650:source\fatfs/ff.c **** 				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 9101              		.loc 1 3650 5 is_stmt 1 view .LVU3321
3650:source\fatfs/ff.c **** 				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 9102              		.loc 1 3650 11 is_stmt 0 view .LVU3322
 9103 00c2 06A8     		add	r0, sp, #24
 9104 00c4 FFF7FEFF 		bl	dir_remove
 9105              	.LVL1034:
3650:source\fatfs/ff.c **** 				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 9106              		.loc 1 3650 11 view .LVU3323
 9107 00c8 F3E7     		b	.L941
 9108              	.LVL1035:
 9109              	.L929:
3624:source\fatfs/ff.c **** 			} else {
 9110              		.loc 1 3624 9 view .LVU3324
 9111 00ca 0624     		movs	r4, #6
 9112 00cc C0E7     		b	.L921
 9113              	.LVL1036:
 9114              	.L928:
3614:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9115              		.loc 1 3614 3 view .LVU3325
 9116 00ce 1124     		movs	r4, #17
 9117 00d0 C1E7     		b	.L920
 9118              		.cfi_endproc
 9119              	.LFE175:
 9121              		.section	.text.f_mkdir,"ax",%progbits
 9122              		.align	1
 9123              		.global	f_mkdir
 9124              		.syntax unified
 9125              		.thumb
 9126              		.thumb_func
 9128              	f_mkdir:
 9129              	.LVL1037:
 9130              	.LFB176:
3672:source\fatfs/ff.c **** 	FRESULT res;
 9131              		.loc 1 3672 1 is_stmt 1 view -0
 9132              		.cfi_startproc
 9133              		@ args = 0, pretend = 0, frame = 600
 9134              		@ frame_needed = 0, uses_anonymous_args = 0
3673:source\fatfs/ff.c **** 	DIR dj;
 9135              		.loc 1 3673 2 view .LVU3327
3674:source\fatfs/ff.c **** 	BYTE *dir, n;
 9136              		.loc 1 3674 2 view .LVU3328
3675:source\fatfs/ff.c **** 	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
 9137              		.loc 1 3675 2 view .LVU3329
3676:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 9138              		.loc 1 3676 2 view .LVU3330
3672:source\fatfs/ff.c **** 	FRESULT res;
 9139              		.loc 1 3672 1 is_stmt 0 view .LVU3331
 9140 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 9141              		.cfi_def_cfa_offset 36
 9142              		.cfi_offset 4, -36
 9143              		.cfi_offset 5, -32
 9144              		.cfi_offset 6, -28
 9145              		.cfi_offset 7, -24
 9146              		.cfi_offset 8, -20
 9147              		.cfi_offset 9, -16
 9148              		.cfi_offset 10, -12
 9149              		.cfi_offset 11, -8
 9150              		.cfi_offset 14, -4
 9151 0004 ADF5177D 		sub	sp, sp, #604
 9152              		.cfi_def_cfa_offset 640
3672:source\fatfs/ff.c **** 	FRESULT res;
 9153              		.loc 1 3672 1 view .LVU3332
 9154 0008 0790     		str	r0, [sp, #28]
3676:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 9155              		.loc 1 3676 28 view .LVU3333
 9156 000a FFF7FEFF 		bl	get_fattime
 9157              	.LVL1038:
3681:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9158              		.loc 1 3681 8 view .LVU3334
 9159 000e 0122     		movs	r2, #1
3676:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 9160              		.loc 1 3676 28 view .LVU3335
 9161 0010 8046     		mov	r8, r0
 9162              	.LVL1039:
3677:source\fatfs/ff.c **** 
 9163              		.loc 1 3677 2 is_stmt 1 view .LVU3336
3677:source\fatfs/ff.c **** 
 9164              		.loc 1 3677 2 view .LVU3337
3681:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9165              		.loc 1 3681 2 view .LVU3338
3681:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9166              		.loc 1 3681 8 is_stmt 0 view .LVU3339
 9167 0012 07A9     		add	r1, sp, #28
 9168 0014 8CA8     		add	r0, sp, #560
 9169              	.LVL1040:
3681:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9170              		.loc 1 3681 8 view .LVU3340
 9171 0016 FFF7FEFF 		bl	find_volume
 9172              	.LVL1041:
 9173 001a 0446     		mov	r4, r0
 9174 001c 0646     		mov	r6, r0
 9175              	.LVL1042:
3682:source\fatfs/ff.c **** 		INIT_BUF(dj);
 9176              		.loc 1 3682 2 is_stmt 1 view .LVU3341
3682:source\fatfs/ff.c **** 		INIT_BUF(dj);
 9177              		.loc 1 3682 5 is_stmt 0 view .LVU3342
 9178 001e 0028     		cmp	r0, #0
 9179 0020 40F0C180 		bne	.L956
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9180              		.loc 1 3683 3 is_stmt 1 view .LVU3343
 9181 0024 4FF40070 		mov	r0, #512
 9182              	.LVL1043:
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9183              		.loc 1 3683 3 is_stmt 0 view .LVU3344
 9184 0028 FFF7FEFF 		bl	ff_memalloc
 9185              	.LVL1044:
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9186              		.loc 1 3683 3 is_stmt 1 view .LVU3345
 9187 002c 0746     		mov	r7, r0
 9188 002e 0028     		cmp	r0, #0
 9189 0030 00F0C480 		beq	.L951
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9190              		.loc 1 3683 3 discriminator 2 view .LVU3346
 9191 0034 9490     		str	r0, [sp, #592]
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9192              		.loc 1 3683 3 discriminator 2 view .LVU3347
 9193 0036 09AB     		add	r3, sp, #36
3684:source\fatfs/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 9194              		.loc 1 3684 9 is_stmt 0 discriminator 2 view .LVU3348
 9195 0038 0799     		ldr	r1, [sp, #28]
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9196              		.loc 1 3683 3 discriminator 2 view .LVU3349
 9197 003a 9293     		str	r3, [sp, #584]
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9198              		.loc 1 3683 15 is_stmt 1 discriminator 2 view .LVU3350
3684:source\fatfs/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 9199              		.loc 1 3684 3 discriminator 2 view .LVU3351
3684:source\fatfs/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 9200              		.loc 1 3684 9 is_stmt 0 discriminator 2 view .LVU3352
 9201 003c 0CA8     		add	r0, sp, #48
 9202              	.LVL1045:
3684:source\fatfs/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 9203              		.loc 1 3684 9 discriminator 2 view .LVU3353
 9204 003e FFF7FEFF 		bl	follow_path
 9205              	.LVL1046:
3685:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
 9206              		.loc 1 3685 3 is_stmt 1 discriminator 2 view .LVU3354
3685:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
 9207              		.loc 1 3685 6 is_stmt 0 discriminator 2 view .LVU3355
 9208 0042 0446     		mov	r4, r0
 9209 0044 0028     		cmp	r0, #0
 9210 0046 00F0B780 		beq	.L952
3686:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
 9211              		.loc 1 3686 3 is_stmt 1 view .LVU3356
3688:source\fatfs/ff.c **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 9212              		.loc 1 3688 3 view .LVU3357
3688:source\fatfs/ff.c **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 9213              		.loc 1 3688 6 is_stmt 0 view .LVU3358
 9214 004a 0428     		cmp	r0, #4
 9215 004c 40F0A880 		bne	.L944
3689:source\fatfs/ff.c **** 			res = FR_OK;
 9216              		.loc 1 3689 4 is_stmt 1 view .LVU3359
3689:source\fatfs/ff.c **** 			res = FR_OK;
 9217              		.loc 1 3689 10 is_stmt 0 view .LVU3360
 9218 0050 8C9D     		ldr	r5, [sp, #560]
 9219 0052 3146     		mov	r1, r6
 9220 0054 2846     		mov	r0, r5
 9221              	.LVL1047:
3689:source\fatfs/ff.c **** 			res = FR_OK;
 9222              		.loc 1 3689 10 view .LVU3361
 9223 0056 FFF7FEFF 		bl	create_chain
 9224              	.LVL1048:
3690:source\fatfs/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 9225              		.loc 1 3690 4 is_stmt 1 view .LVU3362
3691:source\fatfs/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 9226              		.loc 1 3691 4 view .LVU3363
3691:source\fatfs/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 9227              		.loc 1 3691 7 is_stmt 0 view .LVU3364
 9228 005a 0646     		mov	r6, r0
 9229 005c 0028     		cmp	r0, #0
 9230 005e 00F09A80 		beq	.L953
3692:source\fatfs/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9231              		.loc 1 3692 4 is_stmt 1 view .LVU3365
3692:source\fatfs/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9232              		.loc 1 3692 7 is_stmt 0 view .LVU3366
 9233 0062 0128     		cmp	r0, #1
 9234 0064 00F0A480 		beq	.L954
3693:source\fatfs/ff.c **** 			if (res == FR_OK)					/* Flush FAT */
 9235              		.loc 1 3693 4 is_stmt 1 view .LVU3367
3693:source\fatfs/ff.c **** 			if (res == FR_OK)					/* Flush FAT */
 9236              		.loc 1 3693 7 is_stmt 0 view .LVU3368
 9237 0068 431C     		adds	r3, r0, #1
 9238 006a 00F0A380 		beq	.L955
3694:source\fatfs/ff.c **** 				res = sync_window(dj.fs);
 9239              		.loc 1 3694 4 is_stmt 1 view .LVU3369
3695:source\fatfs/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 9240              		.loc 1 3695 5 view .LVU3370
3695:source\fatfs/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 9241              		.loc 1 3695 11 is_stmt 0 view .LVU3371
 9242 006e 2846     		mov	r0, r5
 9243              	.LVL1049:
3695:source\fatfs/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 9244              		.loc 1 3695 11 view .LVU3372
 9245 0070 FFF7FEFF 		bl	sync_window
 9246              	.LVL1050:
3696:source\fatfs/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
 9247              		.loc 1 3696 4 is_stmt 1 view .LVU3373
3696:source\fatfs/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
 9248              		.loc 1 3696 7 is_stmt 0 view .LVU3374
 9249 0074 0446     		mov	r4, r0
 9250 0076 0028     		cmp	r0, #0
 9251 0078 40F08E80 		bne	.L945
3697:source\fatfs/ff.c **** 				dir = dj.fs->win.d8;
 9252              		.loc 1 3697 5 is_stmt 1 view .LVU3375
3697:source\fatfs/ff.c **** 				dir = dj.fs->win.d8;
 9253              		.loc 1 3697 11 is_stmt 0 view .LVU3376
 9254 007c 3146     		mov	r1, r6
 9255 007e 2846     		mov	r0, r5
 9256              	.LVL1051:
3697:source\fatfs/ff.c **** 				dir = dj.fs->win.d8;
 9257              		.loc 1 3697 11 view .LVU3377
 9258 0080 FFF7FEFF 		bl	clust2sect
 9259              	.LVL1052:
3699:source\fatfs/ff.c **** 				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 9260              		.loc 1 3699 5 view .LVU3378
 9261 0084 4FF40072 		mov	r2, #512
 9262 0088 2146     		mov	r1, r4
3697:source\fatfs/ff.c **** 				dir = dj.fs->win.d8;
 9263              		.loc 1 3697 11 view .LVU3379
 9264 008a 0590     		str	r0, [sp, #20]
 9265              	.LVL1053:
3698:source\fatfs/ff.c **** 				mem_set(dir, 0, SS(dj.fs));
 9266              		.loc 1 3698 5 is_stmt 1 view .LVU3380
3699:source\fatfs/ff.c **** 				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 9267              		.loc 1 3699 5 view .LVU3381
 9268 008c 2846     		mov	r0, r5
 9269              	.LVL1054:
3699:source\fatfs/ff.c **** 				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 9270              		.loc 1 3699 5 is_stmt 0 view .LVU3382
 9271 008e FFF7FEFF 		bl	mem_set
 9272              	.LVL1055:
3700:source\fatfs/ff.c **** 				dir[DIR_Name] = '.';
 9273              		.loc 1 3700 5 is_stmt 1 view .LVU3383
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9274              		.loc 1 3703 5 is_stmt 0 view .LVU3384
 9275 0092 5FFA88F3 		uxtb	r3, r8
3700:source\fatfs/ff.c **** 				dir[DIR_Name] = '.';
 9276              		.loc 1 3700 5 view .LVU3385
 9277 0096 2021     		movs	r1, #32
 9278 0098 0B22     		movs	r2, #11
 9279 009a 2846     		mov	r0, r5
 9280 009c FFF7FEFF 		bl	mem_set
 9281              	.LVL1056:
3701:source\fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;
 9282              		.loc 1 3701 5 is_stmt 1 view .LVU3386
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9283              		.loc 1 3703 5 is_stmt 0 view .LVU3387
 9284 00a0 0193     		str	r3, [sp, #4]
 9285 00a2 AB75     		strb	r3, [r5, #22]
 9286 00a4 C8F30723 		ubfx	r3, r8, #8, #8
3702:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);
 9287              		.loc 1 3702 19 view .LVU3388
 9288 00a8 1022     		movs	r2, #16
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9289              		.loc 1 3703 5 view .LVU3389
 9290 00aa 0293     		str	r3, [sp, #8]
 9291 00ac EB75     		strb	r3, [r5, #23]
 9292 00ae C8F30743 		ubfx	r3, r8, #16, #8
3701:source\fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;
 9293              		.loc 1 3701 19 view .LVU3390
 9294 00b2 2E24     		movs	r4, #46
3702:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);
 9295              		.loc 1 3702 19 view .LVU3391
 9296 00b4 EA72     		strb	r2, [r5, #11]
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9297              		.loc 1 3703 5 view .LVU3392
 9298 00b6 0393     		str	r3, [sp, #12]
3705:source\fatfs/ff.c **** 				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 9299              		.loc 1 3705 5 view .LVU3393
 9300 00b8 0A46     		mov	r2, r1
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9301              		.loc 1 3703 5 view .LVU3394
 9302 00ba 2B76     		strb	r3, [r5, #24]
 9303 00bc 4FEA1868 		lsr	r8, r8, #24
 9304              	.LVL1057:
 9305              	.LBB135:
 9306              	.LBB136:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9307              		.loc 1 1330 2 view .LVU3395
 9308 00c0 F3B2     		uxtb	r3, r6
 9309 00c2 C6F30729 		ubfx	r9, r6, #8, #8
1331:source\fatfs/ff.c **** }
 9310              		.loc 1 1331 2 view .LVU3396
 9311 00c6 C6F3074A 		ubfx	r10, r6, #16, #8
 9312 00ca 4FEA166B 		lsr	fp, r6, #24
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9313              		.loc 1 1330 2 view .LVU3397
 9314 00ce AB76     		strb	r3, [r5, #26]
 9315              	.LBE136:
 9316              	.LBE135:
3705:source\fatfs/ff.c **** 				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 9317              		.loc 1 3705 5 view .LVU3398
 9318 00d0 2946     		mov	r1, r5
 9319 00d2 A818     		adds	r0, r5, r2
3701:source\fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;
 9320              		.loc 1 3701 19 view .LVU3399
 9321 00d4 2C70     		strb	r4, [r5]
3702:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);
 9322              		.loc 1 3702 5 is_stmt 1 view .LVU3400
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9323              		.loc 1 3703 5 view .LVU3401
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9324              		.loc 1 3703 5 view .LVU3402
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9325              		.loc 1 3703 5 view .LVU3403
3703:source\fatfs/ff.c **** 				st_clust(dir, dcl);
 9326              		.loc 1 3703 5 view .LVU3404
 9327 00d6 85F81980 		strb	r8, [r5, #25]
3704:source\fatfs/ff.c **** 				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
 9328              		.loc 1 3704 5 view .LVU3405
 9329              	.LVL1058:
 9330              	.LBB139:
 9331              	.LBI135:
1325:source\fatfs/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
 9332              		.loc 1 1325 6 view .LVU3406
 9333              	.LBB137:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9334              		.loc 1 1330 2 view .LVU3407
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9335              		.loc 1 1330 2 view .LVU3408
 9336 00da 85F81B90 		strb	r9, [r5, #27]
1331:source\fatfs/ff.c **** }
 9337              		.loc 1 1331 2 view .LVU3409
 9338 00de 85F814A0 		strb	r10, [r5, #20]
1331:source\fatfs/ff.c **** }
 9339              		.loc 1 1331 2 view .LVU3410
 9340 00e2 85F815B0 		strb	fp, [r5, #21]
 9341              	.LVL1059:
1331:source\fatfs/ff.c **** }
 9342              		.loc 1 1331 2 is_stmt 0 view .LVU3411
 9343              	.LBE137:
 9344              	.LBE139:
3705:source\fatfs/ff.c **** 				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 9345              		.loc 1 3705 5 is_stmt 1 view .LVU3412
 9346              	.LBB140:
 9347              	.LBB138:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9348              		.loc 1 1330 2 is_stmt 0 view .LVU3413
 9349 00e6 0493     		str	r3, [sp, #16]
 9350              	.LBE138:
 9351              	.LBE140:
3705:source\fatfs/ff.c **** 				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 9352              		.loc 1 3705 5 view .LVU3414
 9353 00e8 FFF7FEFF 		bl	mem_cpy
 9354              	.LVL1060:
3706:source\fatfs/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 9355              		.loc 1 3706 5 is_stmt 1 view .LVU3415
3707:source\fatfs/ff.c **** 					pcl = 0;
 9356              		.loc 1 3707 8 is_stmt 0 view .LVU3416
 9357 00ec 95F80012 		ldrb	r1, [r5, #512]	@ zero_extendqisi2
3706:source\fatfs/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 9358              		.loc 1 3706 33 view .LVU3417
 9359 00f0 8E9A     		ldr	r2, [sp, #568]
3707:source\fatfs/ff.c **** 					pcl = 0;
 9360              		.loc 1 3707 8 view .LVU3418
 9361 00f2 059B     		ldr	r3, [sp, #20]
3706:source\fatfs/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 9362              		.loc 1 3706 22 view .LVU3419
 9363 00f4 85F82140 		strb	r4, [r5, #33]
3706:source\fatfs/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 9364              		.loc 1 3706 29 is_stmt 1 view .LVU3420
 9365              	.LVL1061:
3707:source\fatfs/ff.c **** 					pcl = 0;
 9366              		.loc 1 3707 5 view .LVU3421
3707:source\fatfs/ff.c **** 					pcl = 0;
 9367              		.loc 1 3707 8 is_stmt 0 view .LVU3422
 9368 00f8 0329     		cmp	r1, #3
 9369 00fa 04D1     		bne	.L946
3707:source\fatfs/ff.c **** 					pcl = 0;
 9370              		.loc 1 3707 36 discriminator 1 view .LVU3423
 9371 00fc D5F82412 		ldr	r1, [r5, #548]
3708:source\fatfs/ff.c **** 				st_clust(dir + SZ_DIRE, pcl);
 9372              		.loc 1 3708 10 discriminator 1 view .LVU3424
 9373 0100 9142     		cmp	r1, r2
 9374 0102 08BF     		it	eq
 9375 0104 0022     		moveq	r2, #0
 9376              	.LVL1062:
 9377              	.L946:
3709:source\fatfs/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 9378              		.loc 1 3709 5 is_stmt 1 view .LVU3425
 9379              	.LBB141:
 9380              	.LBI141:
1325:source\fatfs/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
 9381              		.loc 1 1325 6 view .LVU3426
 9382              	.LBB142:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9383              		.loc 1 1330 2 view .LVU3427
 9384 0106 C2F30721 		ubfx	r1, r2, #8, #8
 9385 010a 85F83A20 		strb	r2, [r5, #58]
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9386              		.loc 1 1330 2 view .LVU3428
1331:source\fatfs/ff.c **** }
 9387              		.loc 1 1331 2 is_stmt 0 view .LVU3429
 9388 010e 120C     		lsrs	r2, r2, #16
 9389              	.LVL1063:
1331:source\fatfs/ff.c **** }
 9390              		.loc 1 1331 2 view .LVU3430
 9391 0110 85F83420 		strb	r2, [r5, #52]
 9392 0114 120A     		lsrs	r2, r2, #8
 9393 0116 85F83520 		strb	r2, [r5, #53]
 9394 011a 95F80222 		ldrb	r2, [r5, #514]	@ zero_extendqisi2
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9395              		.loc 1 1330 2 view .LVU3431
 9396 011e 85F83B10 		strb	r1, [r5, #59]
1331:source\fatfs/ff.c **** }
 9397              		.loc 1 1331 2 is_stmt 1 view .LVU3432
1331:source\fatfs/ff.c **** }
 9398              		.loc 1 1331 2 view .LVU3433
 9399              	.LVL1064:
1331:source\fatfs/ff.c **** }
 9400              		.loc 1 1331 2 is_stmt 0 view .LVU3434
 9401              	.LBE142:
 9402              	.LBE141:
3710:source\fatfs/ff.c **** 					dj.fs->winsect = dsc++;
 9403              		.loc 1 3710 5 is_stmt 1 view .LVU3435
3710:source\fatfs/ff.c **** 					dj.fs->winsect = dsc++;
 9404              		.loc 1 3710 5 is_stmt 0 view .LVU3436
 9405 0122 1A44     		add	r2, r2, r3
 9406 0124 0692     		str	r2, [sp, #24]
 9407              	.LVL1065:
 9408              	.L947:
3710:source\fatfs/ff.c **** 					dj.fs->winsect = dsc++;
 9409              		.loc 1 3710 28 is_stmt 1 discriminator 1 view .LVU3437
 9410 0126 069A     		ldr	r2, [sp, #24]
 9411 0128 9342     		cmp	r3, r2
 9412 012a 1FD1     		bne	.L948
3718:source\fatfs/ff.c **** 			if (res != FR_OK) {
 9413              		.loc 1 3718 4 view .LVU3438
3718:source\fatfs/ff.c **** 			if (res != FR_OK) {
 9414              		.loc 1 3718 22 view .LVU3439
3718:source\fatfs/ff.c **** 			if (res != FR_OK) {
 9415              		.loc 1 3718 28 is_stmt 0 view .LVU3440
 9416 012c 0CA8     		add	r0, sp, #48
 9417 012e FFF7FEFF 		bl	dir_register
 9418              	.LVL1066:
3719:source\fatfs/ff.c **** 				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 9419              		.loc 1 3719 4 is_stmt 1 view .LVU3441
3719:source\fatfs/ff.c **** 				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 9420              		.loc 1 3719 7 is_stmt 0 view .LVU3442
 9421 0132 0446     		mov	r4, r0
 9422 0134 80BB     		cbnz	r0, .L945
3722:source\fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 9423              		.loc 1 3722 5 is_stmt 1 view .LVU3443
3722:source\fatfs/ff.c **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 9424              		.loc 1 3722 9 is_stmt 0 view .LVU3444
 9425 0136 919B     		ldr	r3, [sp, #580]
 9426              	.LVL1067:
3723:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
 9427              		.loc 1 3723 5 is_stmt 1 view .LVU3445
3726:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9428              		.loc 1 3726 7 is_stmt 0 view .LVU3446
 9429 0138 8C98     		ldr	r0, [sp, #560]
 9430              	.LVL1068:
3724:source\fatfs/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
 9431              		.loc 1 3724 5 view .LVU3447
 9432 013a 83F81980 		strb	r8, [r3, #25]
3723:source\fatfs/ff.c **** 				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
 9433              		.loc 1 3723 19 view .LVU3448
 9434 013e 1022     		movs	r2, #16
 9435 0140 DA72     		strb	r2, [r3, #11]
3724:source\fatfs/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
 9436              		.loc 1 3724 5 is_stmt 1 view .LVU3449
 9437 0142 019A     		ldr	r2, [sp, #4]
 9438 0144 9A75     		strb	r2, [r3, #22]
3724:source\fatfs/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
 9439              		.loc 1 3724 5 view .LVU3450
 9440 0146 029A     		ldr	r2, [sp, #8]
 9441 0148 DA75     		strb	r2, [r3, #23]
3724:source\fatfs/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
 9442              		.loc 1 3724 5 view .LVU3451
 9443 014a 039A     		ldr	r2, [sp, #12]
 9444 014c 1A76     		strb	r2, [r3, #24]
3724:source\fatfs/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
 9445              		.loc 1 3724 5 view .LVU3452
3725:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 9446              		.loc 1 3725 5 view .LVU3453
 9447              	.LVL1069:
 9448              	.LBB143:
 9449              	.LBI143:
1325:source\fatfs/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
 9450              		.loc 1 1325 6 view .LVU3454
 9451              	.LBB144:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9452              		.loc 1 1330 2 view .LVU3455
 9453 014e 049A     		ldr	r2, [sp, #16]
 9454 0150 9A76     		strb	r2, [r3, #26]
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9455              		.loc 1 1330 2 view .LVU3456
 9456 0152 83F81B90 		strb	r9, [r3, #27]
1331:source\fatfs/ff.c **** }
 9457              		.loc 1 1331 2 view .LVU3457
 9458 0156 83F814A0 		strb	r10, [r3, #20]
1331:source\fatfs/ff.c **** }
 9459              		.loc 1 1331 2 view .LVU3458
 9460 015a 83F815B0 		strb	fp, [r3, #21]
 9461              	.LVL1070:
1331:source\fatfs/ff.c **** }
 9462              		.loc 1 1331 2 is_stmt 0 view .LVU3459
 9463              	.LBE144:
 9464              	.LBE143:
3726:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9465              		.loc 1 3726 5 is_stmt 1 view .LVU3460
3726:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9466              		.loc 1 3726 18 is_stmt 0 view .LVU3461
 9467 015e 0123     		movs	r3, #1
 9468              	.LVL1071:
3726:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9469              		.loc 1 3726 18 view .LVU3462
 9470 0160 80F80432 		strb	r3, [r0, #516]
3727:source\fatfs/ff.c **** 			}
 9471              		.loc 1 3727 5 is_stmt 1 view .LVU3463
3727:source\fatfs/ff.c **** 			}
 9472              		.loc 1 3727 11 is_stmt 0 view .LVU3464
 9473 0164 FFF7FEFF 		bl	sync_fs
 9474              	.LVL1072:
3727:source\fatfs/ff.c **** 			}
 9475              		.loc 1 3727 11 view .LVU3465
 9476 0168 0446     		mov	r4, r0
 9477              	.LVL1073:
3727:source\fatfs/ff.c **** 			}
 9478              		.loc 1 3727 11 view .LVU3466
 9479 016a 19E0     		b	.L944
 9480              	.LVL1074:
 9481              	.L948:
3711:source\fatfs/ff.c **** 					dj.fs->wflag = 1;
 9482              		.loc 1 3711 6 is_stmt 1 view .LVU3467
3711:source\fatfs/ff.c **** 					dj.fs->wflag = 1;
 9483              		.loc 1 3711 26 is_stmt 0 view .LVU3468
 9484 016c 5A1C     		adds	r2, r3, #1
3711:source\fatfs/ff.c **** 					dj.fs->wflag = 1;
 9485              		.loc 1 3711 21 view .LVU3469
 9486 016e C5F82C32 		str	r3, [r5, #556]
3712:source\fatfs/ff.c **** 					res = sync_window(dj.fs);
 9487              		.loc 1 3712 19 view .LVU3470
 9488 0172 4FF00103 		mov	r3, #1
 9489 0176 85F80432 		strb	r3, [r5, #516]
3713:source\fatfs/ff.c **** 					if (res != FR_OK) break;
 9490              		.loc 1 3713 12 view .LVU3471
 9491 017a 2846     		mov	r0, r5
3711:source\fatfs/ff.c **** 					dj.fs->wflag = 1;
 9492              		.loc 1 3711 26 view .LVU3472
 9493 017c 0592     		str	r2, [sp, #20]
 9494              	.LVL1075:
3712:source\fatfs/ff.c **** 					res = sync_window(dj.fs);
 9495              		.loc 1 3712 6 is_stmt 1 view .LVU3473
3713:source\fatfs/ff.c **** 					if (res != FR_OK) break;
 9496              		.loc 1 3713 6 view .LVU3474
3713:source\fatfs/ff.c **** 					if (res != FR_OK) break;
 9497              		.loc 1 3713 12 is_stmt 0 view .LVU3475
 9498 017e FFF7FEFF 		bl	sync_window
 9499              	.LVL1076:
3714:source\fatfs/ff.c **** 					mem_set(dir, 0, SS(dj.fs));
 9500              		.loc 1 3714 6 is_stmt 1 view .LVU3476
3714:source\fatfs/ff.c **** 					mem_set(dir, 0, SS(dj.fs));
 9501              		.loc 1 3714 9 is_stmt 0 view .LVU3477
 9502 0182 0446     		mov	r4, r0
 9503 0184 40B9     		cbnz	r0, .L945
3715:source\fatfs/ff.c **** 				}
 9504              		.loc 1 3715 6 is_stmt 1 discriminator 2 view .LVU3478
 9505 0186 0146     		mov	r1, r0
 9506 0188 4FF40072 		mov	r2, #512
 9507 018c 2846     		mov	r0, r5
 9508              	.LVL1077:
3715:source\fatfs/ff.c **** 				}
 9509              		.loc 1 3715 6 is_stmt 0 discriminator 2 view .LVU3479
 9510 018e FFF7FEFF 		bl	mem_set
 9511              	.LVL1078:
3710:source\fatfs/ff.c **** 					dj.fs->winsect = dsc++;
 9512              		.loc 1 3710 32 is_stmt 1 discriminator 2 view .LVU3480
3711:source\fatfs/ff.c **** 					dj.fs->wflag = 1;
 9513              		.loc 1 3711 26 is_stmt 0 discriminator 2 view .LVU3481
 9514 0192 059B     		ldr	r3, [sp, #20]
 9515 0194 C7E7     		b	.L947
 9516              	.LVL1079:
 9517              	.L953:
3711:source\fatfs/ff.c **** 					dj.fs->wflag = 1;
 9518              		.loc 1 3711 26 discriminator 2 view .LVU3482
 9519 0196 0724     		movs	r4, #7
 9520              	.LVL1080:
 9521              	.L945:
3720:source\fatfs/ff.c **** 			} else {
 9522              		.loc 1 3720 5 is_stmt 1 view .LVU3483
 9523 0198 8C98     		ldr	r0, [sp, #560]
 9524 019a 3146     		mov	r1, r6
 9525 019c FFF7FEFF 		bl	remove_chain
 9526              	.LVL1081:
 9527              	.L944:
3730:source\fatfs/ff.c **** 	}
 9528              		.loc 1 3730 3 view .LVU3484
 9529 01a0 3846     		mov	r0, r7
 9530 01a2 FFF7FEFF 		bl	ff_memfree
 9531              	.LVL1082:
 9532              	.L956:
3734:source\fatfs/ff.c **** 
 9533              		.loc 1 3734 1 is_stmt 0 view .LVU3485
 9534 01a6 2046     		mov	r0, r4
 9535 01a8 0DF5177D 		add	sp, sp, #604
 9536              		.cfi_remember_state
 9537              		.cfi_def_cfa_offset 36
 9538              		@ sp needed
 9539 01ac BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 9540              	.LVL1083:
 9541              	.L954:
 9542              		.cfi_restore_state
3692:source\fatfs/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9543              		.loc 1 3692 22 view .LVU3486
 9544 01b0 0224     		movs	r4, #2
 9545 01b2 F1E7     		b	.L945
 9546              	.L955:
3693:source\fatfs/ff.c **** 			if (res == FR_OK)					/* Flush FAT */
 9547              		.loc 1 3693 31 view .LVU3487
 9548 01b4 0124     		movs	r4, #1
 9549 01b6 EFE7     		b	.L945
 9550              	.LVL1084:
 9551              	.L952:
3685:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
 9552              		.loc 1 3685 25 view .LVU3488
 9553 01b8 0824     		movs	r4, #8
 9554 01ba F1E7     		b	.L944
 9555              	.LVL1085:
 9556              	.L951:
3683:source\fatfs/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9557              		.loc 1 3683 3 view .LVU3489
 9558 01bc 1124     		movs	r4, #17
 9559 01be F2E7     		b	.L956
 9560              		.cfi_endproc
 9561              	.LFE176:
 9563              		.section	.text.f_chmod,"ax",%progbits
 9564              		.align	1
 9565              		.global	f_chmod
 9566              		.syntax unified
 9567              		.thumb
 9568              		.thumb_func
 9570              	f_chmod:
 9571              	.LVL1086:
 9572              	.LFB177:
3748:source\fatfs/ff.c **** 	FRESULT res;
 9573              		.loc 1 3748 1 is_stmt 1 view -0
 9574              		.cfi_startproc
 9575              		@ args = 0, pretend = 0, frame = 576
 9576              		@ frame_needed = 0, uses_anonymous_args = 0
3749:source\fatfs/ff.c **** 	DIR dj;
 9577              		.loc 1 3749 2 view .LVU3491
3750:source\fatfs/ff.c **** 	BYTE *dir;
 9578              		.loc 1 3750 2 view .LVU3492
3751:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 9579              		.loc 1 3751 2 view .LVU3493
3752:source\fatfs/ff.c **** 
 9580              		.loc 1 3752 2 view .LVU3494
3752:source\fatfs/ff.c **** 
 9581              		.loc 1 3752 2 view .LVU3495
3756:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9582              		.loc 1 3756 2 view .LVU3496
3748:source\fatfs/ff.c **** 	FRESULT res;
 9583              		.loc 1 3748 1 is_stmt 0 view .LVU3497
 9584 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 9585              		.cfi_def_cfa_offset 20
 9586              		.cfi_offset 4, -20
 9587              		.cfi_offset 5, -16
 9588              		.cfi_offset 6, -12
 9589              		.cfi_offset 7, -8
 9590              		.cfi_offset 14, -4
 9591 0002 ADF5117D 		sub	sp, sp, #580
 9592              		.cfi_def_cfa_offset 600
3748:source\fatfs/ff.c **** 	FRESULT res;
 9593              		.loc 1 3748 1 view .LVU3498
 9594 0006 0E46     		mov	r6, r1
 9595 0008 0190     		str	r0, [sp, #4]
 9596 000a 1546     		mov	r5, r2
3756:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9597              		.loc 1 3756 8 view .LVU3499
 9598 000c 01A9     		add	r1, sp, #4
 9599              	.LVL1087:
3756:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9600              		.loc 1 3756 8 view .LVU3500
 9601 000e 0122     		movs	r2, #1
 9602              	.LVL1088:
3756:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9603              		.loc 1 3756 8 view .LVU3501
 9604 0010 86A8     		add	r0, sp, #536
 9605              	.LVL1089:
3756:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9606              		.loc 1 3756 8 view .LVU3502
 9607 0012 FFF7FEFF 		bl	find_volume
 9608              	.LVL1090:
3757:source\fatfs/ff.c **** 		INIT_BUF(dj);
 9609              		.loc 1 3757 2 is_stmt 1 view .LVU3503
3757:source\fatfs/ff.c **** 		INIT_BUF(dj);
 9610              		.loc 1 3757 5 is_stmt 0 view .LVU3504
 9611 0016 0446     		mov	r4, r0
 9612 0018 08BB     		cbnz	r0, .L960
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9613              		.loc 1 3758 3 is_stmt 1 view .LVU3505
 9614 001a 4FF40070 		mov	r0, #512
 9615              	.LVL1091:
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9616              		.loc 1 3758 3 is_stmt 0 view .LVU3506
 9617 001e FFF7FEFF 		bl	ff_memalloc
 9618              	.LVL1092:
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9619              		.loc 1 3758 3 is_stmt 1 view .LVU3507
 9620 0022 0746     		mov	r7, r0
 9621 0024 F8B1     		cbz	r0, .L961
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9622              		.loc 1 3758 3 discriminator 2 view .LVU3508
 9623 0026 8E90     		str	r0, [sp, #568]
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9624              		.loc 1 3758 3 discriminator 2 view .LVU3509
 9625 0028 03AB     		add	r3, sp, #12
3759:source\fatfs/ff.c **** 		FREE_BUF();
 9626              		.loc 1 3759 9 is_stmt 0 discriminator 2 view .LVU3510
 9627 002a 0199     		ldr	r1, [sp, #4]
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9628              		.loc 1 3758 3 discriminator 2 view .LVU3511
 9629 002c 8C93     		str	r3, [sp, #560]
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9630              		.loc 1 3758 15 is_stmt 1 discriminator 2 view .LVU3512
3759:source\fatfs/ff.c **** 		FREE_BUF();
 9631              		.loc 1 3759 3 discriminator 2 view .LVU3513
3759:source\fatfs/ff.c **** 		FREE_BUF();
 9632              		.loc 1 3759 9 is_stmt 0 discriminator 2 view .LVU3514
 9633 002e 06A8     		add	r0, sp, #24
 9634              	.LVL1093:
3759:source\fatfs/ff.c **** 		FREE_BUF();
 9635              		.loc 1 3759 9 discriminator 2 view .LVU3515
 9636 0030 FFF7FEFF 		bl	follow_path
 9637              	.LVL1094:
 9638 0034 0446     		mov	r4, r0
 9639              	.LVL1095:
3760:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 9640              		.loc 1 3760 3 is_stmt 1 discriminator 2 view .LVU3516
 9641 0036 3846     		mov	r0, r7
 9642 0038 FFF7FEFF 		bl	ff_memfree
 9643              	.LVL1096:
3761:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
 9644              		.loc 1 3761 3 discriminator 2 view .LVU3517
3763:source\fatfs/ff.c **** 			dir = dj.dir;
 9645              		.loc 1 3763 3 discriminator 2 view .LVU3518
3763:source\fatfs/ff.c **** 			dir = dj.dir;
 9646              		.loc 1 3763 6 is_stmt 0 discriminator 2 view .LVU3519
 9647 003c 7CB9     		cbnz	r4, .L960
3764:source\fatfs/ff.c **** 			if (!dir) {						/* Is it a root directory? */
 9648              		.loc 1 3764 4 is_stmt 1 view .LVU3520
3764:source\fatfs/ff.c **** 			if (!dir) {						/* Is it a root directory? */
 9649              		.loc 1 3764 8 is_stmt 0 view .LVU3521
 9650 003e 8B9A     		ldr	r2, [sp, #556]
 9651              	.LVL1097:
3765:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
 9652              		.loc 1 3765 4 is_stmt 1 view .LVU3522
3765:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
 9653              		.loc 1 3765 7 is_stmt 0 view .LVU3523
 9654 0040 9AB1     		cbz	r2, .L962
3768:source\fatfs/ff.c **** 				dir[DIR_Attr] = (attr & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 9655              		.loc 1 3768 5 is_stmt 1 view .LVU3524
 9656              	.LVL1098:
3769:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 9657              		.loc 1 3769 5 view .LVU3525
3769:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 9658              		.loc 1 3769 41 is_stmt 0 view .LVU3526
 9659 0042 D37A     		ldrb	r3, [r2, #11]	@ zero_extendqisi2
3770:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9660              		.loc 1 3770 7 view .LVU3527
 9661 0044 8698     		ldr	r0, [sp, #536]
3769:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 9662              		.loc 1 3769 19 view .LVU3528
 9663 0046 5E40     		eors	r6, r6, r3
 9664 0048 3540     		ands	r5, r5, r6
 9665              	.LVL1099:
3769:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 9666              		.loc 1 3769 19 view .LVU3529
 9667 004a 05F02705 		and	r5, r5, #39
 9668 004e 6B40     		eors	r3, r3, r5
 9669 0050 D372     		strb	r3, [r2, #11]
3770:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9670              		.loc 1 3770 5 is_stmt 1 view .LVU3530
3770:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 9671              		.loc 1 3770 18 is_stmt 0 view .LVU3531
 9672 0052 0123     		movs	r3, #1
 9673 0054 80F80432 		strb	r3, [r0, #516]
3771:source\fatfs/ff.c **** 			}
 9674              		.loc 1 3771 5 is_stmt 1 view .LVU3532
3771:source\fatfs/ff.c **** 			}
 9675              		.loc 1 3771 11 is_stmt 0 view .LVU3533
 9676 0058 FFF7FEFF 		bl	sync_fs
 9677              	.LVL1100:
3771:source\fatfs/ff.c **** 			}
 9678              		.loc 1 3771 11 view .LVU3534
 9679 005c 0446     		mov	r4, r0
 9680              	.LVL1101:
 9681              	.L960:
3777:source\fatfs/ff.c **** 
 9682              		.loc 1 3777 1 view .LVU3535
 9683 005e 2046     		mov	r0, r4
 9684 0060 0DF5117D 		add	sp, sp, #580
 9685              		.cfi_remember_state
 9686              		.cfi_def_cfa_offset 20
 9687              		@ sp needed
 9688 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 9689              	.LVL1102:
 9690              	.L961:
 9691              		.cfi_restore_state
3758:source\fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9692              		.loc 1 3758 3 view .LVU3536
 9693 0066 1124     		movs	r4, #17
 9694 0068 F9E7     		b	.L960
 9695              	.LVL1103:
 9696              	.L962:
3766:source\fatfs/ff.c **** 			} else {						/* File or sub directory */
 9697              		.loc 1 3766 9 view .LVU3537
 9698 006a 0624     		movs	r4, #6
 9699              	.LVL1104:
3766:source\fatfs/ff.c **** 			} else {						/* File or sub directory */
 9700              		.loc 1 3766 9 view .LVU3538
 9701 006c F7E7     		b	.L960
 9702              		.cfi_endproc
 9703              	.LFE177:
 9705              		.section	.text.f_rename,"ax",%progbits
 9706              		.align	1
 9707              		.global	f_rename
 9708              		.syntax unified
 9709              		.thumb
 9710              		.thumb_func
 9712              	f_rename:
 9713              	.LVL1105:
 9714              	.LFB178:
3790:source\fatfs/ff.c **** 	FRESULT res;
 9715              		.loc 1 3790 1 is_stmt 1 view -0
 9716              		.cfi_startproc
 9717              		@ args = 0, pretend = 0, frame = 1152
 9718              		@ frame_needed = 0, uses_anonymous_args = 0
3791:source\fatfs/ff.c **** 	DIR djo, djn;
 9719              		.loc 1 3791 2 view .LVU3540
3792:source\fatfs/ff.c **** 	BYTE buf[21], *dir;
 9720              		.loc 1 3792 2 view .LVU3541
3793:source\fatfs/ff.c **** 	DWORD dw;
 9721              		.loc 1 3793 2 view .LVU3542
3794:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 9722              		.loc 1 3794 2 view .LVU3543
3795:source\fatfs/ff.c **** 
 9723              		.loc 1 3795 2 view .LVU3544
3795:source\fatfs/ff.c **** 
 9724              		.loc 1 3795 2 view .LVU3545
3799:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9725              		.loc 1 3799 2 view .LVU3546
3790:source\fatfs/ff.c **** 	FRESULT res;
 9726              		.loc 1 3790 1 is_stmt 0 view .LVU3547
 9727 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 9728              		.cfi_def_cfa_offset 20
 9729              		.cfi_offset 4, -20
 9730              		.cfi_offset 5, -16
 9731              		.cfi_offset 6, -12
 9732              		.cfi_offset 7, -8
 9733              		.cfi_offset 14, -4
 9734 0002 ADF2844D 		subw	sp, sp, #1156
 9735              		.cfi_def_cfa_offset 1176
3790:source\fatfs/ff.c **** 	FRESULT res;
 9736              		.loc 1 3790 1 view .LVU3548
 9737 0006 CDE90010 		strd	r1, r0, [sp]
3799:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9738              		.loc 1 3799 8 view .LVU3549
 9739 000a 0122     		movs	r2, #1
 9740 000c 01A9     		add	r1, sp, #4
 9741              	.LVL1106:
3799:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9742              		.loc 1 3799 8 view .LVU3550
 9743 000e 8CA8     		add	r0, sp, #560
 9744              	.LVL1107:
3799:source\fatfs/ff.c **** 	if (res == FR_OK) {
 9745              		.loc 1 3799 8 view .LVU3551
 9746 0010 FFF7FEFF 		bl	find_volume
 9747              	.LVL1108:
3800:source\fatfs/ff.c **** 		djn.fs = djo.fs;
 9748              		.loc 1 3800 2 is_stmt 1 view .LVU3552
3800:source\fatfs/ff.c **** 		djn.fs = djo.fs;
 9749              		.loc 1 3800 5 is_stmt 0 view .LVU3553
 9750 0014 0446     		mov	r4, r0
 9751 0016 0028     		cmp	r0, #0
 9752 0018 40F08780 		bne	.L964
3801:source\fatfs/ff.c **** 		INIT_BUF(djo);
 9753              		.loc 1 3801 3 is_stmt 1 view .LVU3554
3801:source\fatfs/ff.c **** 		INIT_BUF(djo);
 9754              		.loc 1 3801 10 is_stmt 0 view .LVU3555
 9755 001c 8C9B     		ldr	r3, [sp, #560]
 9756 001e CDF85834 		str	r3, [sp, #1112]
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9757              		.loc 1 3802 3 is_stmt 1 view .LVU3556
 9758 0022 4FF40070 		mov	r0, #512
 9759              	.LVL1109:
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9760              		.loc 1 3802 3 is_stmt 0 view .LVU3557
 9761 0026 FFF7FEFF 		bl	ff_memalloc
 9762              	.LVL1110:
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9763              		.loc 1 3802 3 is_stmt 1 view .LVU3558
 9764 002a 0546     		mov	r5, r0
 9765 002c 0028     		cmp	r0, #0
 9766 002e 00F08880 		beq	.L969
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9767              		.loc 1 3802 3 discriminator 2 view .LVU3559
 9768 0032 9490     		str	r0, [sp, #592]
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9769              		.loc 1 3802 3 discriminator 2 view .LVU3560
 9770 0034 03AB     		add	r3, sp, #12
3803:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
 9771              		.loc 1 3803 9 is_stmt 0 discriminator 2 view .LVU3561
 9772 0036 0199     		ldr	r1, [sp, #4]
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9773              		.loc 1 3802 3 discriminator 2 view .LVU3562
 9774 0038 9293     		str	r3, [sp, #584]
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9775              		.loc 1 3802 16 is_stmt 1 discriminator 2 view .LVU3563
3803:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
 9776              		.loc 1 3803 3 discriminator 2 view .LVU3564
3803:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
 9777              		.loc 1 3803 9 is_stmt 0 discriminator 2 view .LVU3565
 9778 003a 0CA8     		add	r0, sp, #48
 9779              	.LVL1111:
3803:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
 9780              		.loc 1 3803 9 discriminator 2 view .LVU3566
 9781 003c FFF7FEFF 		bl	follow_path
 9782              	.LVL1112:
3804:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
 9783              		.loc 1 3804 3 is_stmt 1 discriminator 2 view .LVU3567
3807:source\fatfs/ff.c **** #endif
 9784              		.loc 1 3807 3 discriminator 2 view .LVU3568
3807:source\fatfs/ff.c **** #endif
 9785              		.loc 1 3807 6 is_stmt 0 discriminator 2 view .LVU3569
 9786 0040 0446     		mov	r4, r0
 9787 0042 0028     		cmp	r0, #0
 9788 0044 6ED1     		bne	.L965
3807:source\fatfs/ff.c **** #endif
 9789              		.loc 1 3807 21 is_stmt 1 discriminator 1 view .LVU3570
3807:source\fatfs/ff.c **** #endif
 9790              		.loc 1 3807 27 is_stmt 0 discriminator 1 view .LVU3571
 9791 0046 0221     		movs	r1, #2
 9792 0048 0CA8     		add	r0, sp, #48
 9793              	.LVL1113:
3807:source\fatfs/ff.c **** #endif
 9794              		.loc 1 3807 27 discriminator 1 view .LVU3572
 9795 004a FFF7FEFF 		bl	chk_lock
 9796              	.LVL1114:
3809:source\fatfs/ff.c **** 			if (!djo.dir) {						/* Is root dir? */
 9797              		.loc 1 3809 3 is_stmt 1 discriminator 1 view .LVU3573
3809:source\fatfs/ff.c **** 			if (!djo.dir) {						/* Is root dir? */
 9798              		.loc 1 3809 6 is_stmt 0 discriminator 1 view .LVU3574
 9799 004e 0446     		mov	r4, r0
 9800 0050 0028     		cmp	r0, #0
 9801 0052 67D1     		bne	.L965
3810:source\fatfs/ff.c **** 				res = FR_NO_FILE;
 9802              		.loc 1 3810 4 is_stmt 1 view .LVU3575
3810:source\fatfs/ff.c **** 				res = FR_NO_FILE;
 9803              		.loc 1 3810 12 is_stmt 0 view .LVU3576
 9804 0054 9199     		ldr	r1, [sp, #580]
3810:source\fatfs/ff.c **** 				res = FR_NO_FILE;
 9805              		.loc 1 3810 7 view .LVU3577
 9806 0056 0029     		cmp	r1, #0
 9807 0058 6BD0     		beq	.L970
3813:source\fatfs/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 9808              		.loc 1 3813 5 is_stmt 1 view .LVU3578
 9809 005a 1522     		movs	r2, #21
 9810 005c 0B31     		adds	r1, r1, #11
 9811 005e 06A8     		add	r0, sp, #24
 9812              	.LVL1115:
3813:source\fatfs/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 9813              		.loc 1 3813 5 is_stmt 0 view .LVU3579
 9814 0060 FFF7FEFF 		bl	mem_cpy
 9815              	.LVL1116:
3814:source\fatfs/ff.c **** 				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
 9816              		.loc 1 3814 5 is_stmt 1 view .LVU3580
 9817 0064 4FF40A72 		mov	r2, #552
 9818 0068 0CA9     		add	r1, sp, #48
 9819 006a 96A8     		add	r0, sp, #600
 9820 006c FFF7FEFF 		bl	mem_cpy
 9821              	.LVL1117:
3815:source\fatfs/ff.c **** 					res = follow_path(&djn, path_new);	/* and make sure if new object name is not conflicting */
 9822              		.loc 1 3815 5 view .LVU3581
3815:source\fatfs/ff.c **** 					res = follow_path(&djn, path_new);	/* and make sure if new object name is not conflicting */
 9823              		.loc 1 3815 9 is_stmt 0 view .LVU3582
 9824 0070 6846     		mov	r0, sp
 9825 0072 FFF7FEFF 		bl	get_ldnumber
 9826              	.LVL1118:
3815:source\fatfs/ff.c **** 					res = follow_path(&djn, path_new);	/* and make sure if new object name is not conflicting */
 9827              		.loc 1 3815 8 view .LVU3583
 9828 0076 0028     		cmp	r0, #0
 9829 0078 5DDB     		blt	.L971
3816:source\fatfs/ff.c **** 				else
 9830              		.loc 1 3816 6 is_stmt 1 view .LVU3584
3816:source\fatfs/ff.c **** 				else
 9831              		.loc 1 3816 12 is_stmt 0 view .LVU3585
 9832 007a 0099     		ldr	r1, [sp]
 9833 007c 96A8     		add	r0, sp, #600
 9834 007e FFF7FEFF 		bl	follow_path
 9835              	.LVL1119:
3819:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 9836              		.loc 1 3819 5 is_stmt 1 view .LVU3586
3819:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 9837              		.loc 1 3819 8 is_stmt 0 view .LVU3587
 9838 0082 0446     		mov	r4, r0
 9839 0084 0028     		cmp	r0, #0
 9840 0086 58D0     		beq	.L972
3820:source\fatfs/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 9841              		.loc 1 3820 5 is_stmt 1 view .LVU3588
3820:source\fatfs/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 9842              		.loc 1 3820 8 is_stmt 0 view .LVU3589
 9843 0088 0428     		cmp	r0, #4
 9844 008a 4BD1     		bne	.L965
3821:source\fatfs/ff.c **** 					if (res == FR_OK) {
 9845              		.loc 1 3821 6 is_stmt 1 view .LVU3590
3821:source\fatfs/ff.c **** 					if (res == FR_OK) {
 9846              		.loc 1 3821 12 is_stmt 0 view .LVU3591
 9847 008c 96A8     		add	r0, sp, #600
 9848              	.LVL1120:
3821:source\fatfs/ff.c **** 					if (res == FR_OK) {
 9849              		.loc 1 3821 12 view .LVU3592
 9850 008e FFF7FEFF 		bl	dir_register
 9851              	.LVL1121:
3822:source\fatfs/ff.c **** /* Start of critical section where any interruption can cause a cross-link */
 9852              		.loc 1 3822 6 is_stmt 1 view .LVU3593
3822:source\fatfs/ff.c **** /* Start of critical section where any interruption can cause a cross-link */
 9853              		.loc 1 3822 9 is_stmt 0 view .LVU3594
 9854 0092 0446     		mov	r4, r0
 9855 0094 0028     		cmp	r0, #0
 9856 0096 45D1     		bne	.L965
3824:source\fatfs/ff.c **** 						mem_cpy(dir + 13, buf + 2, 19);
 9857              		.loc 1 3824 7 is_stmt 1 view .LVU3595
3824:source\fatfs/ff.c **** 						mem_cpy(dir + 13, buf + 2, 19);
 9858              		.loc 1 3824 11 is_stmt 0 view .LVU3596
 9859 0098 DDF86C44 		ldr	r4, [sp, #1132]
 9860              	.LVL1122:
3825:source\fatfs/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 9861              		.loc 1 3825 7 is_stmt 1 view .LVU3597
 9862 009c 1322     		movs	r2, #19
 9863 009e 0DF11A01 		add	r1, sp, #26
 9864 00a2 04F10D00 		add	r0, r4, #13
 9865              	.LVL1123:
3825:source\fatfs/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 9866              		.loc 1 3825 7 is_stmt 0 view .LVU3598
 9867 00a6 FFF7FEFF 		bl	mem_cpy
 9868              	.LVL1124:
3826:source\fatfs/ff.c **** 						djo.fs->wflag = 1;
 9869              		.loc 1 3826 7 is_stmt 1 view .LVU3599
3826:source\fatfs/ff.c **** 						djo.fs->wflag = 1;
 9870              		.loc 1 3826 21 is_stmt 0 view .LVU3600
 9871 00aa 9DF81830 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
3827:source\fatfs/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.sclust != djn.sclust) {	/* Update .. entry in the sub-dir
 9872              		.loc 1 3827 10 view .LVU3601
 9873 00ae 8C9E     		ldr	r6, [sp, #560]
3826:source\fatfs/ff.c **** 						djo.fs->wflag = 1;
 9874              		.loc 1 3826 21 view .LVU3602
 9875 00b0 43F02003 		orr	r3, r3, #32
 9876 00b4 E372     		strb	r3, [r4, #11]
3827:source\fatfs/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.sclust != djn.sclust) {	/* Update .. entry in the sub-dir
 9877              		.loc 1 3827 7 is_stmt 1 view .LVU3603
3827:source\fatfs/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.sclust != djn.sclust) {	/* Update .. entry in the sub-dir
 9878              		.loc 1 3827 21 is_stmt 0 view .LVU3604
 9879 00b6 0123     		movs	r3, #1
 9880 00b8 86F80432 		strb	r3, [r6, #516]
3828:source\fatfs/ff.c **** 							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
 9881              		.loc 1 3828 7 is_stmt 1 view .LVU3605
3828:source\fatfs/ff.c **** 							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
 9882              		.loc 1 3828 10 is_stmt 0 view .LVU3606
 9883 00bc E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 9884 00be DB06     		lsls	r3, r3, #27
 9885 00c0 27D5     		bpl	.L967
3828:source\fatfs/ff.c **** 							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
 9886              		.loc 1 3828 56 discriminator 1 view .LVU3607
 9887 00c2 DDF86074 		ldr	r7, [sp, #1120]
3828:source\fatfs/ff.c **** 							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
 9888              		.loc 1 3828 36 discriminator 1 view .LVU3608
 9889 00c6 8E9B     		ldr	r3, [sp, #568]
 9890 00c8 BB42     		cmp	r3, r7
 9891 00ca 22D0     		beq	.L967
3829:source\fatfs/ff.c **** 							if (!dw) {
 9892              		.loc 1 3829 8 is_stmt 1 view .LVU3609
3829:source\fatfs/ff.c **** 							if (!dw) {
 9893              		.loc 1 3829 13 is_stmt 0 view .LVU3610
 9894 00cc 2146     		mov	r1, r4
 9895 00ce 96F80002 		ldrb	r0, [r6, #512]	@ zero_extendqisi2
 9896 00d2 FFF7FEFF 		bl	ld_clust.isra.0
 9897              	.LVL1125:
 9898 00d6 0146     		mov	r1, r0
 9899 00d8 3046     		mov	r0, r6
 9900 00da FFF7FEFF 		bl	clust2sect
 9901              	.LVL1126:
3830:source\fatfs/ff.c **** 								res = FR_INT_ERR;
 9902              		.loc 1 3830 8 is_stmt 1 view .LVU3611
3830:source\fatfs/ff.c **** 								res = FR_INT_ERR;
 9903              		.loc 1 3830 11 is_stmt 0 view .LVU3612
 9904 00de 0146     		mov	r1, r0
 9905 00e0 68B3     		cbz	r0, .L973
3833:source\fatfs/ff.c **** 								dir = djo.fs->win.d8 + SZ_DIRE * 1;	/* Ptr to .. entry */
 9906              		.loc 1 3833 9 is_stmt 1 view .LVU3613
3833:source\fatfs/ff.c **** 								dir = djo.fs->win.d8 + SZ_DIRE * 1;	/* Ptr to .. entry */
 9907              		.loc 1 3833 15 is_stmt 0 view .LVU3614
 9908 00e2 3046     		mov	r0, r6
 9909              	.LVL1127:
3833:source\fatfs/ff.c **** 								dir = djo.fs->win.d8 + SZ_DIRE * 1;	/* Ptr to .. entry */
 9910              		.loc 1 3833 15 view .LVU3615
 9911 00e4 FFF7FEFF 		bl	move_window
 9912              	.LVL1128:
3834:source\fatfs/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 9913              		.loc 1 3834 9 is_stmt 1 view .LVU3616
3835:source\fatfs/ff.c **** 									st_clust(dir, djn.sclust);
 9914              		.loc 1 3835 9 view .LVU3617
3835:source\fatfs/ff.c **** 									st_clust(dir, djn.sclust);
 9915              		.loc 1 3835 12 is_stmt 0 view .LVU3618
 9916 00e8 0446     		mov	r4, r0
 9917 00ea D8B9     		cbnz	r0, .L965
3835:source\fatfs/ff.c **** 									st_clust(dir, djn.sclust);
 9918              		.loc 1 3835 26 discriminator 1 view .LVU3619
 9919 00ec 96F82130 		ldrb	r3, [r6, #33]	@ zero_extendqisi2
 9920 00f0 2E2B     		cmp	r3, #46
 9921 00f2 0ED1     		bne	.L967
3836:source\fatfs/ff.c **** 									djo.fs->wflag = 1;
 9922              		.loc 1 3836 10 is_stmt 1 view .LVU3620
 9923              	.LVL1129:
 9924              	.LBB147:
 9925              	.LBI147:
1325:source\fatfs/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
 9926              		.loc 1 1325 6 view .LVU3621
 9927              	.LBB148:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9928              		.loc 1 1330 2 view .LVU3622
 9929 00f4 C7F30723 		ubfx	r3, r7, #8, #8
 9930 00f8 86F83A70 		strb	r7, [r6, #58]
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9931              		.loc 1 1330 2 view .LVU3623
1331:source\fatfs/ff.c **** }
 9932              		.loc 1 1331 2 is_stmt 0 view .LVU3624
 9933 00fc 3F0C     		lsrs	r7, r7, #16
 9934              	.LVL1130:
1330:source\fatfs/ff.c **** 	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 9935              		.loc 1 1330 2 view .LVU3625
 9936 00fe 86F83B30 		strb	r3, [r6, #59]
1331:source\fatfs/ff.c **** }
 9937              		.loc 1 1331 2 is_stmt 1 view .LVU3626
 9938 0102 86F83470 		strb	r7, [r6, #52]
1331:source\fatfs/ff.c **** }
 9939              		.loc 1 1331 2 view .LVU3627
 9940              	.LBE148:
 9941              	.LBE147:
3837:source\fatfs/ff.c **** 								}
 9942              		.loc 1 3837 24 is_stmt 0 view .LVU3628
 9943 0106 0123     		movs	r3, #1
 9944              	.LBB150:
 9945              	.LBB149:
1331:source\fatfs/ff.c **** }
 9946              		.loc 1 1331 2 view .LVU3629
 9947 0108 3F0A     		lsrs	r7, r7, #8
 9948 010a 86F83570 		strb	r7, [r6, #53]
 9949              	.LVL1131:
1331:source\fatfs/ff.c **** }
 9950              		.loc 1 1331 2 view .LVU3630
 9951              	.LBE149:
 9952              	.LBE150:
3837:source\fatfs/ff.c **** 								}
 9953              		.loc 1 3837 10 is_stmt 1 view .LVU3631
3837:source\fatfs/ff.c **** 								}
 9954              		.loc 1 3837 24 is_stmt 0 view .LVU3632
 9955 010e 86F80432 		strb	r3, [r6, #516]
 9956              	.LVL1132:
 9957              	.L967:
3841:source\fatfs/ff.c **** 							res = dir_remove(&djo);		/* Remove old entry */
 9958              		.loc 1 3841 7 is_stmt 1 view .LVU3633
3842:source\fatfs/ff.c **** 							if (res == FR_OK)
 9959              		.loc 1 3842 8 view .LVU3634
3842:source\fatfs/ff.c **** 							if (res == FR_OK)
 9960              		.loc 1 3842 14 is_stmt 0 view .LVU3635
 9961 0112 0CA8     		add	r0, sp, #48
 9962 0114 FFF7FEFF 		bl	dir_remove
 9963              	.LVL1133:
3843:source\fatfs/ff.c **** 								res = sync_fs(djo.fs);
 9964              		.loc 1 3843 8 is_stmt 1 view .LVU3636
3843:source\fatfs/ff.c **** 								res = sync_fs(djo.fs);
 9965              		.loc 1 3843 11 is_stmt 0 view .LVU3637
 9966 0118 0446     		mov	r4, r0
 9967 011a 18B9     		cbnz	r0, .L965
3844:source\fatfs/ff.c **** 						}
 9968              		.loc 1 3844 9 is_stmt 1 view .LVU3638
3844:source\fatfs/ff.c **** 						}
 9969              		.loc 1 3844 15 is_stmt 0 view .LVU3639
 9970 011c 8C98     		ldr	r0, [sp, #560]
 9971              	.LVL1134:
3844:source\fatfs/ff.c **** 						}
 9972              		.loc 1 3844 15 view .LVU3640
 9973 011e FFF7FEFF 		bl	sync_fs
 9974              	.LVL1135:
 9975 0122 0446     		mov	r4, r0
 9976              	.LVL1136:
 9977              	.L965:
3851:source\fatfs/ff.c **** 	}
 9978              		.loc 1 3851 3 is_stmt 1 view .LVU3641
 9979 0124 2846     		mov	r0, r5
 9980 0126 FFF7FEFF 		bl	ff_memfree
 9981              	.LVL1137:
 9982              	.L964:
3855:source\fatfs/ff.c **** 
 9983              		.loc 1 3855 1 is_stmt 0 view .LVU3642
 9984 012a 2046     		mov	r0, r4
 9985 012c 0DF2844D 		addw	sp, sp, #1156
 9986              		.cfi_remember_state
 9987              		.cfi_def_cfa_offset 20
 9988              		@ sp needed
 9989 0130 F0BD     		pop	{r4, r5, r6, r7, pc}
 9990              	.LVL1138:
 9991              	.L970:
 9992              		.cfi_restore_state
3811:source\fatfs/ff.c **** 			} else {
 9993              		.loc 1 3811 9 view .LVU3643
 9994 0132 0424     		movs	r4, #4
 9995 0134 F6E7     		b	.L965
 9996              	.LVL1139:
 9997              	.L971:
3818:source\fatfs/ff.c **** 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
 9998              		.loc 1 3818 10 view .LVU3644
 9999 0136 0B24     		movs	r4, #11
 10000 0138 F4E7     		b	.L965
 10001              	.LVL1140:
 10002              	.L972:
3819:source\fatfs/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 10003              		.loc 1 3819 27 view .LVU3645
 10004 013a 0824     		movs	r4, #8
 10005 013c F2E7     		b	.L965
 10006              	.LVL1141:
 10007              	.L973:
3831:source\fatfs/ff.c **** 							} else {
 10008              		.loc 1 3831 13 view .LVU3646
 10009 013e 0224     		movs	r4, #2
 10010              	.LVL1142:
3831:source\fatfs/ff.c **** 							} else {
 10011              		.loc 1 3831 13 view .LVU3647
 10012 0140 F0E7     		b	.L965
 10013              	.LVL1143:
 10014              	.L969:
3802:source\fatfs/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 10015              		.loc 1 3802 3 view .LVU3648
 10016 0142 1124     		movs	r4, #17
 10017 0144 F1E7     		b	.L964
 10018              		.cfi_endproc
 10019              	.LFE178:
 10021              		.section	.text.f_utime,"ax",%progbits
 10022              		.align	1
 10023              		.global	f_utime
 10024              		.syntax unified
 10025              		.thumb
 10026              		.thumb_func
 10028              	f_utime:
 10029              	.LVL1144:
 10030              	.LFB179:
3868:source\fatfs/ff.c **** 	FRESULT res;
 10031              		.loc 1 3868 1 is_stmt 1 view -0
 10032              		.cfi_startproc
 10033              		@ args = 0, pretend = 0, frame = 576
 10034              		@ frame_needed = 0, uses_anonymous_args = 0
3869:source\fatfs/ff.c **** 	DIR dj;
 10035              		.loc 1 3869 2 view .LVU3650
3870:source\fatfs/ff.c **** 	BYTE *dir;
 10036              		.loc 1 3870 2 view .LVU3651
3871:source\fatfs/ff.c **** 	DEFINE_NAMEBUF;
 10037              		.loc 1 3871 2 view .LVU3652
3872:source\fatfs/ff.c **** 
 10038              		.loc 1 3872 2 view .LVU3653
3872:source\fatfs/ff.c **** 
 10039              		.loc 1 3872 2 view .LVU3654
3876:source\fatfs/ff.c **** 	if (res == FR_OK) {
 10040              		.loc 1 3876 2 view .LVU3655
3868:source\fatfs/ff.c **** 	FRESULT res;
 10041              		.loc 1 3868 1 is_stmt 0 view .LVU3656
 10042 0000 70B5     		push	{r4, r5, r6, lr}
 10043              		.cfi_def_cfa_offset 16
 10044              		.cfi_offset 4, -16
 10045              		.cfi_offset 5, -12
 10046              		.cfi_offset 6, -8
 10047              		.cfi_offset 14, -4
 10048 0002 ADF5107D 		sub	sp, sp, #576
 10049              		.cfi_def_cfa_offset 592
3868:source\fatfs/ff.c **** 	FRESULT res;
 10050              		.loc 1 3868 1 view .LVU3657
 10051 0006 0D46     		mov	r5, r1
 10052 0008 0190     		str	r0, [sp, #4]
3876:source\fatfs/ff.c **** 	if (res == FR_OK) {
 10053              		.loc 1 3876 8 view .LVU3658
 10054 000a 0122     		movs	r2, #1
 10055 000c 01A9     		add	r1, sp, #4
 10056              	.LVL1145:
3876:source\fatfs/ff.c **** 	if (res == FR_OK) {
 10057              		.loc 1 3876 8 view .LVU3659
 10058 000e 86A8     		add	r0, sp, #536
 10059              	.LVL1146:
3876:source\fatfs/ff.c **** 	if (res == FR_OK) {
 10060              		.loc 1 3876 8 view .LVU3660
 10061 0010 FFF7FEFF 		bl	find_volume
 10062              	.LVL1147:
3877:source\fatfs/ff.c **** 		INIT_BUF(dj);
 10063              		.loc 1 3877 2 is_stmt 1 view .LVU3661
3877:source\fatfs/ff.c **** 		INIT_BUF(dj);
 10064              		.loc 1 3877 5 is_stmt 0 view .LVU3662
 10065 0014 0446     		mov	r4, r0
 10066 0016 20BB     		cbnz	r0, .L975
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10067              		.loc 1 3878 3 is_stmt 1 view .LVU3663
 10068 0018 4FF40070 		mov	r0, #512
 10069              	.LVL1148:
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10070              		.loc 1 3878 3 is_stmt 0 view .LVU3664
 10071 001c FFF7FEFF 		bl	ff_memalloc
 10072              	.LVL1149:
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10073              		.loc 1 3878 3 is_stmt 1 view .LVU3665
 10074 0020 0646     		mov	r6, r0
 10075 0022 10B3     		cbz	r0, .L976
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10076              		.loc 1 3878 3 discriminator 2 view .LVU3666
 10077 0024 8E90     		str	r0, [sp, #568]
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10078              		.loc 1 3878 3 discriminator 2 view .LVU3667
 10079 0026 03AB     		add	r3, sp, #12
3879:source\fatfs/ff.c **** 		FREE_BUF();
 10080              		.loc 1 3879 9 is_stmt 0 discriminator 2 view .LVU3668
 10081 0028 0199     		ldr	r1, [sp, #4]
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10082              		.loc 1 3878 3 discriminator 2 view .LVU3669
 10083 002a 8C93     		str	r3, [sp, #560]
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10084              		.loc 1 3878 15 is_stmt 1 discriminator 2 view .LVU3670
3879:source\fatfs/ff.c **** 		FREE_BUF();
 10085              		.loc 1 3879 3 discriminator 2 view .LVU3671
3879:source\fatfs/ff.c **** 		FREE_BUF();
 10086              		.loc 1 3879 9 is_stmt 0 discriminator 2 view .LVU3672
 10087 002c 06A8     		add	r0, sp, #24
 10088              	.LVL1150:
3879:source\fatfs/ff.c **** 		FREE_BUF();
 10089              		.loc 1 3879 9 discriminator 2 view .LVU3673
 10090 002e FFF7FEFF 		bl	follow_path
 10091              	.LVL1151:
 10092 0032 0446     		mov	r4, r0
 10093              	.LVL1152:
3880:source\fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 10094              		.loc 1 3880 3 is_stmt 1 discriminator 2 view .LVU3674
 10095 0034 3046     		mov	r0, r6
 10096 0036 FFF7FEFF 		bl	ff_memfree
 10097              	.LVL1153:
3881:source\fatfs/ff.c **** 			res = FR_INVALID_NAME;
 10098              		.loc 1 3881 3 discriminator 2 view .LVU3675
3883:source\fatfs/ff.c **** 			dir = dj.dir;
 10099              		.loc 1 3883 3 discriminator 2 view .LVU3676
3883:source\fatfs/ff.c **** 			dir = dj.dir;
 10100              		.loc 1 3883 6 is_stmt 0 discriminator 2 view .LVU3677
 10101 003a 94B9     		cbnz	r4, .L975
3884:source\fatfs/ff.c **** 			if (!dir) {					/* Root directory */
 10102              		.loc 1 3884 4 is_stmt 1 view .LVU3678
3884:source\fatfs/ff.c **** 			if (!dir) {					/* Root directory */
 10103              		.loc 1 3884 8 is_stmt 0 view .LVU3679
 10104 003c 8B9B     		ldr	r3, [sp, #556]
 10105              	.LVL1154:
3885:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
 10106              		.loc 1 3885 4 is_stmt 1 view .LVU3680
3885:source\fatfs/ff.c **** 				res = FR_INVALID_NAME;
 10107              		.loc 1 3885 7 is_stmt 0 view .LVU3681
 10108 003e B3B1     		cbz	r3, .L977
3888:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_WrtDate, fno->fdate);
 10109              		.loc 1 3888 5 is_stmt 1 view .LVU3682
 10110 0040 EA88     		ldrh	r2, [r5, #6]
 10111 0042 9A75     		strb	r2, [r3, #22]
3888:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_WrtDate, fno->fdate);
 10112              		.loc 1 3888 5 view .LVU3683
 10113 0044 EA88     		ldrh	r2, [r5, #6]
3890:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 10114              		.loc 1 3890 7 is_stmt 0 view .LVU3684
 10115 0046 8698     		ldr	r0, [sp, #536]
3888:source\fatfs/ff.c **** 				ST_WORD(dir + DIR_WrtDate, fno->fdate);
 10116              		.loc 1 3888 5 view .LVU3685
 10117 0048 120A     		lsrs	r2, r2, #8
 10118 004a DA75     		strb	r2, [r3, #23]
3889:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 10119              		.loc 1 3889 5 is_stmt 1 view .LVU3686
 10120 004c AA88     		ldrh	r2, [r5, #4]
 10121 004e 1A76     		strb	r2, [r3, #24]
3889:source\fatfs/ff.c **** 				dj.fs->wflag = 1;
 10122              		.loc 1 3889 5 view .LVU3687
 10123 0050 AA88     		ldrh	r2, [r5, #4]
 10124 0052 120A     		lsrs	r2, r2, #8
 10125 0054 5A76     		strb	r2, [r3, #25]
3890:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 10126              		.loc 1 3890 5 view .LVU3688
3890:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 10127              		.loc 1 3890 18 is_stmt 0 view .LVU3689
 10128 0056 0123     		movs	r3, #1
 10129              	.LVL1155:
3890:source\fatfs/ff.c **** 				res = sync_fs(dj.fs);
 10130              		.loc 1 3890 18 view .LVU3690
 10131 0058 80F80432 		strb	r3, [r0, #516]
3891:source\fatfs/ff.c **** 			}
 10132              		.loc 1 3891 5 is_stmt 1 view .LVU3691
3891:source\fatfs/ff.c **** 			}
 10133              		.loc 1 3891 11 is_stmt 0 view .LVU3692
 10134 005c FFF7FEFF 		bl	sync_fs
 10135              	.LVL1156:
3891:source\fatfs/ff.c **** 			}
 10136              		.loc 1 3891 11 view .LVU3693
 10137 0060 0446     		mov	r4, r0
 10138              	.LVL1157:
 10139              	.L975:
3897:source\fatfs/ff.c **** 
 10140              		.loc 1 3897 1 view .LVU3694
 10141 0062 2046     		mov	r0, r4
 10142 0064 0DF5107D 		add	sp, sp, #576
 10143              		.cfi_remember_state
 10144              		.cfi_def_cfa_offset 16
 10145              		@ sp needed
 10146 0068 70BD     		pop	{r4, r5, r6, pc}
 10147              	.LVL1158:
 10148              	.L976:
 10149              		.cfi_restore_state
3878:source\fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10150              		.loc 1 3878 3 view .LVU3695
 10151 006a 1124     		movs	r4, #17
 10152 006c F9E7     		b	.L975
 10153              	.LVL1159:
 10154              	.L977:
3886:source\fatfs/ff.c **** 			} else {					/* File or sub-directory */
 10155              		.loc 1 3886 9 view .LVU3696
 10156 006e 0624     		movs	r4, #6
 10157              	.LVL1160:
3886:source\fatfs/ff.c **** 			} else {					/* File or sub-directory */
 10158              		.loc 1 3886 9 view .LVU3697
 10159 0070 F7E7     		b	.L975
 10160              		.cfi_endproc
 10161              	.LFE179:
 10163              		.section	.rodata.f_mkfs.str1.1,"aMS",%progbits,1
 10164              	.LC2:
 10165 0000 EBFE904D 		.ascii	"\353\376\220MSDOS5.0\000"
 10165      53444F53 
 10165      352E3000 
 10166              	.LC3:
 10167 000c 4E4F204E 		.ascii	"NO NAME    FAT32   \000"
 10167      414D4520 
 10167      20202046 
 10167      41543332 
 10167      20202000 
 10168              	.LC4:
 10169 0020 4E4F204E 		.ascii	"NO NAME    FAT     \000"
 10169      414D4520 
 10169      20202046 
 10169      41542020 
 10169      20202000 
 10170              		.section	.text.f_mkfs,"ax",%progbits
 10171              		.align	1
 10172              		.global	f_mkfs
 10173              		.syntax unified
 10174              		.thumb
 10175              		.thumb_func
 10177              	f_mkfs:
 10178              	.LVL1161:
 10179              	.LFB180:
4143:source\fatfs/ff.c **** 	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
 10180              		.loc 1 4143 1 is_stmt 1 view -0
 10181              		.cfi_startproc
 10182              		@ args = 0, pretend = 0, frame = 24
 10183              		@ frame_needed = 0, uses_anonymous_args = 0
4144:source\fatfs/ff.c **** 	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
 10184              		.loc 1 4144 2 view .LVU3699
4145:source\fatfs/ff.c **** 	int vol;
 10185              		.loc 1 4145 2 view .LVU3700
4146:source\fatfs/ff.c **** 	BYTE fmt, md, sys, *tbl, pdrv, part;
 10186              		.loc 1 4146 2 view .LVU3701
4147:source\fatfs/ff.c **** 	DWORD n_clst, vs, n, wsect;
 10187              		.loc 1 4147 2 view .LVU3702
4148:source\fatfs/ff.c **** 	UINT i;
 10188              		.loc 1 4148 2 view .LVU3703
4149:source\fatfs/ff.c **** 	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
 10189              		.loc 1 4149 2 view .LVU3704
4150:source\fatfs/ff.c **** 	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
 10190              		.loc 1 4150 2 view .LVU3705
4151:source\fatfs/ff.c **** 	FATFS *fs;
 10191              		.loc 1 4151 2 view .LVU3706
4152:source\fatfs/ff.c **** 	DSTATUS stat;
 10192              		.loc 1 4152 2 view .LVU3707
4153:source\fatfs/ff.c **** #if _USE_TRIM
 10193              		.loc 1 4153 2 view .LVU3708
4160:source\fatfs/ff.c **** 	vol = get_ldnumber(&path);
 10194              		.loc 1 4160 2 view .LVU3709
4143:source\fatfs/ff.c **** 	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
 10195              		.loc 1 4143 1 is_stmt 0 view .LVU3710
 10196 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 10197              		.cfi_def_cfa_offset 36
 10198              		.cfi_offset 4, -36
 10199              		.cfi_offset 5, -32
 10200              		.cfi_offset 6, -28
 10201              		.cfi_offset 7, -24
 10202              		.cfi_offset 8, -20
 10203              		.cfi_offset 9, -16
 10204              		.cfi_offset 10, -12
 10205              		.cfi_offset 11, -8
 10206              		.cfi_offset 14, -4
 10207 0004 87B0     		sub	sp, sp, #28
 10208              		.cfi_def_cfa_offset 64
4160:source\fatfs/ff.c **** 	vol = get_ldnumber(&path);
 10209              		.loc 1 4160 5 view .LVU3711
 10210 0006 0129     		cmp	r1, #1
4143:source\fatfs/ff.c **** 	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
 10211              		.loc 1 4143 1 view .LVU3712
 10212 0008 0390     		str	r0, [sp, #12]
 10213 000a 8B46     		mov	fp, r1
 10214 000c 1646     		mov	r6, r2
4160:source\fatfs/ff.c **** 	vol = get_ldnumber(&path);
 10215              		.loc 1 4160 5 view .LVU3713
 10216 000e 00F29882 		bhi	.L1018
4161:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 10217              		.loc 1 4161 2 is_stmt 1 view .LVU3714
4161:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 10218              		.loc 1 4161 8 is_stmt 0 view .LVU3715
 10219 0012 03A8     		add	r0, sp, #12
 10220              	.LVL1162:
4161:source\fatfs/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 10221              		.loc 1 4161 8 view .LVU3716
 10222 0014 FFF7FEFF 		bl	get_ldnumber
 10223              	.LVL1163:
4162:source\fatfs/ff.c **** 	fs = FatFs[vol];
 10224              		.loc 1 4162 2 is_stmt 1 view .LVU3717
4162:source\fatfs/ff.c **** 	fs = FatFs[vol];
 10225              		.loc 1 4162 5 is_stmt 0 view .LVU3718
 10226 0018 071E     		subs	r7, r0, #0
 10227 001a C0F29482 		blt	.L1019
4163:source\fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;
 10228              		.loc 1 4163 2 is_stmt 1 view .LVU3719
4163:source\fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;
 10229              		.loc 1 4163 5 is_stmt 0 view .LVU3720
 10230 001e 5D4B     		ldr	r3, .L1036
 10231 0020 53F82740 		ldr	r4, [r3, r7, lsl #2]
 10232              	.LVL1164:
4164:source\fatfs/ff.c **** 	fs->fs_type = 0;
 10233              		.loc 1 4164 2 is_stmt 1 view .LVU3721
4164:source\fatfs/ff.c **** 	fs->fs_type = 0;
 10234              		.loc 1 4164 5 is_stmt 0 view .LVU3722
 10235 0024 002C     		cmp	r4, #0
 10236 0026 00F09082 		beq	.L1020
4165:source\fatfs/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
 10237              		.loc 1 4165 2 is_stmt 1 view .LVU3723
4165:source\fatfs/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
 10238              		.loc 1 4165 14 is_stmt 0 view .LVU3724
 10239 002a 0023     		movs	r3, #0
4166:source\fatfs/ff.c **** 	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
 10240              		.loc 1 4166 7 view .LVU3725
 10241 002c FFB2     		uxtb	r7, r7
4165:source\fatfs/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
 10242              		.loc 1 4165 14 view .LVU3726
 10243 002e 84F80032 		strb	r3, [r4, #512]
4166:source\fatfs/ff.c **** 	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
 10244              		.loc 1 4166 2 is_stmt 1 view .LVU3727
 10245              	.LVL1165:
4167:source\fatfs/ff.c **** 
 10246              		.loc 1 4167 2 view .LVU3728
4170:source\fatfs/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 10247              		.loc 1 4170 2 view .LVU3729
4170:source\fatfs/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 10248              		.loc 1 4170 9 is_stmt 0 view .LVU3730
 10249 0032 3846     		mov	r0, r7
 10250              	.LVL1166:
4170:source\fatfs/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 10251              		.loc 1 4170 9 view .LVU3731
 10252 0034 FFF7FEFF 		bl	disk_initialize
 10253              	.LVL1167:
4171:source\fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 10254              		.loc 1 4171 2 is_stmt 1 view .LVU3732
4171:source\fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 10255              		.loc 1 4171 5 is_stmt 0 view .LVU3733
 10256 0038 C207     		lsls	r2, r0, #31
 10257 003a 00F18882 		bmi	.L1021
4172:source\fatfs/ff.c **** #if _MAX_SS != _MIN_SS		/* Get disk sector size */
 10258              		.loc 1 4172 2 is_stmt 1 view .LVU3734
4172:source\fatfs/ff.c **** #if _MAX_SS != _MIN_SS		/* Get disk sector size */
 10259              		.loc 1 4172 5 is_stmt 0 view .LVU3735
 10260 003e 4307     		lsls	r3, r0, #29
 10261 0040 00F18782 		bmi	.L1022
4177:source\fatfs/ff.c **** 		/* Get partition information from partition table in the MBR */
 10262              		.loc 1 4177 2 is_stmt 1 view .LVU3736
4187:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10263              		.loc 1 4187 3 view .LVU3737
4187:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10264              		.loc 1 4187 7 is_stmt 0 view .LVU3738
 10265 0044 05AA     		add	r2, sp, #20
 10266 0046 0121     		movs	r1, #1
 10267 0048 3846     		mov	r0, r7
 10268              	.LVL1168:
4187:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10269              		.loc 1 4187 7 view .LVU3739
 10270 004a FFF7FEFF 		bl	disk_ioctl
 10271              	.LVL1169:
4187:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10272              		.loc 1 4187 6 view .LVU3740
 10273 004e 18B1     		cbz	r0, .L980
 10274              	.LVL1170:
 10275              	.L981:
4353:source\fatfs/ff.c **** 	} while (--i);
 10276              		.loc 1 4353 11 view .LVU3741
 10277 0050 0120     		movs	r0, #1
 10278              	.LVL1171:
 10279              	.L979:
4375:source\fatfs/ff.c **** 
 10280              		.loc 1 4375 1 view .LVU3742
 10281 0052 07B0     		add	sp, sp, #28
 10282              		.cfi_remember_state
 10283              		.cfi_def_cfa_offset 36
 10284              		@ sp needed
 10285 0054 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 10286              	.LVL1172:
 10287              	.L980:
 10288              		.cfi_restore_state
4187:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10289              		.loc 1 4187 69 discriminator 1 view .LVU3743
 10290 0058 0599     		ldr	r1, [sp, #20]
4187:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10291              		.loc 1 4187 60 discriminator 1 view .LVU3744
 10292 005a 7F29     		cmp	r1, #127
 10293 005c F8D9     		bls	.L981
4189:source\fatfs/ff.c **** 		n_vol -= b_vol;				/* Volume size */
 10294              		.loc 1 4189 3 is_stmt 1 view .LVU3745
4189:source\fatfs/ff.c **** 		n_vol -= b_vol;				/* Volume size */
 10295              		.loc 1 4189 21 is_stmt 0 view .LVU3746
 10296 005e BBF1000F 		cmp	fp, #0
 10297 0062 14BF     		ite	ne
 10298 0064 4FF00009 		movne	r9, #0
 10299 0068 4FF03F09 		moveq	r9, #63
 10300              	.LVL1173:
4190:source\fatfs/ff.c **** 	}
 10301              		.loc 1 4190 3 is_stmt 1 view .LVU3747
4193:source\fatfs/ff.c **** 	if (!au) {						/* AU auto selection */
 10302              		.loc 1 4193 15 is_stmt 0 view .LVU3748
 10303 006c 731E     		subs	r3, r6, #1
4190:source\fatfs/ff.c **** 	}
 10304              		.loc 1 4190 9 view .LVU3749
 10305 006e A1EB0901 		sub	r1, r1, r9
4193:source\fatfs/ff.c **** 	if (!au) {						/* AU auto selection */
 10306              		.loc 1 4193 5 view .LVU3750
 10307 0072 3342     		tst	r3, r6
4190:source\fatfs/ff.c **** 	}
 10308              		.loc 1 4190 9 view .LVU3751
 10309 0074 0591     		str	r1, [sp, #20]
4193:source\fatfs/ff.c **** 	if (!au) {						/* AU auto selection */
 10310              		.loc 1 4193 2 is_stmt 1 view .LVU3752
4193:source\fatfs/ff.c **** 	if (!au) {						/* AU auto selection */
 10311              		.loc 1 4193 5 is_stmt 0 view .LVU3753
 10312 0076 28D1     		bne	.L983
4194:source\fatfs/ff.c **** 		vs = n_vol / (2000 / (SS(fs) / 512));
 10313              		.loc 1 4194 2 is_stmt 1 view .LVU3754
4194:source\fatfs/ff.c **** 		vs = n_vol / (2000 / (SS(fs) / 512));
 10314              		.loc 1 4194 5 is_stmt 0 view .LVU3755
 10315 0078 3EB3     		cbz	r6, .L983
4199:source\fatfs/ff.c **** 	if (!au) au = 1;
 10316              		.loc 1 4199 2 is_stmt 1 view .LVU3756
4199:source\fatfs/ff.c **** 	if (!au) au = 1;
 10317              		.loc 1 4199 5 is_stmt 0 view .LVU3757
 10318 007a B6F5007F 		cmp	r6, #512
 10319 007e 34D2     		bcs	.L984
 10320              	.L985:
4201:source\fatfs/ff.c **** 
 10321              		.loc 1 4201 2 is_stmt 1 view .LVU3758
4201:source\fatfs/ff.c **** 
 10322              		.loc 1 4201 5 is_stmt 0 view .LVU3759
 10323 0080 802E     		cmp	r6, #128
 10324 0082 28BF     		it	cs
 10325 0084 8026     		movcs	r6, #128
 10326              	.LVL1174:
 10327              	.L989:
4204:source\fatfs/ff.c **** 	fmt = FS_FAT12;
 10328              		.loc 1 4204 2 is_stmt 1 view .LVU3760
4206:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 10329              		.loc 1 4206 5 is_stmt 0 view .LVU3761
 10330 0086 40F6F573 		movw	r3, #4085
4204:source\fatfs/ff.c **** 	fmt = FS_FAT12;
 10331              		.loc 1 4204 9 view .LVU3762
 10332 008a B1FBF6F5 		udiv	r5, r1, r6
 10333              	.LVL1175:
4205:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 10334              		.loc 1 4205 2 is_stmt 1 view .LVU3763
4206:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 10335              		.loc 1 4206 2 view .LVU3764
4206:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 10336              		.loc 1 4206 5 is_stmt 0 view .LVU3765
 10337 008e 9D42     		cmp	r5, r3
 10338 0090 33D9     		bls	.L990
4206:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 10339              		.loc 1 4206 27 is_stmt 1 view .LVU3766
 10340              	.LVL1176:
4207:source\fatfs/ff.c **** 
 10341              		.loc 1 4207 2 view .LVU3767
4207:source\fatfs/ff.c **** 
 10342              		.loc 1 4207 5 is_stmt 0 view .LVU3768
 10343 0092 4FF6F573 		movw	r3, #65525
 10344 0096 9D42     		cmp	r5, r3
 10345 0098 3ED9     		bls	.L991
4207:source\fatfs/ff.c **** 
 10346              		.loc 1 4207 27 is_stmt 1 view .LVU3769
 10347              	.LVL1177:
4210:source\fatfs/ff.c **** 		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 10348              		.loc 1 4210 2 view .LVU3770
4211:source\fatfs/ff.c **** 		n_rsv = 32;
 10349              		.loc 1 4211 3 view .LVU3771
4211:source\fatfs/ff.c **** 		n_rsv = 32;
 10350              		.loc 1 4211 29 is_stmt 0 view .LVU3772
 10351 009a AD00     		lsls	r5, r5, #2
 10352              	.LVL1178:
4211:source\fatfs/ff.c **** 		n_rsv = 32;
 10353              		.loc 1 4211 38 view .LVU3773
 10354 009c 05F20725 		addw	r5, r5, #519
4213:source\fatfs/ff.c **** 	} else {
 10355              		.loc 1 4213 9 view .LVU3774
 10356 00a0 0023     		movs	r3, #0
4211:source\fatfs/ff.c **** 		n_rsv = 32;
 10357              		.loc 1 4211 9 view .LVU3775
 10358 00a2 6D0A     		lsrs	r5, r5, #9
 10359              	.LVL1179:
4212:source\fatfs/ff.c **** 		n_dir = 0;
 10360              		.loc 1 4212 3 is_stmt 1 view .LVU3776
4213:source\fatfs/ff.c **** 	} else {
 10361              		.loc 1 4213 3 view .LVU3777
4207:source\fatfs/ff.c **** 
 10362              		.loc 1 4207 31 is_stmt 0 view .LVU3778
 10363 00a4 4FF00308 		mov	r8, #3
4213:source\fatfs/ff.c **** 	} else {
 10364              		.loc 1 4213 9 view .LVU3779
 10365 00a8 0193     		str	r3, [sp, #4]
4212:source\fatfs/ff.c **** 		n_dir = 0;
 10366              		.loc 1 4212 9 view .LVU3780
 10367 00aa 4FF0200A 		mov	r10, #32
 10368              	.LVL1180:
 10369              	.L992:
4220:source\fatfs/ff.c **** 	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
 10370              		.loc 1 4220 2 is_stmt 1 view .LVU3781
4220:source\fatfs/ff.c **** 	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
 10371              		.loc 1 4220 8 is_stmt 0 view .LVU3782
 10372 00ae 0AEB0903 		add	r3, r10, r9
 10373 00b2 0093     		str	r3, [sp]
 10374              	.LVL1181:
4221:source\fatfs/ff.c **** 	b_data = b_dir + n_dir;				/* Data area start sector */
 10375              		.loc 1 4221 2 is_stmt 1 view .LVU3783
4222:source\fatfs/ff.c **** 	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 10376              		.loc 1 4222 2 view .LVU3784
4222:source\fatfs/ff.c **** 	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 10377              		.loc 1 4222 9 is_stmt 0 view .LVU3785
 10378 00b4 019B     		ldr	r3, [sp, #4]
 10379              	.LVL1182:
4222:source\fatfs/ff.c **** 	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 10380              		.loc 1 4222 9 view .LVU3786
 10381 00b6 009A     		ldr	r2, [sp]
 10382 00b8 EB18     		adds	r3, r5, r3
 10383 00ba 1344     		add	r3, r3, r2
 10384              	.LVL1183:
4223:source\fatfs/ff.c **** 
 10385              		.loc 1 4223 2 is_stmt 1 view .LVU3787
4223:source\fatfs/ff.c **** 
 10386              		.loc 1 4223 26 is_stmt 0 view .LVU3788
 10387 00bc A6EB0902 		sub	r2, r6, r9
 10388 00c0 1A44     		add	r2, r2, r3
4223:source\fatfs/ff.c **** 
 10389              		.loc 1 4223 5 view .LVU3789
 10390 00c2 9142     		cmp	r1, r2
 10391 00c4 2DD2     		bcs	.L994
 10392              	.LVL1184:
 10393              	.L1000:
4223:source\fatfs/ff.c **** 
 10394              		.loc 1 4223 42 view .LVU3790
 10395 00c6 0E20     		movs	r0, #14
 10396 00c8 C3E7     		b	.L979
 10397              	.LVL1185:
 10398              	.L983:
4195:source\fatfs/ff.c **** 		for (i = 0; vs < vst[i]; i++) ;
 10399              		.loc 1 4195 3 is_stmt 1 view .LVU3791
 10400 00ca 3348     		ldr	r0, .L1036+4
4196:source\fatfs/ff.c **** 		au = cst[i];
 10401              		.loc 1 4196 10 is_stmt 0 view .LVU3792
 10402 00cc 0023     		movs	r3, #0
4195:source\fatfs/ff.c **** 		for (i = 0; vs < vst[i]; i++) ;
 10403              		.loc 1 4195 6 view .LVU3793
 10404 00ce 4FF4FA62 		mov	r2, #2000
 10405 00d2 B1FBF2F2 		udiv	r2, r1, r2
 10406              	.LVL1186:
4196:source\fatfs/ff.c **** 		au = cst[i];
 10407              		.loc 1 4196 3 is_stmt 1 view .LVU3794
 10408              	.L986:
4196:source\fatfs/ff.c **** 		au = cst[i];
 10409              		.loc 1 4196 18 discriminator 1 view .LVU3795
4196:source\fatfs/ff.c **** 		au = cst[i];
 10410              		.loc 1 4196 23 is_stmt 0 discriminator 1 view .LVU3796
 10411 00d6 30F8025B 		ldrh	r5, [r0], #2
4196:source\fatfs/ff.c **** 		au = cst[i];
 10412              		.loc 1 4196 18 discriminator 1 view .LVU3797
 10413 00da AA42     		cmp	r2, r5
 10414 00dc 07D3     		bcc	.L987
4197:source\fatfs/ff.c **** 	}
 10415              		.loc 1 4197 3 is_stmt 1 view .LVU3798
4197:source\fatfs/ff.c **** 	}
 10416              		.loc 1 4197 11 is_stmt 0 view .LVU3799
 10417 00de 2F4A     		ldr	r2, .L1036+8
 10418              	.LVL1187:
4197:source\fatfs/ff.c **** 	}
 10419              		.loc 1 4197 6 view .LVU3800
 10420 00e0 32F81360 		ldrh	r6, [r2, r3, lsl #1]
 10421              	.LVL1188:
4199:source\fatfs/ff.c **** 	if (!au) au = 1;
 10422              		.loc 1 4199 2 is_stmt 1 view .LVU3801
4199:source\fatfs/ff.c **** 	if (!au) au = 1;
 10423              		.loc 1 4199 5 is_stmt 0 view .LVU3802
 10424 00e4 B6F5007F 		cmp	r6, #512
 10425 00e8 03D3     		bcc	.L988
 10426              	.LVL1189:
 10427              	.L984:
4199:source\fatfs/ff.c **** 	if (!au) au = 1;
 10428              		.loc 1 4199 21 is_stmt 1 view .LVU3803
4199:source\fatfs/ff.c **** 	if (!au) au = 1;
 10429              		.loc 1 4199 24 is_stmt 0 view .LVU3804
 10430 00ea 760A     		lsrs	r6, r6, #9
 10431              	.LVL1190:
4200:source\fatfs/ff.c **** 	if (au > 128) au = 128;
 10432              		.loc 1 4200 2 is_stmt 1 view .LVU3805
 10433 00ec C8E7     		b	.L985
 10434              	.LVL1191:
 10435              	.L987:
4196:source\fatfs/ff.c **** 		au = cst[i];
 10436              		.loc 1 4196 29 discriminator 3 view .LVU3806
 10437 00ee 0133     		adds	r3, r3, #1
 10438              	.LVL1192:
4196:source\fatfs/ff.c **** 		au = cst[i];
 10439              		.loc 1 4196 29 is_stmt 0 discriminator 3 view .LVU3807
 10440 00f0 F1E7     		b	.L986
 10441              	.LVL1193:
 10442              	.L988:
4200:source\fatfs/ff.c **** 	if (au > 128) au = 128;
 10443              		.loc 1 4200 2 is_stmt 1 view .LVU3808
4200:source\fatfs/ff.c **** 	if (au > 128) au = 128;
 10444              		.loc 1 4200 5 is_stmt 0 view .LVU3809
 10445 00f2 002E     		cmp	r6, #0
 10446 00f4 C4D1     		bne	.L985
4200:source\fatfs/ff.c **** 	if (au > 128) au = 128;
 10447              		.loc 1 4200 14 view .LVU3810
 10448 00f6 0126     		movs	r6, #1
 10449              	.LVL1194:
4200:source\fatfs/ff.c **** 	if (au > 128) au = 128;
 10450              		.loc 1 4200 14 view .LVU3811
 10451 00f8 C5E7     		b	.L989
 10452              	.LVL1195:
 10453              	.L990:
4210:source\fatfs/ff.c **** 		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 10454              		.loc 1 4210 2 is_stmt 1 view .LVU3812
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 10455              		.loc 1 4215 3 view .LVU3813
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 10456              		.loc 1 4215 39 is_stmt 0 view .LVU3814
 10457 00fa 05EB4505 		add	r5, r5, r5, lsl #1
 10458              	.LVL1196:
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 10459              		.loc 1 4215 43 view .LVU3815
 10460 00fe 0135     		adds	r5, r5, #1
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 10461              		.loc 1 4215 48 view .LVU3816
 10462 0100 6D08     		lsrs	r5, r5, #1
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 10463              		.loc 1 4215 56 view .LVU3817
 10464 0102 0335     		adds	r5, r5, #3
4205:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 10465              		.loc 1 4205 6 view .LVU3818
 10466 0104 4FF00108 		mov	r8, #1
 10467              	.LVL1197:
 10468              	.L993:
4216:source\fatfs/ff.c **** 		n_rsv = 1;
 10469              		.loc 1 4216 3 is_stmt 1 discriminator 4 view .LVU3819
4216:source\fatfs/ff.c **** 		n_rsv = 1;
 10470              		.loc 1 4216 27 is_stmt 0 discriminator 4 view .LVU3820
 10471 0108 05F2FF15 		addw	r5, r5, #511
 10472              	.LVL1198:
4218:source\fatfs/ff.c **** 	}
 10473              		.loc 1 4218 9 discriminator 4 view .LVU3821
 10474 010c 2023     		movs	r3, #32
4216:source\fatfs/ff.c **** 		n_rsv = 1;
 10475              		.loc 1 4216 9 discriminator 4 view .LVU3822
 10476 010e 6D0A     		lsrs	r5, r5, #9
 10477              	.LVL1199:
4217:source\fatfs/ff.c **** 		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
 10478              		.loc 1 4217 3 is_stmt 1 discriminator 4 view .LVU3823
4218:source\fatfs/ff.c **** 	}
 10479              		.loc 1 4218 3 discriminator 4 view .LVU3824
4218:source\fatfs/ff.c **** 	}
 10480              		.loc 1 4218 9 is_stmt 0 discriminator 4 view .LVU3825
 10481 0110 0193     		str	r3, [sp, #4]
4217:source\fatfs/ff.c **** 		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
 10482              		.loc 1 4217 9 discriminator 4 view .LVU3826
 10483 0112 4FF0010A 		mov	r10, #1
 10484 0116 CAE7     		b	.L992
 10485              	.LVL1200:
 10486              	.L991:
4210:source\fatfs/ff.c **** 		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 10487              		.loc 1 4210 2 is_stmt 1 view .LVU3827
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 10488              		.loc 1 4215 3 view .LVU3828
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 10489              		.loc 1 4215 71 is_stmt 0 view .LVU3829
 10490 0118 0235     		adds	r5, r5, #2
 10491              	.LVL1201:
4215:source\fatfs/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 10492              		.loc 1 4215 56 view .LVU3830
 10493 011a 6D00     		lsls	r5, r5, #1
 10494              	.LVL1202:
4206:source\fatfs/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 10495              		.loc 1 4206 31 view .LVU3831
 10496 011c 4FF00208 		mov	r8, #2
 10497 0120 F2E7     		b	.L993
 10498              	.LVL1203:
 10499              	.L994:
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10500              		.loc 1 4226 6 view .LVU3832
 10501 0122 04AA     		add	r2, sp, #16
 10502 0124 0321     		movs	r1, #3
 10503              	.LVL1204:
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10504              		.loc 1 4226 6 view .LVU3833
 10505 0126 3846     		mov	r0, r7
 10506 0128 0293     		str	r3, [sp, #8]
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10507              		.loc 1 4226 2 is_stmt 1 view .LVU3834
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10508              		.loc 1 4226 6 is_stmt 0 view .LVU3835
 10509 012a FFF7FEFF 		bl	disk_ioctl
 10510              	.LVL1205:
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10511              		.loc 1 4226 5 view .LVU3836
 10512 012e 029B     		ldr	r3, [sp, #8]
 10513 0130 20B9     		cbnz	r0, .L995
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10514              		.loc 1 4226 53 discriminator 2 view .LVU3837
 10515 0132 049A     		ldr	r2, [sp, #16]
 10516 0134 013A     		subs	r2, r2, #1
 10517 0136 B2F5004F 		cmp	r2, #32768
 10518 013a 01D3     		bcc	.L996
 10519              	.L995:
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10520              		.loc 1 4226 73 is_stmt 1 discriminator 5 view .LVU3838
4226:source\fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 10521              		.loc 1 4226 75 is_stmt 0 discriminator 5 view .LVU3839
 10522 013c 0122     		movs	r2, #1
 10523 013e 0492     		str	r2, [sp, #16]
 10524              	.L996:
4227:source\fatfs/ff.c **** 	n = (n - b_data) / N_FATS;
 10525              		.loc 1 4227 2 is_stmt 1 view .LVU3840
4227:source\fatfs/ff.c **** 	n = (n - b_data) / N_FATS;
 10526              		.loc 1 4227 14 is_stmt 0 view .LVU3841
 10527 0140 0499     		ldr	r1, [sp, #16]
4228:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 10528              		.loc 1 4228 2 is_stmt 1 view .LVU3842
4227:source\fatfs/ff.c **** 	n = (n - b_data) / N_FATS;
 10529              		.loc 1 4227 18 is_stmt 0 view .LVU3843
 10530 0142 4A1E     		subs	r2, r1, #1
 10531 0144 1A44     		add	r2, r2, r3
4227:source\fatfs/ff.c **** 	n = (n - b_data) / N_FATS;
 10532              		.loc 1 4227 25 view .LVU3844
 10533 0146 4942     		rsbs	r1, r1, #0
4229:source\fatfs/ff.c **** 		n_rsv += n;
 10534              		.loc 1 4229 5 view .LVU3845
 10535 0148 B8F1030F 		cmp	r8, #3
4227:source\fatfs/ff.c **** 	n = (n - b_data) / N_FATS;
 10536              		.loc 1 4227 23 view .LVU3846
 10537 014c 02EA0102 		and	r2, r2, r1
4228:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 10538              		.loc 1 4228 9 view .LVU3847
 10539 0150 A2EB0303 		sub	r3, r2, r3
4231:source\fatfs/ff.c **** 	} else {					/* FAT12/16: Expand FAT size */
 10540              		.loc 1 4231 9 view .LVU3848
 10541 0154 08BF     		it	eq
 10542 0156 009A     		ldreq	r2, [sp]
4228:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 10543              		.loc 1 4228 4 view .LVU3849
 10544 0158 0493     		str	r3, [sp, #16]
4229:source\fatfs/ff.c **** 		n_rsv += n;
 10545              		.loc 1 4229 2 is_stmt 1 view .LVU3850
4230:source\fatfs/ff.c **** 		b_fat += n;
 10546              		.loc 1 4230 3 view .LVU3851
4231:source\fatfs/ff.c **** 	} else {					/* FAT12/16: Expand FAT size */
 10547              		.loc 1 4231 9 is_stmt 0 view .LVU3852
 10548 015a 05BF     		ittet	eq
 10549 015c D218     		addeq	r2, r2, r3
4230:source\fatfs/ff.c **** 		b_fat += n;
 10550              		.loc 1 4230 9 view .LVU3853
 10551 015e 9A44     		addeq	r10, r10, r3
 10552              	.LVL1206:
4231:source\fatfs/ff.c **** 	} else {					/* FAT12/16: Expand FAT size */
 10553              		.loc 1 4231 3 is_stmt 1 view .LVU3854
4233:source\fatfs/ff.c **** 	}
 10554              		.loc 1 4233 9 is_stmt 0 view .LVU3855
 10555 0160 ED18     		addne	r5, r5, r3
 10556              	.LVL1207:
4231:source\fatfs/ff.c **** 	} else {					/* FAT12/16: Expand FAT size */
 10557              		.loc 1 4231 9 view .LVU3856
 10558 0162 0092     		streq	r2, [sp]
 10559              	.LVL1208:
4233:source\fatfs/ff.c **** 	}
 10560              		.loc 1 4233 3 is_stmt 1 view .LVU3857
4237:source\fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 10561              		.loc 1 4237 2 view .LVU3858
4237:source\fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 10562              		.loc 1 4237 43 is_stmt 0 view .LVU3859
 10563 0164 019B     		ldr	r3, [sp, #4]
4237:source\fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 10564              		.loc 1 4237 18 view .LVU3860
 10565 0166 059A     		ldr	r2, [sp, #20]
4237:source\fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 10566              		.loc 1 4237 43 view .LVU3861
 10567 0168 D31A     		subs	r3, r2, r3
 10568 016a A3EB0A03 		sub	r3, r3, r10
4238:source\fatfs/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 10569              		.loc 1 4238 5 view .LVU3862
 10570 016e B8F1020F 		cmp	r8, #2
4237:source\fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 10571              		.loc 1 4237 43 view .LVU3863
 10572 0172 A3EB0503 		sub	r3, r3, r5
4237:source\fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 10573              		.loc 1 4237 9 view .LVU3864
 10574 0176 B3FBF6F3 		udiv	r3, r3, r6
 10575 017a 0293     		str	r3, [sp, #8]
 10576              	.LVL1209:
4238:source\fatfs/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 10577              		.loc 1 4238 2 is_stmt 1 view .LVU3865
4238:source\fatfs/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 10578              		.loc 1 4238 5 is_stmt 0 view .LVU3866
 10579 017c 10D1     		bne	.L999
4238:source\fatfs/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 10580              		.loc 1 4238 26 discriminator 1 view .LVU3867
 10581 017e 0299     		ldr	r1, [sp, #8]
 10582 0180 40F6F573 		movw	r3, #4085
 10583              	.LVL1210:
4238:source\fatfs/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 10584              		.loc 1 4238 26 discriminator 1 view .LVU3868
 10585 0184 9942     		cmp	r1, r3
 10586 0186 9ED9     		bls	.L1000
4246:source\fatfs/ff.c **** 			sys = 0x01;	/* FAT12(<65536) */
 10587              		.loc 1 4246 3 is_stmt 1 view .LVU3869
4249:source\fatfs/ff.c **** 		}
 10588              		.loc 1 4249 4 view .LVU3870
4249:source\fatfs/ff.c **** 		}
 10589              		.loc 1 4249 8 is_stmt 0 view .LVU3871
 10590 0188 B2F5803F 		cmp	r2, #65536
 10591 018c 2CBF     		ite	cs
 10592 018e 0623     		movcs	r3, #6
 10593 0190 0423     		movcc	r3, #4
 10594 0192 0FE0     		b	.L1003
 10595              	.L1037:
 10596              		.align	2
 10597              	.L1036:
 10598 0194 00000000 		.word	FatFs
 10599 0198 00000000 		.word	vst.1
 10600 019c 00000000 		.word	cst.0
 10601              	.LVL1211:
 10602              	.L999:
4239:source\fatfs/ff.c **** 		return FR_MKFS_ABORTED;
 10603              		.loc 1 4239 3 view .LVU3872
 10604 01a0 B8F1030F 		cmp	r8, #3
 10605 01a4 40F06D81 		bne	.L1002
 10606              	.LVL1212:
4239:source\fatfs/ff.c **** 		return FR_MKFS_ABORTED;
 10607              		.loc 1 4239 23 discriminator 1 view .LVU3873
 10608 01a8 029A     		ldr	r2, [sp, #8]
 10609 01aa 4FF6F573 		movw	r3, #65525
 10610 01ae 9A42     		cmp	r2, r3
 10611 01b0 89D9     		bls	.L1000
4244:source\fatfs/ff.c **** 	} else {
 10612              		.loc 1 4244 7 view .LVU3874
 10613 01b2 0C23     		movs	r3, #12
 10614              	.L1003:
 10615              	.LVL1213:
4253:source\fatfs/ff.c **** 		/* Update system ID in the partition table */
 10616              		.loc 1 4253 2 is_stmt 1 view .LVU3875
4261:source\fatfs/ff.c **** 			md = 0xF0;
 10617              		.loc 1 4261 3 view .LVU3876
4261:source\fatfs/ff.c **** 			md = 0xF0;
 10618              		.loc 1 4261 6 is_stmt 0 view .LVU3877
 10619 01b4 BBF1000F 		cmp	fp, #0
 10620 01b8 40F06981 		bne	.L1027
4264:source\fatfs/ff.c **** 			tbl = fs->win.d8 + MBR_Table;	/* Create partition table for single partition in the drive */
 10621              		.loc 1 4264 4 is_stmt 1 view .LVU3878
 10622 01bc 4FF40072 		mov	r2, #512
 10623 01c0 5946     		mov	r1, fp
 10624 01c2 2046     		mov	r0, r4
 10625 01c4 FFF7FEFF 		bl	mem_set
 10626              	.LVL1214:
4265:source\fatfs/ff.c **** 			tbl[1] = 1;						/* Partition start head */
 10627              		.loc 1 4265 4 view .LVU3879
4266:source\fatfs/ff.c **** 			tbl[2] = 1;						/* Partition start sector */
 10628              		.loc 1 4266 4 view .LVU3880
4271:source\fatfs/ff.c **** 			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 10629              		.loc 1 4271 15 is_stmt 0 view .LVU3881
 10630 01c8 059A     		ldr	r2, [sp, #20]
4269:source\fatfs/ff.c **** 			tbl[5] = 254;					/* Partition end head */
 10631              		.loc 1 4269 11 view .LVU3882
 10632 01ca 84F8C231 		strb	r3, [r4, #450]
4270:source\fatfs/ff.c **** 			n = (b_vol + n_vol) / 63 / 255;
 10633              		.loc 1 4270 11 view .LVU3883
 10634 01ce FE23     		movs	r3, #254
 10635              	.LVL1215:
4271:source\fatfs/ff.c **** 			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 10636              		.loc 1 4271 15 view .LVU3884
 10637 01d0 09EB0200 		add	r0, r9, r2
4270:source\fatfs/ff.c **** 			n = (b_vol + n_vol) / 63 / 255;
 10638              		.loc 1 4270 11 view .LVU3885
 10639 01d4 84F8C331 		strb	r3, [r4, #451]
4271:source\fatfs/ff.c **** 			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 10640              		.loc 1 4271 29 view .LVU3886
 10641 01d8 43F6C163 		movw	r3, #16065
 10642 01dc B0FBF3F0 		udiv	r0, r0, r3
4272:source\fatfs/ff.c **** 			tbl[7] = (BYTE)n;				/* End cylinder */
 10643              		.loc 1 4272 22 view .LVU3887
 10644 01e0 8308     		lsrs	r3, r0, #2
4272:source\fatfs/ff.c **** 			tbl[7] = (BYTE)n;				/* End cylinder */
 10645              		.loc 1 4272 13 view .LVU3888
 10646 01e2 43F03F03 		orr	r3, r3, #63
4272:source\fatfs/ff.c **** 			tbl[7] = (BYTE)n;				/* End cylinder */
 10647              		.loc 1 4272 11 view .LVU3889
 10648 01e6 84F8C431 		strb	r3, [r4, #452]
4274:source\fatfs/ff.c **** 			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 10649              		.loc 1 4274 4 view .LVU3890
 10650 01ea 3F23     		movs	r3, #63
 10651 01ec 84F8C631 		strb	r3, [r4, #454]
4275:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 10652              		.loc 1 4275 4 view .LVU3891
 10653 01f0 C2F30723 		ubfx	r3, r2, #8, #8
 10654 01f4 84F8CB31 		strb	r3, [r4, #459]
 10655 01f8 130C     		lsrs	r3, r2, #16
4266:source\fatfs/ff.c **** 			tbl[2] = 1;						/* Partition start sector */
 10656              		.loc 1 4266 11 view .LVU3892
 10657 01fa 4FF0010C 		mov	ip, #1
4275:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 10658              		.loc 1 4275 4 view .LVU3893
 10659 01fe 84F8CA21 		strb	r2, [r4, #458]
 10660 0202 84F8CC31 		strb	r3, [r4, #460]
 10661 0206 120E     		lsrs	r2, r2, #24
4276:source\fatfs/ff.c **** 			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 10662              		.loc 1 4276 4 view .LVU3894
 10663 0208 4AF65523 		movw	r3, #43605
4271:source\fatfs/ff.c **** 			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 10664              		.loc 1 4271 6 view .LVU3895
 10665 020c 0490     		str	r0, [sp, #16]
4273:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
 10666              		.loc 1 4273 13 view .LVU3896
 10667 020e 84F8C501 		strb	r0, [r4, #453]
4275:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 10668              		.loc 1 4275 4 view .LVU3897
 10669 0212 84F8CD21 		strb	r2, [r4, #461]
4276:source\fatfs/ff.c **** 			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 10670              		.loc 1 4276 4 view .LVU3898
 10671 0216 A4F8FE31 		strh	r3, [r4, #510]	@ movhi
4266:source\fatfs/ff.c **** 			tbl[2] = 1;						/* Partition start sector */
 10672              		.loc 1 4266 11 view .LVU3899
 10673 021a 84F8BFC1 		strb	ip, [r4, #447]
4267:source\fatfs/ff.c **** 			tbl[3] = 0;						/* Partition start cylinder */
 10674              		.loc 1 4267 4 is_stmt 1 view .LVU3900
4267:source\fatfs/ff.c **** 			tbl[3] = 0;						/* Partition start cylinder */
 10675              		.loc 1 4267 11 is_stmt 0 view .LVU3901
 10676 021e 84F8C0C1 		strb	ip, [r4, #448]
4268:source\fatfs/ff.c **** 			tbl[4] = sys;					/* System type */
 10677              		.loc 1 4268 4 is_stmt 1 view .LVU3902
4268:source\fatfs/ff.c **** 			tbl[4] = sys;					/* System type */
 10678              		.loc 1 4268 11 is_stmt 0 view .LVU3903
 10679 0222 84F8C1B1 		strb	fp, [r4, #449]
4269:source\fatfs/ff.c **** 			tbl[5] = 254;					/* Partition end head */
 10680              		.loc 1 4269 4 is_stmt 1 view .LVU3904
4270:source\fatfs/ff.c **** 			n = (b_vol + n_vol) / 63 / 255;
 10681              		.loc 1 4270 4 view .LVU3905
4271:source\fatfs/ff.c **** 			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 10682              		.loc 1 4271 4 view .LVU3906
4272:source\fatfs/ff.c **** 			tbl[7] = (BYTE)n;				/* End cylinder */
 10683              		.loc 1 4272 4 view .LVU3907
4273:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
 10684              		.loc 1 4273 4 view .LVU3908
4274:source\fatfs/ff.c **** 			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 10685              		.loc 1 4274 4 view .LVU3909
4274:source\fatfs/ff.c **** 			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 10686              		.loc 1 4274 4 view .LVU3910
 10687 0226 84F8C7B1 		strb	fp, [r4, #455]
4274:source\fatfs/ff.c **** 			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 10688              		.loc 1 4274 4 view .LVU3911
 10689 022a 84F8C8B1 		strb	fp, [r4, #456]
4274:source\fatfs/ff.c **** 			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 10690              		.loc 1 4274 4 view .LVU3912
 10691 022e 84F8C9B1 		strb	fp, [r4, #457]
4275:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 10692              		.loc 1 4275 4 view .LVU3913
4275:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 10693              		.loc 1 4275 4 view .LVU3914
4275:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 10694              		.loc 1 4275 4 view .LVU3915
4275:source\fatfs/ff.c **** 			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 10695              		.loc 1 4275 4 view .LVU3916
4276:source\fatfs/ff.c **** 			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 10696              		.loc 1 4276 4 view .LVU3917
4276:source\fatfs/ff.c **** 			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 10697              		.loc 1 4276 4 view .LVU3918
4277:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 10698              		.loc 1 4277 4 view .LVU3919
4277:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 10699              		.loc 1 4277 8 is_stmt 0 view .LVU3920
 10700 0232 6346     		mov	r3, ip
 10701 0234 5A46     		mov	r2, fp
 10702 0236 2146     		mov	r1, r4
 10703 0238 3846     		mov	r0, r7
 10704 023a FFF7FEFF 		bl	disk_write
 10705              	.LVL1216:
4277:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 10706              		.loc 1 4277 7 view .LVU3921
 10707 023e 0028     		cmp	r0, #0
 10708 0240 7FF406AF 		bne	.L981
4279:source\fatfs/ff.c **** 		}
 10709              		.loc 1 4279 7 view .LVU3922
 10710 0244 4FF0F80B 		mov	fp, #248
 10711              	.LVL1217:
 10712              	.L1004:
4284:source\fatfs/ff.c **** 	mem_set(tbl, 0, SS(fs));
 10713              		.loc 1 4284 2 is_stmt 1 view .LVU3923
4285:source\fatfs/ff.c **** 	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
 10714              		.loc 1 4285 2 view .LVU3924
 10715 0248 4FF40072 		mov	r2, #512
 10716 024c 0021     		movs	r1, #0
 10717 024e 2046     		mov	r0, r4
 10718 0250 FFF7FEFF 		bl	mem_set
 10719              	.LVL1218:
4286:source\fatfs/ff.c **** 	i = SS(fs);								/* Sector size */
 10720              		.loc 1 4286 2 view .LVU3925
 10721 0254 0B22     		movs	r2, #11
 10722 0256 C049     		ldr	r1, .L1038
 10723 0258 2046     		mov	r0, r4
 10724 025a FFF7FEFF 		bl	mem_cpy
 10725              	.LVL1219:
4287:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_BytsPerSec, i);
 10726              		.loc 1 4287 2 view .LVU3926
4288:source\fatfs/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 10727              		.loc 1 4288 2 view .LVU3927
 10728 025e 0023     		movs	r3, #0
 10729 0260 0222     		movs	r2, #2
 10730 0262 E372     		strb	r3, [r4, #11]
4288:source\fatfs/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 10731              		.loc 1 4288 2 view .LVU3928
4293:source\fatfs/ff.c **** 	if (n_vol < 0x10000) {					/* Number of total sectors */
 10732              		.loc 1 4293 2 is_stmt 0 view .LVU3929
 10733 0264 6374     		strb	r3, [r4, #17]
4292:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_RootEntCnt, i);
 10734              		.loc 1 4292 28 view .LVU3930
 10735 0266 B8F10303 		subs	r3, r8, #3
 10736 026a 18BF     		it	ne
 10737 026c 0123     		movne	r3, #1
4288:source\fatfs/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 10738              		.loc 1 4288 2 view .LVU3931
 10739 026e 2273     		strb	r2, [r4, #12]
4289:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
 10740              		.loc 1 4289 2 is_stmt 1 view .LVU3932
4291:source\fatfs/ff.c **** 	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 10741              		.loc 1 4291 19 is_stmt 0 view .LVU3933
 10742 0270 0122     		movs	r2, #1
4293:source\fatfs/ff.c **** 	if (n_vol < 0x10000) {					/* Number of total sectors */
 10743              		.loc 1 4293 2 view .LVU3934
 10744 0272 9340     		lsls	r3, r3, r2
 10745 0274 A374     		strb	r3, [r4, #18]
4294:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_TotSec16, n_vol);
 10746              		.loc 1 4294 12 view .LVU3935
 10747 0276 059B     		ldr	r3, [sp, #20]
4290:source\fatfs/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 10748              		.loc 1 4290 2 view .LVU3936
 10749 0278 84F80EA0 		strb	r10, [r4, #14]
4294:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_TotSec16, n_vol);
 10750              		.loc 1 4294 5 view .LVU3937
 10751 027c B3F5803F 		cmp	r3, #65536
4290:source\fatfs/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 10752              		.loc 1 4290 2 view .LVU3938
 10753 0280 CAF3072A 		ubfx	r10, r10, #8, #8
 10754              	.LVL1220:
4291:source\fatfs/ff.c **** 	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 10755              		.loc 1 4291 19 view .LVU3939
 10756 0284 2274     		strb	r2, [r4, #16]
4289:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
 10757              		.loc 1 4289 24 view .LVU3940
 10758 0286 6673     		strb	r6, [r4, #13]
4290:source\fatfs/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 10759              		.loc 1 4290 2 is_stmt 1 view .LVU3941
4290:source\fatfs/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 10760              		.loc 1 4290 2 view .LVU3942
 10761 0288 84F80FA0 		strb	r10, [r4, #15]
4291:source\fatfs/ff.c **** 	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 10762              		.loc 1 4291 2 view .LVU3943
4292:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_RootEntCnt, i);
 10763              		.loc 1 4292 2 view .LVU3944
 10764              	.LVL1221:
4293:source\fatfs/ff.c **** 	if (n_vol < 0x10000) {					/* Number of total sectors */
 10765              		.loc 1 4293 2 view .LVU3945
4293:source\fatfs/ff.c **** 	if (n_vol < 0x10000) {					/* Number of total sectors */
 10766              		.loc 1 4293 2 view .LVU3946
4294:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_TotSec16, n_vol);
 10767              		.loc 1 4294 2 view .LVU3947
 10768 028c 9AB2     		uxth	r2, r3
4294:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_TotSec16, n_vol);
 10769              		.loc 1 4294 5 is_stmt 0 view .LVU3948
 10770 028e 80F00181 		bcs	.L1005
4295:source\fatfs/ff.c **** 	} else {
 10771              		.loc 1 4295 3 is_stmt 1 view .LVU3949
 10772 0292 120A     		lsrs	r2, r2, #8
 10773 0294 E374     		strb	r3, [r4, #19]
4295:source\fatfs/ff.c **** 	} else {
 10774              		.loc 1 4295 3 view .LVU3950
 10775 0296 2275     		strb	r2, [r4, #20]
 10776              	.L1006:
4299:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
 10777              		.loc 1 4299 2 view .LVU3951
4300:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 10778              		.loc 1 4300 2 is_stmt 0 view .LVU3952
 10779 0298 3F23     		movs	r3, #63
 10780 029a 4FF0000A 		mov	r10, #0
 10781 029e 2376     		strb	r3, [r4, #24]
4301:source\fatfs/ff.c **** 	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 10782              		.loc 1 4301 2 view .LVU3953
 10783 02a0 FF23     		movs	r3, #255
 10784 02a2 A376     		strb	r3, [r4, #26]
4299:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
 10785              		.loc 1 4299 17 view .LVU3954
 10786 02a4 84F815B0 		strb	fp, [r4, #21]
4300:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 10787              		.loc 1 4300 2 is_stmt 1 view .LVU3955
4300:source\fatfs/ff.c **** 	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 10788              		.loc 1 4300 2 view .LVU3956
 10789 02a8 84F819A0 		strb	r10, [r4, #25]
4301:source\fatfs/ff.c **** 	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 10790              		.loc 1 4301 2 view .LVU3957
4301:source\fatfs/ff.c **** 	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 10791              		.loc 1 4301 2 view .LVU3958
 10792 02ac 84F81BA0 		strb	r10, [r4, #27]
4302:source\fatfs/ff.c **** 	n = GET_FATTIME();						/* Use current time as VSN */
 10793              		.loc 1 4302 2 view .LVU3959
 10794 02b0 84F81C90 		strb	r9, [r4, #28]
4302:source\fatfs/ff.c **** 	n = GET_FATTIME();						/* Use current time as VSN */
 10795              		.loc 1 4302 2 view .LVU3960
 10796 02b4 84F81DA0 		strb	r10, [r4, #29]
4302:source\fatfs/ff.c **** 	n = GET_FATTIME();						/* Use current time as VSN */
 10797              		.loc 1 4302 2 view .LVU3961
 10798 02b8 84F81EA0 		strb	r10, [r4, #30]
4302:source\fatfs/ff.c **** 	n = GET_FATTIME();						/* Use current time as VSN */
 10799              		.loc 1 4302 2 view .LVU3962
 10800 02bc 84F81FA0 		strb	r10, [r4, #31]
4303:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 10801              		.loc 1 4303 2 view .LVU3963
4303:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 10802              		.loc 1 4303 6 is_stmt 0 view .LVU3964
 10803 02c0 FFF7FEFF 		bl	get_fattime
 10804              	.LVL1222:
4304:source\fatfs/ff.c **** 		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
 10805              		.loc 1 4304 5 view .LVU3965
 10806 02c4 B8F1030F 		cmp	r8, #3
4303:source\fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 10807              		.loc 1 4303 4 view .LVU3966
 10808 02c8 0490     		str	r0, [sp, #16]
4304:source\fatfs/ff.c **** 		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
 10809              		.loc 1 4304 2 is_stmt 1 view .LVU3967
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10810              		.loc 1 4306 3 is_stmt 0 view .LVU3968
 10811 02ca E9B2     		uxtb	r1, r5
 10812 02cc C5F30722 		ubfx	r2, r5, #8, #8
 10813 02d0 83B2     		uxth	r3, r0
4304:source\fatfs/ff.c **** 		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
 10814              		.loc 1 4304 5 view .LVU3969
 10815 02d2 40F0EB80 		bne	.L1007
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 10816              		.loc 1 4305 3 is_stmt 1 view .LVU3970
 10817 02d6 1B0A     		lsrs	r3, r3, #8
 10818 02d8 84F84430 		strb	r3, [r4, #68]
 10819 02dc 030C     		lsrs	r3, r0, #16
 10820 02de 84F84530 		strb	r3, [r4, #69]
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10821              		.loc 1 4306 3 is_stmt 0 view .LVU3971
 10822 02e2 2B0C     		lsrs	r3, r5, #16
 10823 02e4 84F82630 		strb	r3, [r4, #38]
 10824 02e8 2B0E     		lsrs	r3, r5, #24
 10825 02ea 84F82730 		strb	r3, [r4, #39]
4307:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 10826              		.loc 1 4307 3 view .LVU3972
 10827 02ee 0223     		movs	r3, #2
 10828 02f0 84F82C30 		strb	r3, [r4, #44]
4308:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
 10829              		.loc 1 4308 3 view .LVU3973
 10830 02f4 0123     		movs	r3, #1
 10831 02f6 84F83030 		strb	r3, [r4, #48]
4309:source\fatfs/ff.c **** 		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 10832              		.loc 1 4309 3 view .LVU3974
 10833 02fa 0623     		movs	r3, #6
 10834 02fc 84F83230 		strb	r3, [r4, #50]
4310:source\fatfs/ff.c **** 		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 10835              		.loc 1 4310 20 view .LVU3975
 10836 0300 8023     		movs	r3, #128
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 10837              		.loc 1 4305 3 view .LVU3976
 10838 0302 84F84300 		strb	r0, [r4, #67]
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 10839              		.loc 1 4305 3 is_stmt 1 view .LVU3977
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 10840              		.loc 1 4305 3 view .LVU3978
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 10841              		.loc 1 4305 3 view .LVU3979
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10842              		.loc 1 4306 3 is_stmt 0 view .LVU3980
 10843 0306 84F82410 		strb	r1, [r4, #36]
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 10844              		.loc 1 4305 3 view .LVU3981
 10845 030a 000E     		lsrs	r0, r0, #24
4310:source\fatfs/ff.c **** 		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 10846              		.loc 1 4310 20 view .LVU3982
 10847 030c 84F84030 		strb	r3, [r4, #64]
4312:source\fatfs/ff.c **** 	} else {
 10848              		.loc 1 4312 3 view .LVU3983
 10849 0310 9249     		ldr	r1, .L1038+4
4305:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 10850              		.loc 1 4305 3 view .LVU3984
 10851 0312 84F84600 		strb	r0, [r4, #70]
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10852              		.loc 1 4306 3 is_stmt 1 view .LVU3985
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10853              		.loc 1 4306 3 view .LVU3986
4311:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 10854              		.loc 1 4311 21 is_stmt 0 view .LVU3987
 10855 0316 2923     		movs	r3, #41
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10856              		.loc 1 4306 3 view .LVU3988
 10857 0318 84F82520 		strb	r2, [r4, #37]
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10858              		.loc 1 4306 3 is_stmt 1 view .LVU3989
4306:source\fatfs/ff.c **** 		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 10859              		.loc 1 4306 3 view .LVU3990
4307:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 10860              		.loc 1 4307 3 view .LVU3991
4307:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 10861              		.loc 1 4307 3 view .LVU3992
 10862 031c 84F82DA0 		strb	r10, [r4, #45]
4307:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 10863              		.loc 1 4307 3 view .LVU3993
 10864 0320 84F82EA0 		strb	r10, [r4, #46]
4307:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 10865              		.loc 1 4307 3 view .LVU3994
 10866 0324 84F82FA0 		strb	r10, [r4, #47]
4308:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
 10867              		.loc 1 4308 3 view .LVU3995
4308:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
 10868              		.loc 1 4308 3 view .LVU3996
 10869 0328 84F831A0 		strb	r10, [r4, #49]
4309:source\fatfs/ff.c **** 		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 10870              		.loc 1 4309 3 view .LVU3997
4309:source\fatfs/ff.c **** 		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 10871              		.loc 1 4309 3 view .LVU3998
 10872 032c 84F833A0 		strb	r10, [r4, #51]
4310:source\fatfs/ff.c **** 		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 10873              		.loc 1 4310 3 view .LVU3999
4311:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 10874              		.loc 1 4311 3 view .LVU4000
4311:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 10875              		.loc 1 4311 21 is_stmt 0 view .LVU4001
 10876 0330 84F84230 		strb	r3, [r4, #66]
4312:source\fatfs/ff.c **** 	} else {
 10877              		.loc 1 4312 3 is_stmt 1 view .LVU4002
 10878 0334 1322     		movs	r2, #19
 10879 0336 04F14700 		add	r0, r4, #71
 10880              	.L1035:
4318:source\fatfs/ff.c **** 	}
 10881              		.loc 1 4318 3 is_stmt 0 view .LVU4003
 10882 033a FFF7FEFF 		bl	mem_cpy
 10883              	.LVL1223:
4320:source\fatfs/ff.c **** 	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
 10884              		.loc 1 4320 2 is_stmt 1 view .LVU4004
 10885 033e 5523     		movs	r3, #85
 10886 0340 84F8FE31 		strb	r3, [r4, #510]
4320:source\fatfs/ff.c **** 	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
 10887              		.loc 1 4320 2 view .LVU4005
 10888 0344 AA23     		movs	r3, #170
 10889 0346 84F8FF31 		strb	r3, [r4, #511]
4321:source\fatfs/ff.c **** 		return FR_DISK_ERR;
 10890              		.loc 1 4321 2 view .LVU4006
4321:source\fatfs/ff.c **** 		return FR_DISK_ERR;
 10891              		.loc 1 4321 6 is_stmt 0 view .LVU4007
 10892 034a 4A46     		mov	r2, r9
 10893 034c 0123     		movs	r3, #1
 10894 034e 2146     		mov	r1, r4
 10895 0350 3846     		mov	r0, r7
 10896 0352 FFF7FEFF 		bl	disk_write
 10897              	.LVL1224:
4321:source\fatfs/ff.c **** 		return FR_DISK_ERR;
 10898              		.loc 1 4321 5 view .LVU4008
 10899 0356 8246     		mov	r10, r0
 10900 0358 0028     		cmp	r0, #0
 10901 035a 7FF479AE 		bne	.L981
4323:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 6, 1);
 10902              		.loc 1 4323 2 is_stmt 1 view .LVU4009
4323:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 6, 1);
 10903              		.loc 1 4323 5 is_stmt 0 view .LVU4010
 10904 035e B8F1030F 		cmp	r8, #3
 10905 0362 00F0BB80 		beq	.L1009
 10906              	.LVL1225:
4329:source\fatfs/ff.c **** 		n = md;								/* Media descriptor byte */
 10907              		.loc 1 4329 3 is_stmt 1 view .LVU4011
 10908 0366 0146     		mov	r1, r0
 10909 0368 4FF40072 		mov	r2, #512
 10910 036c 2046     		mov	r0, r4
 10911 036e FFF7FEFF 		bl	mem_set
 10912              	.LVL1226:
4330:source\fatfs/ff.c **** 		if (fmt != FS_FAT32) {
 10913              		.loc 1 4330 3 view .LVU4012
4331:source\fatfs/ff.c **** 			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 10914              		.loc 1 4331 3 view .LVU4013
4332:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
 10915              		.loc 1 4332 4 view .LVU4014
4332:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
 10916              		.loc 1 4332 40 is_stmt 0 view .LVU4015
 10917 0372 7B4B     		ldr	r3, .L1038+8
 10918 0374 B8F1010F 		cmp	r8, #1
 10919 0378 18BF     		it	ne
 10920 037a 6FF0FF03 		mvnne	r3, #255
4332:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
 10921              		.loc 1 4332 6 view .LVU4016
 10922 037e 43EA0B03 		orr	r3, r3, fp
 10923 0382 0493     		str	r3, [sp, #16]
4333:source\fatfs/ff.c **** 		} else {
 10924              		.loc 1 4333 4 is_stmt 1 view .LVU4017
 10925 0384 2370     		strb	r3, [r4]
4333:source\fatfs/ff.c **** 		} else {
 10926              		.loc 1 4333 4 view .LVU4018
 10927 0386 BDF81030 		ldrh	r3, [sp, #16]
 10928 038a 1B0A     		lsrs	r3, r3, #8
 10929 038c 6370     		strb	r3, [r4, #1]
4333:source\fatfs/ff.c **** 		} else {
 10930              		.loc 1 4333 4 view .LVU4019
 10931 038e BDF81230 		ldrh	r3, [sp, #18]
 10932 0392 A370     		strb	r3, [r4, #2]
4333:source\fatfs/ff.c **** 		} else {
 10933              		.loc 1 4333 4 view .LVU4020
 10934 0394 9DF81330 		ldrb	r3, [sp, #19]	@ zero_extendqisi2
 10935 0398 E370     		strb	r3, [r4, #3]
 10936              	.L1012:
4340:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10937              		.loc 1 4340 3 view .LVU4021
4340:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10938              		.loc 1 4340 7 is_stmt 0 view .LVU4022
 10939 039a 009B     		ldr	r3, [sp]
 10940 039c 009A     		ldr	r2, [sp]
 10941 039e 2146     		mov	r1, r4
 10942 03a0 03F1010A 		add	r10, r3, #1
 10943              	.LVL1227:
4340:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10944              		.loc 1 4340 7 view .LVU4023
 10945 03a4 3846     		mov	r0, r7
 10946 03a6 0123     		movs	r3, #1
 10947 03a8 FFF7FEFF 		bl	disk_write
 10948              	.LVL1228:
4340:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10949              		.loc 1 4340 6 view .LVU4024
 10950 03ac 0146     		mov	r1, r0
 10951 03ae 0028     		cmp	r0, #0
 10952 03b0 7FF44EAE 		bne	.L981
4342:source\fatfs/ff.c **** 		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single se
 10953              		.loc 1 4342 3 is_stmt 1 view .LVU4025
 10954 03b4 4FF40072 		mov	r2, #512
 10955 03b8 2046     		mov	r0, r4
 10956 03ba FFF7FEFF 		bl	mem_set
 10957              	.LVL1229:
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 10958              		.loc 1 4343 3 view .LVU4026
 10959 03be 0123     		movs	r3, #1
 10960              	.LVL1230:
 10961              	.L1013:
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 10962              		.loc 1 4343 17 is_stmt 0 discriminator 1 view .LVU4027
 10963 03c0 9D42     		cmp	r5, r3
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 10964              		.loc 1 4343 10 discriminator 1 view .LVU4028
 10965 03c2 0493     		str	r3, [sp, #16]
 10966              	.LVL1231:
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 10967              		.loc 1 4343 17 is_stmt 1 discriminator 1 view .LVU4029
4344:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 10968              		.loc 1 4344 8 is_stmt 0 discriminator 1 view .LVU4030
 10969 03c4 0AF1010B 		add	fp, r10, #1
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 10970              		.loc 1 4343 17 discriminator 1 view .LVU4031
 10971 03c8 00F2AE80 		bhi	.L1014
 10972              	.LVL1232:
4328:source\fatfs/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 10973              		.loc 1 4328 16 is_stmt 1 discriminator 1 view .LVU4032
4350:source\fatfs/ff.c **** 	do {
 10974              		.loc 1 4350 2 discriminator 1 view .LVU4033
4350:source\fatfs/ff.c **** 	do {
 10975              		.loc 1 4350 29 is_stmt 0 discriminator 1 view .LVU4034
 10976 03cc 019B     		ldr	r3, [sp, #4]
 10977 03ce 5546     		mov	r5, r10
 10978              	.LVL1233:
4350:source\fatfs/ff.c **** 	do {
 10979              		.loc 1 4350 29 discriminator 1 view .LVU4035
 10980 03d0 B8F1030F 		cmp	r8, #3
 10981 03d4 18BF     		it	ne
 10982 03d6 1E46     		movne	r6, r3
 10983              	.LVL1234:
 10984              	.L1016:
4351:source\fatfs/ff.c **** 		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 10985              		.loc 1 4351 2 is_stmt 1 view .LVU4036
4352:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10986              		.loc 1 4352 3 view .LVU4037
4352:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10987              		.loc 1 4352 3 is_stmt 0 view .LVU4038
 10988 03d8 2A46     		mov	r2, r5
4352:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10989              		.loc 1 4352 7 view .LVU4039
 10990 03da 0123     		movs	r3, #1
 10991 03dc 2146     		mov	r1, r4
 10992 03de 3846     		mov	r0, r7
 10993 03e0 1D44     		add	r5, r5, r3
 10994              	.LVL1235:
4352:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10995              		.loc 1 4352 7 view .LVU4040
 10996 03e2 FFF7FEFF 		bl	disk_write
 10997              	.LVL1236:
4352:source\fatfs/ff.c **** 			return FR_DISK_ERR;
 10998              		.loc 1 4352 6 view .LVU4041
 10999 03e6 0028     		cmp	r0, #0
 11000 03e8 7FF432AE 		bne	.L981
4354:source\fatfs/ff.c **** 
 11001              		.loc 1 4354 11 is_stmt 1 view .LVU4042
 11002              	.LVL1237:
4354:source\fatfs/ff.c **** 
 11003              		.loc 1 4354 11 is_stmt 0 view .LVU4043
 11004 03ec 06EB0A03 		add	r3, r6, r10
 11005 03f0 9D42     		cmp	r5, r3
 11006 03f2 F1D1     		bne	.L1016
4364:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
 11007              		.loc 1 4364 2 is_stmt 1 view .LVU4044
4364:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
 11008              		.loc 1 4364 5 is_stmt 0 view .LVU4045
 11009 03f4 B8F1030F 		cmp	r8, #3
 11010 03f8 3AD1     		bne	.L1017
4365:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 11011              		.loc 1 4365 3 is_stmt 1 view .LVU4046
 11012 03fa 5223     		movs	r3, #82
 11013 03fc 2370     		strb	r3, [r4]
4365:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 11014              		.loc 1 4365 3 view .LVU4047
 11015 03fe 6370     		strb	r3, [r4, #1]
4365:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 11016              		.loc 1 4365 3 view .LVU4048
 11017 0400 6123     		movs	r3, #97
 11018 0402 A370     		strb	r3, [r4, #2]
4365:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 11019              		.loc 1 4365 3 view .LVU4049
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11020              		.loc 1 4366 3 is_stmt 0 view .LVU4050
 11021 0404 84F8E731 		strb	r3, [r4, #487]
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11022              		.loc 1 4367 3 view .LVU4051
 11023 0408 029B     		ldr	r3, [sp, #8]
4368:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
 11024              		.loc 1 4368 3 view .LVU4052
 11025 040a 84F8ED01 		strb	r0, [r4, #493]
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11026              		.loc 1 4367 3 view .LVU4053
 11027 040e 013B     		subs	r3, r3, #1
4365:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 11028              		.loc 1 4365 3 view .LVU4054
 11029 0410 4122     		movs	r2, #65
 11030 0412 E270     		strb	r2, [r4, #3]
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11031              		.loc 1 4366 3 is_stmt 1 view .LVU4055
 11032 0414 84F8E621 		strb	r2, [r4, #486]
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11033              		.loc 1 4367 3 is_stmt 0 view .LVU4056
 11034 0418 C3F30722 		ubfx	r2, r3, #8, #8
 11035 041c 84F8E831 		strb	r3, [r4, #488]
 11036 0420 84F8E921 		strb	r2, [r4, #489]
 11037 0424 1A0C     		lsrs	r2, r3, #16
 11038 0426 1B0E     		lsrs	r3, r3, #24
 11039 0428 84F8EB31 		strb	r3, [r4, #491]
4368:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
 11040              		.loc 1 4368 3 view .LVU4057
 11041 042c 0223     		movs	r3, #2
 11042 042e 84F8EC31 		strb	r3, [r4, #492]
4369:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 11043              		.loc 1 4369 3 view .LVU4058
 11044 0432 5523     		movs	r3, #85
 11045 0434 84F8FE31 		strb	r3, [r4, #510]
 11046 0438 AA23     		movs	r3, #170
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11047              		.loc 1 4366 3 view .LVU4059
 11048 043a 7221     		movs	r1, #114
4369:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 11049              		.loc 1 4369 3 view .LVU4060
 11050 043c 84F8FF31 		strb	r3, [r4, #511]
4370:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
 11051              		.loc 1 4370 3 view .LVU4061
 11052 0440 0123     		movs	r3, #1
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11053              		.loc 1 4366 3 view .LVU4062
 11054 0442 84F8E411 		strb	r1, [r4, #484]
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11055              		.loc 1 4366 3 is_stmt 1 view .LVU4063
 11056 0446 84F8E511 		strb	r1, [r4, #485]
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11057              		.loc 1 4366 3 view .LVU4064
4366:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 11058              		.loc 1 4366 3 view .LVU4065
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11059              		.loc 1 4367 3 view .LVU4066
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11060              		.loc 1 4367 3 view .LVU4067
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11061              		.loc 1 4367 3 view .LVU4068
 11062 044a 84F8EA21 		strb	r2, [r4, #490]
4367:source\fatfs/ff.c **** 		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 11063              		.loc 1 4367 3 view .LVU4069
4368:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
 11064              		.loc 1 4368 3 view .LVU4070
4368:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
 11065              		.loc 1 4368 3 view .LVU4071
4368:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
 11066              		.loc 1 4368 3 view .LVU4072
 11067 044e 84F8EE01 		strb	r0, [r4, #494]
4368:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
 11068              		.loc 1 4368 3 view .LVU4073
4370:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
 11069              		.loc 1 4370 3 is_stmt 0 view .LVU4074
 11070 0452 09EB0302 		add	r2, r9, r3
4368:source\fatfs/ff.c **** 		ST_WORD(tbl + BS_55AA, 0xAA55);
 11071              		.loc 1 4368 3 view .LVU4075
 11072 0456 84F8EF01 		strb	r0, [r4, #495]
4369:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 11073              		.loc 1 4369 3 is_stmt 1 view .LVU4076
4369:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 11074              		.loc 1 4369 3 view .LVU4077
4370:source\fatfs/ff.c **** 		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
 11075              		.loc 1 4370 3 view .LVU4078
 11076 045a 2146     		mov	r1, r4
 11077 045c 3846     		mov	r0, r7
 11078 045e FFF7FEFF 		bl	disk_write
 11079              	.LVL1238:
4371:source\fatfs/ff.c **** 	}
 11080              		.loc 1 4371 3 view .LVU4079
 11081 0462 0123     		movs	r3, #1
 11082 0464 09F10702 		add	r2, r9, #7
 11083 0468 2146     		mov	r1, r4
 11084 046a 3846     		mov	r0, r7
 11085 046c FFF7FEFF 		bl	disk_write
 11086              	.LVL1239:
 11087              	.L1017:
4374:source\fatfs/ff.c **** }
 11088              		.loc 1 4374 2 view .LVU4080
4374:source\fatfs/ff.c **** }
 11089              		.loc 1 4374 10 is_stmt 0 view .LVU4081
 11090 0470 0022     		movs	r2, #0
 11091 0472 1146     		mov	r1, r2
 11092 0474 3846     		mov	r0, r7
 11093 0476 FFF7FEFF 		bl	disk_ioctl
 11094              	.LVL1240:
4374:source\fatfs/ff.c **** }
 11095              		.loc 1 4374 60 view .LVU4082
 11096 047a 0038     		subs	r0, r0, #0
 11097 047c 18BF     		it	ne
 11098 047e 0120     		movne	r0, #1
 11099 0480 E7E5     		b	.L979
 11100              	.LVL1241:
 11101              	.L1002:
4246:source\fatfs/ff.c **** 			sys = 0x01;	/* FAT12(<65536) */
 11102              		.loc 1 4246 3 is_stmt 1 discriminator 1 view .LVU4083
4247:source\fatfs/ff.c **** 		} else {
 11103              		.loc 1 4247 8 is_stmt 0 discriminator 1 view .LVU4084
 11104 0482 B2F5803F 		cmp	r2, #65536
 11105 0486 2CBF     		ite	cs
 11106 0488 0623     		movcs	r3, #6
 11107              	.LVL1242:
4247:source\fatfs/ff.c **** 		} else {
 11108              		.loc 1 4247 8 discriminator 1 view .LVU4085
 11109 048a 0123     		movcc	r3, #1
 11110 048c 92E6     		b	.L1003
 11111              	.LVL1243:
 11112              	.L1027:
4262:source\fatfs/ff.c **** 		} else {	/* Create partition table (FDISK) */
 11113              		.loc 1 4262 7 view .LVU4086
 11114 048e 4FF0F00B 		mov	fp, #240
 11115 0492 D9E6     		b	.L1004
 11116              	.LVL1244:
 11117              	.L1005:
4297:source\fatfs/ff.c **** 	}
 11118              		.loc 1 4297 3 is_stmt 1 view .LVU4087
 11119 0494 120A     		lsrs	r2, r2, #8
 11120 0496 84F82030 		strb	r3, [r4, #32]
4297:source\fatfs/ff.c **** 	}
 11121              		.loc 1 4297 3 view .LVU4088
 11122 049a 84F82120 		strb	r2, [r4, #33]
4297:source\fatfs/ff.c **** 	}
 11123              		.loc 1 4297 3 view .LVU4089
 11124 049e 1A0C     		lsrs	r2, r3, #16
 11125 04a0 1B0E     		lsrs	r3, r3, #24
 11126 04a2 84F82220 		strb	r2, [r4, #34]
4297:source\fatfs/ff.c **** 	}
 11127              		.loc 1 4297 3 view .LVU4090
 11128 04a6 84F82330 		strb	r3, [r4, #35]
 11129 04aa F5E6     		b	.L1006
 11130              	.L1007:
4314:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 11131              		.loc 1 4314 3 view .LVU4091
 11132 04ac 1B0A     		lsrs	r3, r3, #8
 11133 04ae 84F82830 		strb	r3, [r4, #40]
 11134 04b2 030C     		lsrs	r3, r0, #16
 11135 04b4 84F82930 		strb	r3, [r4, #41]
4316:source\fatfs/ff.c **** 		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 11136              		.loc 1 4316 18 is_stmt 0 view .LVU4092
 11137 04b8 8023     		movs	r3, #128
4314:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 11138              		.loc 1 4314 3 view .LVU4093
 11139 04ba 84F82700 		strb	r0, [r4, #39]
4314:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 11140              		.loc 1 4314 3 is_stmt 1 view .LVU4094
4314:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 11141              		.loc 1 4314 3 view .LVU4095
4314:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 11142              		.loc 1 4314 3 view .LVU4096
4316:source\fatfs/ff.c **** 		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 11143              		.loc 1 4316 18 is_stmt 0 view .LVU4097
 11144 04be 84F82430 		strb	r3, [r4, #36]
4314:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 11145              		.loc 1 4314 3 view .LVU4098
 11146 04c2 000E     		lsrs	r0, r0, #24
4317:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 11147              		.loc 1 4317 19 view .LVU4099
 11148 04c4 2923     		movs	r3, #41
4314:source\fatfs/ff.c **** 		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 11149              		.loc 1 4314 3 view .LVU4100
 11150 04c6 84F82A00 		strb	r0, [r4, #42]
4315:source\fatfs/ff.c **** 		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 11151              		.loc 1 4315 3 is_stmt 1 view .LVU4101
 11152 04ca A175     		strb	r1, [r4, #22]
4315:source\fatfs/ff.c **** 		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 11153              		.loc 1 4315 3 view .LVU4102
 11154 04cc E275     		strb	r2, [r4, #23]
4316:source\fatfs/ff.c **** 		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 11155              		.loc 1 4316 3 view .LVU4103
4317:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 11156              		.loc 1 4317 3 view .LVU4104
4318:source\fatfs/ff.c **** 	}
 11157              		.loc 1 4318 3 is_stmt 0 view .LVU4105
 11158 04ce 2549     		ldr	r1, .L1038+12
4317:source\fatfs/ff.c **** 		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 11159              		.loc 1 4317 19 view .LVU4106
 11160 04d0 84F82630 		strb	r3, [r4, #38]
4318:source\fatfs/ff.c **** 	}
 11161              		.loc 1 4318 3 is_stmt 1 view .LVU4107
 11162 04d4 1322     		movs	r2, #19
 11163 04d6 04F12B00 		add	r0, r4, #43
 11164 04da 2EE7     		b	.L1035
 11165              	.L1009:
4324:source\fatfs/ff.c **** 
 11166              		.loc 1 4324 3 view .LVU4108
 11167 04dc 0123     		movs	r3, #1
 11168 04de 09F10602 		add	r2, r9, #6
 11169 04e2 2146     		mov	r1, r4
 11170 04e4 3846     		mov	r0, r7
 11171 04e6 FFF7FEFF 		bl	disk_write
 11172              	.LVL1245:
4328:source\fatfs/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 11173              		.loc 1 4328 16 view .LVU4109
4329:source\fatfs/ff.c **** 		n = md;								/* Media descriptor byte */
 11174              		.loc 1 4329 3 view .LVU4110
4335:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
 11175              		.loc 1 4335 6 is_stmt 0 view .LVU4111
 11176 04ea 6BF0FF03 		orn	r3, fp, #255
4329:source\fatfs/ff.c **** 		n = md;								/* Media descriptor byte */
 11177              		.loc 1 4329 3 view .LVU4112
 11178 04ee 4FF40072 		mov	r2, #512
 11179 04f2 5146     		mov	r1, r10
 11180 04f4 2046     		mov	r0, r4
 11181 04f6 FFF7FEFF 		bl	mem_set
 11182              	.LVL1246:
4330:source\fatfs/ff.c **** 		if (fmt != FS_FAT32) {
 11183              		.loc 1 4330 3 is_stmt 1 view .LVU4113
4331:source\fatfs/ff.c **** 			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 11184              		.loc 1 4331 3 view .LVU4114
4335:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
 11185              		.loc 1 4335 4 view .LVU4115
4335:source\fatfs/ff.c **** 			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
 11186              		.loc 1 4335 6 is_stmt 0 view .LVU4116
 11187 04fa 0493     		str	r3, [sp, #16]
4336:source\fatfs/ff.c **** 			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 11188              		.loc 1 4336 4 is_stmt 1 view .LVU4117
 11189 04fc 2370     		strb	r3, [r4]
4336:source\fatfs/ff.c **** 			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 11190              		.loc 1 4336 4 view .LVU4118
 11191 04fe BDF81030 		ldrh	r3, [sp, #16]
 11192 0502 1B0A     		lsrs	r3, r3, #8
 11193 0504 6370     		strb	r3, [r4, #1]
4336:source\fatfs/ff.c **** 			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 11194              		.loc 1 4336 4 view .LVU4119
 11195 0506 BDF81230 		ldrh	r3, [sp, #18]
 11196 050a A370     		strb	r3, [r4, #2]
4336:source\fatfs/ff.c **** 			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 11197              		.loc 1 4336 4 view .LVU4120
 11198 050c 9DF81330 		ldrb	r3, [sp, #19]	@ zero_extendqisi2
 11199 0510 E370     		strb	r3, [r4, #3]
4337:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 11200              		.loc 1 4337 4 view .LVU4121
 11201 0512 FF23     		movs	r3, #255
 11202 0514 2371     		strb	r3, [r4, #4]
4337:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 11203              		.loc 1 4337 4 view .LVU4122
 11204 0516 6371     		strb	r3, [r4, #5]
4337:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 11205              		.loc 1 4337 4 view .LVU4123
 11206 0518 A371     		strb	r3, [r4, #6]
4337:source\fatfs/ff.c **** 			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 11207              		.loc 1 4337 4 view .LVU4124
 11208 051a E371     		strb	r3, [r4, #7]
4338:source\fatfs/ff.c **** 		}
 11209              		.loc 1 4338 4 view .LVU4125
 11210 051c 2372     		strb	r3, [r4, #8]
4338:source\fatfs/ff.c **** 		}
 11211              		.loc 1 4338 4 view .LVU4126
 11212 051e 6372     		strb	r3, [r4, #9]
4338:source\fatfs/ff.c **** 		}
 11213              		.loc 1 4338 4 view .LVU4127
 11214 0520 A372     		strb	r3, [r4, #10]
4338:source\fatfs/ff.c **** 		}
 11215              		.loc 1 4338 4 view .LVU4128
 11216 0522 0F23     		movs	r3, #15
 11217 0524 E372     		strb	r3, [r4, #11]
 11218 0526 38E7     		b	.L1012
 11219              	.LVL1247:
 11220              	.L1014:
4344:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 11221              		.loc 1 4344 4 view .LVU4129
4344:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 11222              		.loc 1 4344 8 is_stmt 0 view .LVU4130
 11223 0528 0123     		movs	r3, #1
 11224 052a 5246     		mov	r2, r10
 11225 052c 2146     		mov	r1, r4
 11226 052e 3846     		mov	r0, r7
 11227 0530 FFF7FEFF 		bl	disk_write
 11228              	.LVL1248:
4344:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 11229              		.loc 1 4344 7 view .LVU4131
 11230 0534 0028     		cmp	r0, #0
 11231 0536 7FF48BAD 		bne	.L981
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 11232              		.loc 1 4343 27 is_stmt 1 discriminator 2 view .LVU4132
 11233 053a 049B     		ldr	r3, [sp, #16]
4344:source\fatfs/ff.c **** 				return FR_DISK_ERR;
 11234              		.loc 1 4344 8 is_stmt 0 discriminator 2 view .LVU4133
 11235 053c DA46     		mov	r10, fp
 11236              	.LVL1249:
4343:source\fatfs/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 11237              		.loc 1 4343 27 discriminator 2 view .LVU4134
 11238 053e 0133     		adds	r3, r3, #1
 11239 0540 3EE7     		b	.L1013
 11240              	.LVL1250:
 11241              	.L1018:
4160:source\fatfs/ff.c **** 	vol = get_ldnumber(&path);
 11242              		.loc 1 4160 22 view .LVU4135
 11243 0542 1320     		movs	r0, #19
 11244              	.LVL1251:
4160:source\fatfs/ff.c **** 	vol = get_ldnumber(&path);
 11245              		.loc 1 4160 22 view .LVU4136
 11246 0544 85E5     		b	.L979
 11247              	.LVL1252:
 11248              	.L1019:
4162:source\fatfs/ff.c **** 	fs = FatFs[vol];
 11249              		.loc 1 4162 22 view .LVU4137
 11250 0546 0B20     		movs	r0, #11
 11251              	.LVL1253:
4162:source\fatfs/ff.c **** 	fs = FatFs[vol];
 11252              		.loc 1 4162 22 view .LVU4138
 11253 0548 83E5     		b	.L979
 11254              	.LVL1254:
 11255              	.L1020:
4164:source\fatfs/ff.c **** 	fs->fs_type = 0;
 11256              		.loc 1 4164 18 view .LVU4139
 11257 054a 0C20     		movs	r0, #12
 11258              	.LVL1255:
4164:source\fatfs/ff.c **** 	fs->fs_type = 0;
 11259              		.loc 1 4164 18 view .LVU4140
 11260 054c 81E5     		b	.L979
 11261              	.LVL1256:
 11262              	.L1021:
4171:source\fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 11263              		.loc 1 4171 32 view .LVU4141
 11264 054e 0320     		movs	r0, #3
 11265              	.LVL1257:
4171:source\fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 11266              		.loc 1 4171 32 view .LVU4142
 11267 0550 7FE5     		b	.L979
 11268              	.LVL1258:
 11269              	.L1022:
4172:source\fatfs/ff.c **** #if _MAX_SS != _MIN_SS		/* Get disk sector size */
 11270              		.loc 1 4172 33 view .LVU4143
 11271 0552 0A20     		movs	r0, #10
 11272              	.LVL1259:
4172:source\fatfs/ff.c **** #if _MAX_SS != _MIN_SS		/* Get disk sector size */
 11273              		.loc 1 4172 33 view .LVU4144
 11274 0554 7DE5     		b	.L979
 11275              	.L1039:
 11276 0556 00BF     		.align	2
 11277              	.L1038:
 11278 0558 00000000 		.word	.LC2
 11279 055c 0C000000 		.word	.LC3
 11280 0560 00FFFF00 		.word	16776960
 11281 0564 20000000 		.word	.LC4
 11282              		.cfi_endproc
 11283              	.LFE180:
 11285              		.section	.text.f_gets,"ax",%progbits
 11286              		.align	1
 11287              		.global	f_gets
 11288              		.syntax unified
 11289              		.thumb
 11290              		.thumb_func
 11292              	f_gets:
 11293              	.LVL1260:
 11294              	.LFB181:
4462:source\fatfs/ff.c **** 	int n = 0;
 11295              		.loc 1 4462 1 is_stmt 1 view -0
 11296              		.cfi_startproc
 11297              		@ args = 0, pretend = 0, frame = 8
 11298              		@ frame_needed = 0, uses_anonymous_args = 0
4463:source\fatfs/ff.c **** 	TCHAR c, *p = buff;
 11299              		.loc 1 4463 2 view .LVU4146
4464:source\fatfs/ff.c **** 	BYTE s[2];
 11300              		.loc 1 4464 2 view .LVU4147
4465:source\fatfs/ff.c **** 	UINT rc;
 11301              		.loc 1 4465 2 view .LVU4148
4466:source\fatfs/ff.c **** 
 11302              		.loc 1 4466 2 view .LVU4149
4469:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
 11303              		.loc 1 4469 2 view .LVU4150
4462:source\fatfs/ff.c **** 	int n = 0;
 11304              		.loc 1 4462 1 is_stmt 0 view .LVU4151
 11305 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 11306              		.cfi_def_cfa_offset 32
 11307              		.cfi_offset 4, -24
 11308              		.cfi_offset 5, -20
 11309              		.cfi_offset 6, -16
 11310              		.cfi_offset 7, -12
 11311              		.cfi_offset 8, -8
 11312              		.cfi_offset 14, -4
4462:source\fatfs/ff.c **** 	int n = 0;
 11313              		.loc 1 4462 1 view .LVU4152
 11314 0004 0446     		mov	r4, r0
 11315 0006 9046     		mov	r8, r2
4464:source\fatfs/ff.c **** 	BYTE s[2];
 11316              		.loc 1 4464 12 view .LVU4153
 11317 0008 0646     		mov	r6, r0
4463:source\fatfs/ff.c **** 	TCHAR c, *p = buff;
 11318              		.loc 1 4463 6 view .LVU4154
 11319 000a 0025     		movs	r5, #0
4469:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
 11320              		.loc 1 4469 17 view .LVU4155
 11321 000c 4F1E     		subs	r7, r1, #1
 11322              	.LVL1261:
 11323              	.L1043:
4469:source\fatfs/ff.c **** #if _USE_LFN && _LFN_UNICODE
 11324              		.loc 1 4469 11 is_stmt 1 view .LVU4156
 11325 000e AF42     		cmp	r7, r5
 11326 0010 12DD     		ble	.L1044
4514:source\fatfs/ff.c **** 		if (rc != 1) break;
 11327              		.loc 1 4514 3 view .LVU4157
 11328 0012 01AB     		add	r3, sp, #4
 11329 0014 0122     		movs	r2, #1
 11330 0016 6946     		mov	r1, sp
 11331 0018 4046     		mov	r0, r8
 11332 001a FFF7FEFF 		bl	f_read
 11333              	.LVL1262:
4515:source\fatfs/ff.c **** 		c = s[0];
 11334              		.loc 1 4515 3 view .LVU4158
4515:source\fatfs/ff.c **** 		c = s[0];
 11335              		.loc 1 4515 6 is_stmt 0 view .LVU4159
 11336 001e 019B     		ldr	r3, [sp, #4]
 11337 0020 012B     		cmp	r3, #1
 11338 0022 09D1     		bne	.L1044
4516:source\fatfs/ff.c **** #endif
 11339              		.loc 1 4516 3 is_stmt 1 view .LVU4160
4516:source\fatfs/ff.c **** #endif
 11340              		.loc 1 4516 5 is_stmt 0 view .LVU4161
 11341 0024 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 11342              	.LVL1263:
4518:source\fatfs/ff.c **** 		*p++ = c;
 11343              		.loc 1 4518 3 is_stmt 1 view .LVU4162
4518:source\fatfs/ff.c **** 		*p++ = c;
 11344              		.loc 1 4518 6 is_stmt 0 view .LVU4163
 11345 0028 0D2B     		cmp	r3, #13
 11346 002a F0D0     		beq	.L1043
4519:source\fatfs/ff.c **** 		n++;
 11347              		.loc 1 4519 3 is_stmt 1 view .LVU4164
 11348              	.LVL1264:
4521:source\fatfs/ff.c **** 	}
 11349              		.loc 1 4521 6 is_stmt 0 view .LVU4165
 11350 002c 0A2B     		cmp	r3, #10
4519:source\fatfs/ff.c **** 		n++;
 11351              		.loc 1 4519 8 view .LVU4166
 11352 002e 06F8013B 		strb	r3, [r6], #1
 11353              	.LVL1265:
4520:source\fatfs/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
 11354              		.loc 1 4520 3 is_stmt 1 view .LVU4167
4520:source\fatfs/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
 11355              		.loc 1 4520 4 is_stmt 0 view .LVU4168
 11356 0032 05F10105 		add	r5, r5, #1
 11357              	.LVL1266:
4521:source\fatfs/ff.c **** 	}
 11358              		.loc 1 4521 3 is_stmt 1 view .LVU4169
4521:source\fatfs/ff.c **** 	}
 11359              		.loc 1 4521 6 is_stmt 0 view .LVU4170
 11360 0036 EAD1     		bne	.L1043
 11361              	.LVL1267:
 11362              	.L1044:
4523:source\fatfs/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 11363              		.loc 1 4523 2 is_stmt 1 view .LVU4171
4523:source\fatfs/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 11364              		.loc 1 4523 5 is_stmt 0 view .LVU4172
 11365 0038 0023     		movs	r3, #0
4524:source\fatfs/ff.c **** }
 11366              		.loc 1 4524 18 view .LVU4173
 11367 003a 9D42     		cmp	r5, r3
4525:source\fatfs/ff.c **** 
 11368              		.loc 1 4525 1 view .LVU4174
 11369 003c 14BF     		ite	ne
 11370 003e 2046     		movne	r0, r4
 11371 0040 1846     		moveq	r0, r3
4523:source\fatfs/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 11372              		.loc 1 4523 5 view .LVU4175
 11373 0042 3370     		strb	r3, [r6]
4524:source\fatfs/ff.c **** }
 11374              		.loc 1 4524 2 is_stmt 1 view .LVU4176
4525:source\fatfs/ff.c **** 
 11375              		.loc 1 4525 1 is_stmt 0 view .LVU4177
 11376 0044 02B0     		add	sp, sp, #8
 11377              		.cfi_def_cfa_offset 24
 11378              		@ sp needed
 11379 0046 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
4525:source\fatfs/ff.c **** 
 11380              		.loc 1 4525 1 view .LVU4178
 11381              		.cfi_endproc
 11382              	.LFE181:
 11384              		.section	.text.f_putc,"ax",%progbits
 11385              		.align	1
 11386              		.global	f_putc
 11387              		.syntax unified
 11388              		.thumb
 11389              		.thumb_func
 11391              	f_putc:
 11392              	.LVL1268:
 11393              	.LFB183:
4596:source\fatfs/ff.c **** 
4597:source\fatfs/ff.c **** 
4598:source\fatfs/ff.c **** 
4599:source\fatfs/ff.c **** int f_putc (
4600:source\fatfs/ff.c **** 	TCHAR c,	/* A character to be output */
4601:source\fatfs/ff.c **** 	FIL* fp		/* Pointer to the file object */
4602:source\fatfs/ff.c **** )
4603:source\fatfs/ff.c **** {
 11394              		.loc 1 4603 1 is_stmt 1 view -0
 11395              		.cfi_startproc
 11396              		@ args = 0, pretend = 0, frame = 80
 11397              		@ frame_needed = 0, uses_anonymous_args = 0
4604:source\fatfs/ff.c **** 	putbuff pb;
 11398              		.loc 1 4604 2 view .LVU4180
4605:source\fatfs/ff.c **** 	UINT nw;
 11399              		.loc 1 4605 2 view .LVU4181
4606:source\fatfs/ff.c **** 
4607:source\fatfs/ff.c **** 
4608:source\fatfs/ff.c **** 	pb.fp = fp;			/* Initialize output buffer */
 11400              		.loc 1 4608 2 view .LVU4182
4603:source\fatfs/ff.c **** 	putbuff pb;
 11401              		.loc 1 4603 1 is_stmt 0 view .LVU4183
 11402 0000 00B5     		push	{lr}
 11403              		.cfi_def_cfa_offset 4
 11404              		.cfi_offset 14, -4
 11405 0002 95B0     		sub	sp, sp, #84
 11406              		.cfi_def_cfa_offset 88
4609:source\fatfs/ff.c **** 	pb.nchr = pb.idx = 0;
 11407              		.loc 1 4609 19 view .LVU4184
 11408 0004 0023     		movs	r3, #0
4608:source\fatfs/ff.c **** 	pb.nchr = pb.idx = 0;
 11409              		.loc 1 4608 8 view .LVU4185
 11410 0006 0191     		str	r1, [sp, #4]
 11411              		.loc 1 4609 2 is_stmt 1 view .LVU4186
4610:source\fatfs/ff.c **** 
4611:source\fatfs/ff.c **** 	putc_bfd(&pb, c);	/* Put a character */
 11412              		.loc 1 4611 2 is_stmt 0 view .LVU4187
 11413 0008 0146     		mov	r1, r0
 11414              	.LVL1269:
 11415              		.loc 1 4611 2 view .LVU4188
 11416 000a 01A8     		add	r0, sp, #4
 11417              	.LVL1270:
4609:source\fatfs/ff.c **** 
 11418              		.loc 1 4609 10 view .LVU4189
 11419 000c CDE90233 		strd	r3, r3, [sp, #8]
 11420              		.loc 1 4611 2 is_stmt 1 view .LVU4190
 11421 0010 FFF7FEFF 		bl	putc_bfd
 11422              	.LVL1271:
4612:source\fatfs/ff.c **** 
4613:source\fatfs/ff.c **** 	if (   pb.idx >= 0	/* Flush buffered characters to the file */
 11423              		.loc 1 4613 2 view .LVU4191
 11424              		.loc 1 4613 11 is_stmt 0 view .LVU4192
 11425 0014 029A     		ldr	r2, [sp, #8]
 11426              		.loc 1 4613 5 view .LVU4193
 11427 0016 002A     		cmp	r2, #0
 11428 0018 04DA     		bge	.L1054
 11429              	.L1056:
4614:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
4615:source\fatfs/ff.c **** 		&& (UINT)pb.idx == nw) return pb.nchr;
4616:source\fatfs/ff.c **** 	return EOF;
 11430              		.loc 1 4616 9 view .LVU4194
 11431 001a 4FF0FF30 		mov	r0, #-1
 11432              	.L1053:
4617:source\fatfs/ff.c **** }
 11433              		.loc 1 4617 1 view .LVU4195
 11434 001e 15B0     		add	sp, sp, #84
 11435              		.cfi_remember_state
 11436              		.cfi_def_cfa_offset 4
 11437              		@ sp needed
 11438 0020 5DF804FB 		ldr	pc, [sp], #4
 11439              	.L1054:
 11440              		.cfi_restore_state
4614:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 11441              		.loc 1 4614 6 view .LVU4196
 11442 0024 0198     		ldr	r0, [sp, #4]
 11443 0026 6B46     		mov	r3, sp
 11444 0028 04A9     		add	r1, sp, #16
 11445 002a FFF7FEFF 		bl	f_write
 11446              	.LVL1272:
4614:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 11447              		.loc 1 4614 3 view .LVU4197
 11448 002e 0028     		cmp	r0, #0
 11449 0030 F3D1     		bne	.L1056
4615:source\fatfs/ff.c **** 	return EOF;
 11450              		.loc 1 4615 3 view .LVU4198
 11451 0032 029A     		ldr	r2, [sp, #8]
 11452 0034 009B     		ldr	r3, [sp]
 11453 0036 9A42     		cmp	r2, r3
 11454 0038 EFD1     		bne	.L1056
4615:source\fatfs/ff.c **** 	return EOF;
 11455              		.loc 1 4615 26 is_stmt 1 discriminator 1 view .LVU4199
4615:source\fatfs/ff.c **** 	return EOF;
 11456              		.loc 1 4615 35 is_stmt 0 discriminator 1 view .LVU4200
 11457 003a 0398     		ldr	r0, [sp, #12]
 11458 003c EFE7     		b	.L1053
 11459              		.cfi_endproc
 11460              	.LFE183:
 11462              		.section	.text.f_puts,"ax",%progbits
 11463              		.align	1
 11464              		.global	f_puts
 11465              		.syntax unified
 11466              		.thumb
 11467              		.thumb_func
 11469              	f_puts:
 11470              	.LVL1273:
 11471              	.LFB184:
4618:source\fatfs/ff.c **** 
4619:source\fatfs/ff.c **** 
4620:source\fatfs/ff.c **** 
4621:source\fatfs/ff.c **** 
4622:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4623:source\fatfs/ff.c **** /* Put a string to the file                                              */
4624:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4625:source\fatfs/ff.c **** 
4626:source\fatfs/ff.c **** int f_puts (
4627:source\fatfs/ff.c **** 	const TCHAR* str,	/* Pointer to the string to be output */
4628:source\fatfs/ff.c **** 	FIL* fp				/* Pointer to the file object */
4629:source\fatfs/ff.c **** )
4630:source\fatfs/ff.c **** {
 11472              		.loc 1 4630 1 is_stmt 1 view -0
 11473              		.cfi_startproc
 11474              		@ args = 0, pretend = 0, frame = 80
 11475              		@ frame_needed = 0, uses_anonymous_args = 0
4631:source\fatfs/ff.c **** 	putbuff pb;
 11476              		.loc 1 4631 2 view .LVU4202
4632:source\fatfs/ff.c **** 	UINT nw;
 11477              		.loc 1 4632 2 view .LVU4203
4633:source\fatfs/ff.c **** 
4634:source\fatfs/ff.c **** 
4635:source\fatfs/ff.c **** 	pb.fp = fp;				/* Initialize output buffer */
 11478              		.loc 1 4635 2 view .LVU4204
4630:source\fatfs/ff.c **** 	putbuff pb;
 11479              		.loc 1 4630 1 is_stmt 0 view .LVU4205
 11480 0000 10B5     		push	{r4, lr}
 11481              		.cfi_def_cfa_offset 8
 11482              		.cfi_offset 4, -8
 11483              		.cfi_offset 14, -4
4636:source\fatfs/ff.c **** 	pb.nchr = pb.idx = 0;
 11484              		.loc 1 4636 19 view .LVU4206
 11485 0002 0023     		movs	r3, #0
4630:source\fatfs/ff.c **** 	putbuff pb;
 11486              		.loc 1 4630 1 view .LVU4207
 11487 0004 94B0     		sub	sp, sp, #80
 11488              		.cfi_def_cfa_offset 88
 11489              		.loc 1 4636 10 view .LVU4208
 11490 0006 CDE90233 		strd	r3, r3, [sp, #8]
4635:source\fatfs/ff.c **** 	pb.nchr = pb.idx = 0;
 11491              		.loc 1 4635 8 view .LVU4209
 11492 000a 0191     		str	r1, [sp, #4]
 11493              		.loc 1 4636 2 is_stmt 1 view .LVU4210
4637:source\fatfs/ff.c **** 
4638:source\fatfs/ff.c **** 	while (*str)			/* Put the string */
 11494              		.loc 1 4638 2 view .LVU4211
 11495 000c 441E     		subs	r4, r0, #1
 11496              	.LVL1274:
 11497              	.L1058:
 11498              		.loc 1 4638 9 view .LVU4212
 11499 000e 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
 11500              	.LVL1275:
 11501              		.loc 1 4638 9 is_stmt 0 view .LVU4213
 11502 0012 31B9     		cbnz	r1, .L1059
4639:source\fatfs/ff.c **** 		putc_bfd(&pb, *str++);
4640:source\fatfs/ff.c **** 
4641:source\fatfs/ff.c **** 	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 11503              		.loc 1 4641 2 is_stmt 1 view .LVU4214
 11504              		.loc 1 4641 11 is_stmt 0 view .LVU4215
 11505 0014 029A     		ldr	r2, [sp, #8]
 11506              		.loc 1 4641 5 view .LVU4216
 11507 0016 002A     		cmp	r2, #0
 11508 0018 07DA     		bge	.L1060
 11509              	.L1062:
4642:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
4643:source\fatfs/ff.c **** 		&& (UINT)pb.idx == nw) return pb.nchr;
4644:source\fatfs/ff.c **** 	return EOF;
 11510              		.loc 1 4644 9 view .LVU4217
 11511 001a 4FF0FF30 		mov	r0, #-1
 11512              	.L1057:
4645:source\fatfs/ff.c **** }
 11513              		.loc 1 4645 1 view .LVU4218
 11514 001e 14B0     		add	sp, sp, #80
 11515              		.cfi_remember_state
 11516              		.cfi_def_cfa_offset 8
 11517              		@ sp needed
 11518 0020 10BD     		pop	{r4, pc}
 11519              	.LVL1276:
 11520              	.L1059:
 11521              		.cfi_restore_state
4639:source\fatfs/ff.c **** 		putc_bfd(&pb, *str++);
 11522              		.loc 1 4639 3 is_stmt 1 view .LVU4219
4639:source\fatfs/ff.c **** 		putc_bfd(&pb, *str++);
 11523              		.loc 1 4639 3 is_stmt 0 view .LVU4220
 11524 0022 01A8     		add	r0, sp, #4
 11525 0024 FFF7FEFF 		bl	putc_bfd
 11526              	.LVL1277:
 11527 0028 F1E7     		b	.L1058
 11528              	.LVL1278:
 11529              	.L1060:
4642:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 11530              		.loc 1 4642 6 view .LVU4221
 11531 002a 0198     		ldr	r0, [sp, #4]
 11532 002c 6B46     		mov	r3, sp
 11533 002e 04A9     		add	r1, sp, #16
 11534 0030 FFF7FEFF 		bl	f_write
 11535              	.LVL1279:
4642:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 11536              		.loc 1 4642 3 view .LVU4222
 11537 0034 0028     		cmp	r0, #0
 11538 0036 F0D1     		bne	.L1062
4643:source\fatfs/ff.c **** 	return EOF;
 11539              		.loc 1 4643 3 view .LVU4223
 11540 0038 029A     		ldr	r2, [sp, #8]
 11541 003a 009B     		ldr	r3, [sp]
 11542 003c 9A42     		cmp	r2, r3
 11543 003e ECD1     		bne	.L1062
4643:source\fatfs/ff.c **** 	return EOF;
 11544              		.loc 1 4643 26 is_stmt 1 discriminator 1 view .LVU4224
4643:source\fatfs/ff.c **** 	return EOF;
 11545              		.loc 1 4643 35 is_stmt 0 discriminator 1 view .LVU4225
 11546 0040 0398     		ldr	r0, [sp, #12]
 11547 0042 ECE7     		b	.L1057
 11548              		.cfi_endproc
 11549              	.LFE184:
 11551              		.section	.text.f_printf,"ax",%progbits
 11552              		.align	1
 11553              		.global	f_printf
 11554              		.syntax unified
 11555              		.thumb
 11556              		.thumb_func
 11558              	f_printf:
 11559              	.LVL1280:
 11560              	.LFB185:
4646:source\fatfs/ff.c **** 
4647:source\fatfs/ff.c **** 
4648:source\fatfs/ff.c **** 
4649:source\fatfs/ff.c **** 
4650:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4651:source\fatfs/ff.c **** /* Put a formatted string to the file                                    */
4652:source\fatfs/ff.c **** /*-----------------------------------------------------------------------*/
4653:source\fatfs/ff.c **** 
4654:source\fatfs/ff.c **** int f_printf (
4655:source\fatfs/ff.c **** 	FIL* fp,			/* Pointer to the file object */
4656:source\fatfs/ff.c **** 	const TCHAR* fmt,	/* Pointer to the format string */
4657:source\fatfs/ff.c **** 	...					/* Optional arguments... */
4658:source\fatfs/ff.c **** )
4659:source\fatfs/ff.c **** {
 11561              		.loc 1 4659 1 is_stmt 1 view -0
 11562              		.cfi_startproc
 11563              		@ args = 4, pretend = 12, frame = 112
 11564              		@ frame_needed = 0, uses_anonymous_args = 1
4660:source\fatfs/ff.c **** 	va_list arp;
 11565              		.loc 1 4660 2 view .LVU4227
4661:source\fatfs/ff.c **** 	BYTE f, r;
 11566              		.loc 1 4661 2 view .LVU4228
4662:source\fatfs/ff.c **** 	UINT nw, i, j, w;
 11567              		.loc 1 4662 2 view .LVU4229
4663:source\fatfs/ff.c **** 	DWORD v;
 11568              		.loc 1 4663 2 view .LVU4230
4664:source\fatfs/ff.c **** 	TCHAR c, d, s[16], *p;
 11569              		.loc 1 4664 2 view .LVU4231
4665:source\fatfs/ff.c **** 	putbuff pb;
 11570              		.loc 1 4665 2 view .LVU4232
4666:source\fatfs/ff.c **** 
4667:source\fatfs/ff.c **** 
4668:source\fatfs/ff.c **** 	pb.fp = fp;				/* Initialize output buffer */
 11571              		.loc 1 4668 2 view .LVU4233
4659:source\fatfs/ff.c **** 	va_list arp;
 11572              		.loc 1 4659 1 is_stmt 0 view .LVU4234
 11573 0000 0EB4     		push	{r1, r2, r3}
 11574              		.cfi_def_cfa_offset 12
 11575              		.cfi_offset 1, -12
 11576              		.cfi_offset 2, -8
 11577              		.cfi_offset 3, -4
 11578 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 11579              		.cfi_def_cfa_offset 48
 11580              		.cfi_offset 4, -48
 11581              		.cfi_offset 5, -44
 11582              		.cfi_offset 6, -40
 11583              		.cfi_offset 7, -36
 11584              		.cfi_offset 8, -32
 11585              		.cfi_offset 9, -28
 11586              		.cfi_offset 10, -24
 11587              		.cfi_offset 11, -20
 11588              		.cfi_offset 14, -16
 11589 0006 9CB0     		sub	sp, sp, #112
 11590              		.cfi_def_cfa_offset 160
4659:source\fatfs/ff.c **** 	va_list arp;
 11591              		.loc 1 4659 1 view .LVU4235
 11592 0008 25AB     		add	r3, sp, #148
4669:source\fatfs/ff.c **** 	pb.nchr = pb.idx = 0;
 11593              		.loc 1 4669 19 view .LVU4236
 11594 000a 0022     		movs	r2, #0
 11595              		.loc 1 4669 10 view .LVU4237
 11596 000c CDE90A22 		strd	r2, r2, [sp, #40]
4659:source\fatfs/ff.c **** 	va_list arp;
 11597              		.loc 1 4659 1 view .LVU4238
 11598 0010 53F8044B 		ldr	r4, [r3], #4
4668:source\fatfs/ff.c **** 	pb.nchr = pb.idx = 0;
 11599              		.loc 1 4668 8 view .LVU4239
 11600 0014 0990     		str	r0, [sp, #36]
 11601              		.loc 1 4669 2 is_stmt 1 view .LVU4240
4670:source\fatfs/ff.c **** 
4671:source\fatfs/ff.c **** 	va_start(arp, fmt);
 11602              		.loc 1 4671 2 view .LVU4241
 11603 0016 0393     		str	r3, [sp, #12]
4672:source\fatfs/ff.c **** 
4673:source\fatfs/ff.c **** 	for (;;) {
4674:source\fatfs/ff.c **** 		c = *fmt++;
4675:source\fatfs/ff.c **** 		if (c == 0) break;			/* End of string */
4676:source\fatfs/ff.c **** 		if (c != '%') {				/* Non escape character */
4677:source\fatfs/ff.c **** 			putc_bfd(&pb, c);
4678:source\fatfs/ff.c **** 			continue;
4679:source\fatfs/ff.c **** 		}
4680:source\fatfs/ff.c **** 		w = f = 0;
4681:source\fatfs/ff.c **** 		c = *fmt++;
4682:source\fatfs/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
4683:source\fatfs/ff.c **** 			f = 1; c = *fmt++;
4684:source\fatfs/ff.c **** 		} else {
4685:source\fatfs/ff.c **** 			if (c == '-') {			/* Flag: left justified */
4686:source\fatfs/ff.c **** 				f = 2; c = *fmt++;
4687:source\fatfs/ff.c **** 			}
4688:source\fatfs/ff.c **** 		}
4689:source\fatfs/ff.c **** 		while (IsDigit(c)) {		/* Precision */
4690:source\fatfs/ff.c **** 			w = w * 10 + c - '0';
 11604              		.loc 1 4690 10 is_stmt 0 view .LVU4242
 11605 0018 0A27     		movs	r7, #10
 11606              	.LVL1281:
 11607              	.L1064:
4673:source\fatfs/ff.c **** 		c = *fmt++;
 11608              		.loc 1 4673 2 is_stmt 1 view .LVU4243
4674:source\fatfs/ff.c **** 		if (c == 0) break;			/* End of string */
 11609              		.loc 1 4674 3 view .LVU4244
4674:source\fatfs/ff.c **** 		if (c == 0) break;			/* End of string */
 11610              		.loc 1 4674 5 is_stmt 0 view .LVU4245
 11611 001a 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 11612              	.LVL1282:
4675:source\fatfs/ff.c **** 		if (c != '%') {				/* Non escape character */
 11613              		.loc 1 4675 3 is_stmt 1 view .LVU4246
4675:source\fatfs/ff.c **** 		if (c != '%') {				/* Non escape character */
 11614              		.loc 1 4675 6 is_stmt 0 view .LVU4247
 11615 001c 0029     		cmp	r1, #0
 11616 001e 00F02581 		beq	.L1065
4676:source\fatfs/ff.c **** 			putc_bfd(&pb, c);
 11617              		.loc 1 4676 3 is_stmt 1 view .LVU4248
4676:source\fatfs/ff.c **** 			putc_bfd(&pb, c);
 11618              		.loc 1 4676 6 is_stmt 0 view .LVU4249
 11619 0022 2529     		cmp	r1, #37
 11620 0024 04D0     		beq	.L1066
4677:source\fatfs/ff.c **** 			continue;
 11621              		.loc 1 4677 4 discriminator 1 view .LVU4250
 11622 0026 09A8     		add	r0, sp, #36
4674:source\fatfs/ff.c **** 		if (c == 0) break;			/* End of string */
 11623              		.loc 1 4674 11 discriminator 1 view .LVU4251
 11624 0028 0134     		adds	r4, r4, #1
 11625              	.LVL1283:
4677:source\fatfs/ff.c **** 			continue;
 11626              		.loc 1 4677 4 is_stmt 1 discriminator 1 view .LVU4252
 11627 002a FFF7FEFF 		bl	putc_bfd
 11628              	.LVL1284:
4678:source\fatfs/ff.c **** 		}
 11629              		.loc 1 4678 4 discriminator 1 view .LVU4253
 11630 002e F4E7     		b	.L1064
 11631              	.LVL1285:
 11632              	.L1066:
4680:source\fatfs/ff.c **** 		c = *fmt++;
 11633              		.loc 1 4680 3 view .LVU4254
4681:source\fatfs/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 11634              		.loc 1 4681 3 view .LVU4255
4681:source\fatfs/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 11635              		.loc 1 4681 5 is_stmt 0 view .LVU4256
 11636 0030 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 11637              	.LVL1286:
4682:source\fatfs/ff.c **** 			f = 1; c = *fmt++;
 11638              		.loc 1 4682 3 is_stmt 1 view .LVU4257
4682:source\fatfs/ff.c **** 			f = 1; c = *fmt++;
 11639              		.loc 1 4682 6 is_stmt 0 view .LVU4258
 11640 0032 3029     		cmp	r1, #48
 11641 0034 04D1     		bne	.L1068
4683:source\fatfs/ff.c **** 		} else {
 11642              		.loc 1 4683 4 is_stmt 1 view .LVU4259
 11643              	.LVL1287:
4683:source\fatfs/ff.c **** 		} else {
 11644              		.loc 1 4683 11 view .LVU4260
4683:source\fatfs/ff.c **** 		} else {
 11645              		.loc 1 4683 13 is_stmt 0 view .LVU4261
 11646 0036 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 11647              	.LVL1288:
4683:source\fatfs/ff.c **** 		} else {
 11648              		.loc 1 4683 19 view .LVU4262
 11649 0038 E51C     		adds	r5, r4, #3
 11650              	.LVL1289:
4683:source\fatfs/ff.c **** 		} else {
 11651              		.loc 1 4683 6 view .LVU4263
 11652 003a 0124     		movs	r4, #1
 11653              	.LVL1290:
 11654              	.L1069:
4683:source\fatfs/ff.c **** 		} else {
 11655              		.loc 1 4683 6 view .LVU4264
 11656 003c 0026     		movs	r6, #0
 11657 003e 0BE0     		b	.L1071
 11658              	.LVL1291:
 11659              	.L1068:
4685:source\fatfs/ff.c **** 				f = 2; c = *fmt++;
 11660              		.loc 1 4685 4 is_stmt 1 view .LVU4265
4685:source\fatfs/ff.c **** 				f = 2; c = *fmt++;
 11661              		.loc 1 4685 7 is_stmt 0 view .LVU4266
 11662 0040 2D29     		cmp	r1, #45
 11663 0042 2FD1     		bne	.L1070
4686:source\fatfs/ff.c **** 			}
 11664              		.loc 1 4686 5 is_stmt 1 view .LVU4267
 11665              	.LVL1292:
4686:source\fatfs/ff.c **** 			}
 11666              		.loc 1 4686 12 view .LVU4268
4686:source\fatfs/ff.c **** 			}
 11667              		.loc 1 4686 14 is_stmt 0 view .LVU4269
 11668 0044 A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 11669              	.LVL1293:
4686:source\fatfs/ff.c **** 			}
 11670              		.loc 1 4686 20 view .LVU4270
 11671 0046 E51C     		adds	r5, r4, #3
 11672              	.LVL1294:
4686:source\fatfs/ff.c **** 			}
 11673              		.loc 1 4686 7 view .LVU4271
 11674 0048 0224     		movs	r4, #2
 11675 004a F7E7     		b	.L1069
 11676              	.LVL1295:
 11677              	.L1072:
 11678              		.loc 1 4690 4 is_stmt 1 view .LVU4272
 11679              		.loc 1 4690 15 is_stmt 0 view .LVU4273
 11680 004c 07FB0611 		mla	r1, r7, r6, r1
 11681              	.LVL1296:
 11682              		.loc 1 4690 6 view .LVU4274
 11683 0050 A1F13006 		sub	r6, r1, #48
 11684              	.LVL1297:
4691:source\fatfs/ff.c **** 			c = *fmt++;
 11685              		.loc 1 4691 4 is_stmt 1 view .LVU4275
 11686              		.loc 1 4691 6 is_stmt 0 view .LVU4276
 11687 0054 15F8011B 		ldrb	r1, [r5], #1	@ zero_extendqisi2
 11688              	.LVL1298:
 11689              	.L1071:
4689:source\fatfs/ff.c **** 			w = w * 10 + c - '0';
 11690              		.loc 1 4689 10 is_stmt 1 view .LVU4277
 11691 0058 A1F13003 		sub	r3, r1, #48
 11692 005c 092B     		cmp	r3, #9
 11693 005e F5D9     		bls	.L1072
4692:source\fatfs/ff.c **** 		}
4693:source\fatfs/ff.c **** 		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 11694              		.loc 1 4693 3 view .LVU4278
 11695              		.loc 1 4693 6 is_stmt 0 view .LVU4279
 11696 0060 01F0DF03 		and	r3, r1, #223
 11697 0064 4C2B     		cmp	r3, #76
4694:source\fatfs/ff.c **** 			f |= 4; c = *fmt++;
 11698              		.loc 1 4694 4 is_stmt 1 view .LVU4280
 11699              		.loc 1 4694 14 is_stmt 0 view .LVU4281
 11700 0066 04BF     		itt	eq
 11701 0068 15F8011B 		ldrbeq	r1, [r5], #1	@ zero_extendqisi2
 11702              	.LVL1299:
 11703              		.loc 1 4694 6 view .LVU4282
 11704 006c 44F00404 		orreq	r4, r4, #4
 11705              	.LVL1300:
 11706              		.loc 1 4694 12 is_stmt 1 view .LVU4283
4695:source\fatfs/ff.c **** 		}
4696:source\fatfs/ff.c **** 		if (!c) break;
 11707              		.loc 1 4696 3 view .LVU4284
 11708              		.loc 1 4696 6 is_stmt 0 view .LVU4285
 11709 0070 0029     		cmp	r1, #0
 11710 0072 00F0FB80 		beq	.L1065
4697:source\fatfs/ff.c **** 		d = c;
 11711              		.loc 1 4697 3 is_stmt 1 view .LVU4286
 11712              	.LVL1301:
4698:source\fatfs/ff.c **** 		if (IsLower(d)) d -= 0x20;
 11713              		.loc 1 4698 3 view .LVU4287
 11714              		.loc 1 4698 6 is_stmt 0 view .LVU4288
 11715 0076 A1F16103 		sub	r3, r1, #97
 11716 007a 192B     		cmp	r3, #25
 11717              		.loc 1 4698 19 is_stmt 1 view .LVU4289
 11718              		.loc 1 4698 21 is_stmt 0 view .LVU4290
 11719 007c 9ABF     		itte	ls
 11720 007e A1F12003 		subls	r3, r1, #32
 11721 0082 DBB2     		uxtbls	r3, r3
 11722              	.LVL1302:
 11723              		.loc 1 4698 21 view .LVU4291
 11724 0084 0B46     		movhi	r3, r1
 11725              	.LVL1303:
4699:source\fatfs/ff.c **** 		switch (d) {				/* Type is... */
 11726              		.loc 1 4699 3 is_stmt 1 view .LVU4292
 11727 0086 582B     		cmp	r3, #88
 11728 0088 08D8     		bhi	.L1075
 11729 008a 4E2B     		cmp	r3, #78
 11730 008c 0DD8     		bhi	.L1076
 11731 008e 432B     		cmp	r3, #67
 11732 0090 57D0     		beq	.L1077
 11733 0092 442B     		cmp	r3, #68
 11734 0094 00F0C280 		beq	.L1078
 11735 0098 422B     		cmp	r3, #66
 11736 009a 57D0     		beq	.L1079
 11737              	.LVL1304:
 11738              	.L1075:
4700:source\fatfs/ff.c **** 		case 'S' :					/* String */
4701:source\fatfs/ff.c **** 			p = va_arg(arp, TCHAR*);
4702:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
4703:source\fatfs/ff.c **** 			if (!(f & 2)) {
4704:source\fatfs/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ');
4705:source\fatfs/ff.c **** 			}
4706:source\fatfs/ff.c **** 			while (*p) putc_bfd(&pb, *p++);
4707:source\fatfs/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
4708:source\fatfs/ff.c **** 			continue;
4709:source\fatfs/ff.c **** 		case 'C' :					/* Character */
4710:source\fatfs/ff.c **** 			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
4711:source\fatfs/ff.c **** 		case 'B' :					/* Binary */
4712:source\fatfs/ff.c **** 			r = 2; break;
4713:source\fatfs/ff.c **** 		case 'O' :					/* Octal */
4714:source\fatfs/ff.c **** 			r = 8; break;
4715:source\fatfs/ff.c **** 		case 'D' :					/* Signed decimal */
4716:source\fatfs/ff.c **** 		case 'U' :					/* Unsigned decimal */
4717:source\fatfs/ff.c **** 			r = 10; break;
4718:source\fatfs/ff.c **** 		case 'X' :					/* Hexdecimal */
4719:source\fatfs/ff.c **** 			r = 16; break;
4720:source\fatfs/ff.c **** 		default:					/* Unknown type (pass-through) */
4721:source\fatfs/ff.c **** 			putc_bfd(&pb, c); continue;
 11739              		.loc 1 4721 4 discriminator 1 view .LVU4293
 11740 009c 09A8     		add	r0, sp, #36
 11741 009e FFF7FEFF 		bl	putc_bfd
 11742              	.LVL1305:
 11743              		.loc 1 4721 22 discriminator 1 view .LVU4294
 11744 00a2 45E0     		b	.L1092
 11745              	.LVL1306:
 11746              	.L1070:
4681:source\fatfs/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 11747              		.loc 1 4681 11 is_stmt 0 view .LVU4295
 11748 00a4 A51C     		adds	r5, r4, #2
4680:source\fatfs/ff.c **** 		c = *fmt++;
 11749              		.loc 1 4680 9 view .LVU4296
 11750 00a6 0024     		movs	r4, #0
 11751              	.LVL1307:
4680:source\fatfs/ff.c **** 		c = *fmt++;
 11752              		.loc 1 4680 9 view .LVU4297
 11753 00a8 C8E7     		b	.L1069
 11754              	.LVL1308:
 11755              	.L1076:
4699:source\fatfs/ff.c **** 		case 'S' :					/* String */
 11756              		.loc 1 4699 3 view .LVU4298
 11757 00aa 4F3B     		subs	r3, r3, #79
 11758              	.LVL1309:
4699:source\fatfs/ff.c **** 		case 'S' :					/* String */
 11759              		.loc 1 4699 3 view .LVU4299
 11760 00ac 092B     		cmp	r3, #9
 11761 00ae F5D8     		bhi	.L1075
 11762 00b0 01A2     		adr	r2, .L1081
 11763 00b2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 11764 00b6 00BF     		.p2align 2
 11765              	.L1081:
 11766 00b8 0D020000 		.word	.L1084+1
 11767 00bc 9D000000 		.word	.L1075+1
 11768 00c0 9D000000 		.word	.L1075+1
 11769 00c4 9D000000 		.word	.L1075+1
 11770 00c8 E1000000 		.word	.L1083+1
 11771 00cc 9D000000 		.word	.L1075+1
 11772 00d0 31020000 		.word	.L1082+1
 11773 00d4 9D000000 		.word	.L1075+1
 11774 00d8 9D000000 		.word	.L1075+1
 11775 00dc FD010000 		.word	.L1080+1
 11776              		.p2align 1
 11777              	.L1083:
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 11778              		.loc 1 4701 4 is_stmt 1 view .LVU4300
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 11779              		.loc 1 4701 6 is_stmt 0 view .LVU4301
 11780 00e0 039B     		ldr	r3, [sp, #12]
 11781              	.LVL1310:
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 11782              		.loc 1 4701 6 view .LVU4302
 11783 00e2 D3F80090 		ldr	r9, [r3]
4702:source\fatfs/ff.c **** 			if (!(f & 2)) {
 11784              		.loc 1 4702 4 is_stmt 1 view .LVU4303
 11785              	.LVL1311:
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 11786              		.loc 1 4701 6 is_stmt 0 view .LVU4304
 11787 00e6 1A1D     		adds	r2, r3, #4
4702:source\fatfs/ff.c **** 			if (!(f & 2)) {
 11788              		.loc 1 4702 17 view .LVU4305
 11789 00e8 4846     		mov	r0, r9
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 11790              		.loc 1 4701 6 view .LVU4306
 11791 00ea 0392     		str	r2, [sp, #12]
4702:source\fatfs/ff.c **** 			if (!(f & 2)) {
 11792              		.loc 1 4702 17 view .LVU4307
 11793 00ec FFF7FEFF 		bl	strlen
 11794              	.LVL1312:
4703:source\fatfs/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ');
 11795              		.loc 1 4703 7 view .LVU4308
 11796 00f0 A407     		lsls	r4, r4, #30
 11797              	.LVL1313:
4702:source\fatfs/ff.c **** 			if (!(f & 2)) {
 11798              		.loc 1 4702 17 view .LVU4309
 11799 00f2 8046     		mov	r8, r0
 11800              	.LVL1314:
4703:source\fatfs/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ');
 11801              		.loc 1 4703 4 is_stmt 1 view .LVU4310
4703:source\fatfs/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ');
 11802              		.loc 1 4703 7 is_stmt 0 view .LVU4311
 11803 00f4 10D4     		bmi	.L1086
 11804 00f6 0446     		mov	r4, r0
 11805 00f8 04E0     		b	.L1085
 11806              	.LVL1315:
 11807              	.L1087:
4704:source\fatfs/ff.c **** 			}
 11808              		.loc 1 4704 21 is_stmt 1 discriminator 2 view .LVU4312
 11809 00fa 2021     		movs	r1, #32
 11810 00fc 09A8     		add	r0, sp, #36
 11811 00fe FFF7FEFF 		bl	putc_bfd
 11812              	.LVL1316:
 11813 0102 0134     		adds	r4, r4, #1
 11814              	.LVL1317:
 11815              	.L1085:
4704:source\fatfs/ff.c **** 			}
 11816              		.loc 1 4704 16 discriminator 1 view .LVU4313
4704:source\fatfs/ff.c **** 			}
 11817              		.loc 1 4704 16 is_stmt 0 discriminator 1 view .LVU4314
 11818 0104 A642     		cmp	r6, r4
 11819 0106 F8D8     		bhi	.L1087
4704:source\fatfs/ff.c **** 			}
 11820              		.loc 1 4704 13 view .LVU4315
 11821 0108 A6EB0803 		sub	r3, r6, r8
 11822 010c B045     		cmp	r8, r6
 11823 010e 88BF     		it	hi
 11824 0110 0023     		movhi	r3, #0
 11825 0112 08F10108 		add	r8, r8, #1
 11826 0116 9844     		add	r8, r8, r3
 11827              	.LVL1318:
 11828              	.L1086:
4704:source\fatfs/ff.c **** 			}
 11829              		.loc 1 4704 13 view .LVU4316
 11830 0118 09F1FF39 		add	r9, r9, #-1
 11831 011c 02E0     		b	.L1088
 11832              	.LVL1319:
 11833              	.L1089:
4706:source\fatfs/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 11834              		.loc 1 4706 15 is_stmt 1 discriminator 2 view .LVU4317
4706:source\fatfs/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 11835              		.loc 1 4706 15 is_stmt 0 discriminator 2 view .LVU4318
 11836 011e 09A8     		add	r0, sp, #36
 11837 0120 FFF7FEFF 		bl	putc_bfd
 11838              	.LVL1320:
 11839              	.L1088:
4706:source\fatfs/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 11840              		.loc 1 4706 11 is_stmt 1 discriminator 1 view .LVU4319
 11841 0124 19F8011F 		ldrb	r1, [r9, #1]!	@ zero_extendqisi2
 11842              	.LVL1321:
4706:source\fatfs/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 11843              		.loc 1 4706 11 is_stmt 0 discriminator 1 view .LVU4320
 11844 0128 0029     		cmp	r1, #0
 11845 012a F8D1     		bne	.L1089
 11846              	.L1090:
 11847              	.LVL1322:
4707:source\fatfs/ff.c **** 			continue;
 11848              		.loc 1 4707 15 is_stmt 1 discriminator 1 view .LVU4321
4707:source\fatfs/ff.c **** 			continue;
 11849              		.loc 1 4707 15 is_stmt 0 discriminator 1 view .LVU4322
 11850 012c 4645     		cmp	r6, r8
 11851 012e 01D8     		bhi	.L1091
 11852              	.LVL1323:
 11853              	.L1092:
4659:source\fatfs/ff.c **** 	va_list arp;
 11854              		.loc 1 4659 1 view .LVU4323
 11855 0130 2C46     		mov	r4, r5
 11856 0132 72E7     		b	.L1064
 11857              	.LVL1324:
 11858              	.L1091:
4707:source\fatfs/ff.c **** 			continue;
 11859              		.loc 1 4707 20 is_stmt 1 discriminator 2 view .LVU4324
 11860 0134 2021     		movs	r1, #32
 11861 0136 09A8     		add	r0, sp, #36
 11862 0138 FFF7FEFF 		bl	putc_bfd
 11863              	.LVL1325:
 11864 013c 08F10108 		add	r8, r8, #1
 11865              	.LVL1326:
4707:source\fatfs/ff.c **** 			continue;
 11866              		.loc 1 4707 20 is_stmt 0 discriminator 2 view .LVU4325
 11867 0140 F4E7     		b	.L1090
 11868              	.LVL1327:
 11869              	.L1077:
4710:source\fatfs/ff.c **** 		case 'B' :					/* Binary */
 11870              		.loc 1 4710 4 is_stmt 1 view .LVU4326
4710:source\fatfs/ff.c **** 		case 'B' :					/* Binary */
 11871              		.loc 1 4710 25 is_stmt 0 view .LVU4327
 11872 0142 039B     		ldr	r3, [sp, #12]
 11873              	.LVL1328:
4710:source\fatfs/ff.c **** 		case 'B' :					/* Binary */
 11874              		.loc 1 4710 25 view .LVU4328
 11875 0144 1A1D     		adds	r2, r3, #4
4710:source\fatfs/ff.c **** 		case 'B' :					/* Binary */
 11876              		.loc 1 4710 4 view .LVU4329
 11877 0146 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 11878              	.LVL1329:
4710:source\fatfs/ff.c **** 		case 'B' :					/* Binary */
 11879              		.loc 1 4710 25 view .LVU4330
 11880 0148 0392     		str	r2, [sp, #12]
 11881 014a A7E7     		b	.L1075
 11882              	.LVL1330:
 11883              	.L1079:
4722:source\fatfs/ff.c **** 		}
4723:source\fatfs/ff.c **** 
4724:source\fatfs/ff.c **** 		/* Get an argument and put it in numeral */
4725:source\fatfs/ff.c **** 		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_
 11884              		.loc 1 4725 3 is_stmt 1 view .LVU4331
 11885              		.loc 1 4725 42 is_stmt 0 view .LVU4332
 11886 014c 6007     		lsls	r0, r4, #29
 11887 014e 77D5     		bpl	.L1114
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 11888              		.loc 1 4701 6 view .LVU4333
 11889 0150 039A     		ldr	r2, [sp, #12]
 11890 0152 52F8043B 		ldr	r3, [r2], #4
 11891              	.LVL1331:
 11892              		.loc 1 4725 24 view .LVU4334
 11893 0156 0392     		str	r2, [sp, #12]
 11894              	.LVL1332:
4726:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 11895              		.loc 1 4726 3 is_stmt 1 view .LVU4335
4712:source\fatfs/ff.c **** 		case 'O' :					/* Octal */
 11896              		.loc 1 4712 6 is_stmt 0 view .LVU4336
 11897 0158 0222     		movs	r2, #2
 11898              	.LVL1333:
 11899              	.L1095:
4727:source\fatfs/ff.c **** 			v = 0 - v;
4728:source\fatfs/ff.c **** 			f |= 8;
4729:source\fatfs/ff.c **** 		}
4730:source\fatfs/ff.c **** 		i = 0;
 11900              		.loc 1 4730 3 is_stmt 1 view .LVU4337
 11901              		.loc 1 4730 3 is_stmt 0 view .LVU4338
 11902 015a 7829     		cmp	r1, #120
 11903 015c 0DF1140C 		add	ip, sp, #20
 11904 0160 0CBF     		ite	eq
 11905 0162 4FF0270E 		moveq	lr, #39
 11906 0166 4FF0070E 		movne	lr, #7
 11907              		.loc 1 4730 5 view .LVU4339
 11908 016a 0020     		movs	r0, #0
 11909 016c E046     		mov	r8, ip
 11910              	.LVL1334:
 11911              	.L1100:
4731:source\fatfs/ff.c **** 		do {
 11912              		.loc 1 4731 3 is_stmt 1 view .LVU4340
4732:source\fatfs/ff.c **** 			d = (TCHAR)(v % r); v /= r;
 11913              		.loc 1 4732 4 view .LVU4341
 11914              		.loc 1 4732 18 is_stmt 0 view .LVU4342
 11915 016e B3FBF2FB 		udiv	fp, r3, r2
 11916 0172 02FB1B39 		mls	r9, r2, fp, r3
 11917              		.loc 1 4732 6 view .LVU4343
 11918 0176 5FFA89F1 		uxtb	r1, r9
 11919              	.LVL1335:
 11920              		.loc 1 4732 24 is_stmt 1 view .LVU4344
4733:source\fatfs/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 11921              		.loc 1 4733 7 is_stmt 0 view .LVU4345
 11922 017a B9F1090F 		cmp	r9, #9
 11923              		.loc 1 4733 17 view .LVU4346
 11924 017e 88BF     		it	hi
 11925 0180 7144     		addhi	r1, r1, lr
 11926              	.LVL1336:
 11927              		.loc 1 4733 17 view .LVU4347
 11928 0182 9A46     		mov	r10, r3
 11929 0184 88BF     		it	hi
 11930 0186 C9B2     		uxtbhi	r1, r1
4734:source\fatfs/ff.c **** 			s[i++] = d + '0';
 11931              		.loc 1 4734 15 view .LVU4348
 11932 0188 3031     		adds	r1, r1, #48
4735:source\fatfs/ff.c **** 		} while (v && i < sizeof s / sizeof s[0]);
 11933              		.loc 1 4735 14 view .LVU4349
 11934 018a 5245     		cmp	r2, r10
4734:source\fatfs/ff.c **** 			s[i++] = d + '0';
 11935              		.loc 1 4734 11 view .LVU4350
 11936 018c 0CF8011B 		strb	r1, [ip], #1
4732:source\fatfs/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 11937              		.loc 1 4732 26 view .LVU4351
 11938 0190 5B46     		mov	r3, fp
 11939              	.LVL1337:
4733:source\fatfs/ff.c **** 			s[i++] = d + '0';
 11940              		.loc 1 4733 4 is_stmt 1 view .LVU4352
4733:source\fatfs/ff.c **** 			s[i++] = d + '0';
 11941              		.loc 1 4733 15 view .LVU4353
4734:source\fatfs/ff.c **** 		} while (v && i < sizeof s / sizeof s[0]);
 11942              		.loc 1 4734 4 view .LVU4354
4734:source\fatfs/ff.c **** 		} while (v && i < sizeof s / sizeof s[0]);
 11943              		.loc 1 4734 7 is_stmt 0 view .LVU4355
 11944 0192 00F10109 		add	r9, r0, #1
 11945              	.LVL1338:
 11946              		.loc 1 4735 14 is_stmt 1 view .LVU4356
 11947 0196 03D8     		bhi	.L1099
 11948              		.loc 1 4735 14 is_stmt 0 discriminator 1 view .LVU4357
 11949 0198 B9F1100F 		cmp	r9, #16
 11950 019c 5CD1     		bne	.L1119
 11951 019e 0F20     		movs	r0, #15
 11952              	.L1099:
4736:source\fatfs/ff.c **** 		if (f & 8) s[i++] = '-';
 11953              		.loc 1 4736 3 is_stmt 1 view .LVU4358
 11954              		.loc 1 4736 6 is_stmt 0 view .LVU4359
 11955 01a0 2307     		lsls	r3, r4, #28
 11956              	.LVL1339:
 11957              		.loc 1 4736 6 view .LVU4360
 11958 01a2 08D5     		bpl	.L1101
 11959              		.loc 1 4736 14 is_stmt 1 discriminator 1 view .LVU4361
 11960              	.LVL1340:
 11961              		.loc 1 4736 21 is_stmt 0 discriminator 1 view .LVU4362
 11962 01a4 09F17003 		add	r3, r9, #112
 11963 01a8 0DEB0309 		add	r9, sp, r3
 11964 01ac 2D23     		movs	r3, #45
 11965 01ae 09F85C3C 		strb	r3, [r9, #-92]
 11966              		.loc 1 4736 17 discriminator 1 view .LVU4363
 11967 01b2 00F10209 		add	r9, r0, #2
 11968              	.LVL1341:
 11969              	.L1101:
4737:source\fatfs/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 11970              		.loc 1 4737 3 is_stmt 1 view .LVU4364
 11971              		.loc 1 4737 10 view .LVU4365
 11972              		.loc 1 4737 12 is_stmt 0 view .LVU4366
 11973 01b6 14F0010F 		tst	r4, #1
 11974 01ba 14BF     		ite	ne
 11975 01bc 4FF0300A 		movne	r10, #48
 11976 01c0 4FF0200A 		moveq	r10, #32
 11977              	.LVL1342:
4738:source\fatfs/ff.c **** 		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 11978              		.loc 1 4738 3 is_stmt 1 view .LVU4367
4737:source\fatfs/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 11979              		.loc 1 4737 5 is_stmt 0 view .LVU4368
 11980 01c4 CB46     		mov	fp, r9
 11981              	.LVL1343:
 11982              		.loc 1 4738 19 view .LVU4369
 11983 01c6 04F00204 		and	r4, r4, #2
 11984              	.LVL1344:
 11985              	.L1103:
 11986              		.loc 1 4738 19 is_stmt 1 discriminator 1 view .LVU4370
 11987              		.loc 1 4738 23 is_stmt 0 discriminator 1 view .LVU4371
 11988 01ca 0BF10103 		add	r3, fp, #1
 11989              		.loc 1 4738 19 discriminator 1 view .LVU4372
 11990 01ce 14B9     		cbnz	r4, .L1106
 11991              	.LVL1345:
 11992              		.loc 1 4738 19 discriminator 2 view .LVU4373
 11993 01d0 B345     		cmp	fp, r6
 11994 01d2 43D3     		bcc	.L1105
 11995              		.loc 1 4738 23 view .LVU4374
 11996 01d4 9B46     		mov	fp, r3
 11997              	.LVL1346:
 11998              	.L1106:
4739:source\fatfs/ff.c **** 		do putc_bfd(&pb, s[--i]); while (i);
 11999              		.loc 1 4739 3 is_stmt 1 discriminator 1 view .LVU4375
 12000              		.loc 1 4739 6 discriminator 1 view .LVU4376
 12001 01d6 09F1FF39 		add	r9, r9, #-1
 12002              	.LVL1347:
 12003              		.loc 1 4739 6 is_stmt 0 discriminator 1 view .LVU4377
 12004 01da 09A8     		add	r0, sp, #36
 12005 01dc 18F80910 		ldrb	r1, [r8, r9]	@ zero_extendqisi2
 12006 01e0 FFF7FEFF 		bl	putc_bfd
 12007              	.LVL1348:
 12008              		.loc 1 4739 36 is_stmt 1 discriminator 1 view .LVU4378
 12009 01e4 B9F1000F 		cmp	r9, #0
 12010 01e8 F5D1     		bne	.L1106
 12011              	.L1107:
 12012              	.LVL1349:
4740:source\fatfs/ff.c **** 		while (j++ < w) putc_bfd(&pb, d);
 12013              		.loc 1 4740 14 discriminator 1 view .LVU4379
 12014              		.loc 1 4740 14 is_stmt 0 discriminator 1 view .LVU4380
 12015 01ea 5E45     		cmp	r6, fp
 12016 01ec A0D9     		bls	.L1092
 12017              		.loc 1 4740 19 is_stmt 1 discriminator 2 view .LVU4381
 12018 01ee 5146     		mov	r1, r10
 12019 01f0 09A8     		add	r0, sp, #36
 12020 01f2 FFF7FEFF 		bl	putc_bfd
 12021              	.LVL1350:
 12022 01f6 0BF1010B 		add	fp, fp, #1
 12023              	.LVL1351:
 12024              		.loc 1 4740 19 is_stmt 0 discriminator 2 view .LVU4382
 12025 01fa F6E7     		b	.L1107
 12026              	.LVL1352:
 12027              	.L1080:
4719:source\fatfs/ff.c **** 		default:					/* Unknown type (pass-through) */
 12028              		.loc 1 4719 4 is_stmt 1 view .LVU4383
4719:source\fatfs/ff.c **** 		default:					/* Unknown type (pass-through) */
 12029              		.loc 1 4719 12 view .LVU4384
4725:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12030              		.loc 1 4725 3 view .LVU4385
4725:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12031              		.loc 1 4725 42 is_stmt 0 view .LVU4386
 12032 01fc 6207     		lsls	r2, r4, #29
 12033 01fe 25D5     		bpl	.L1115
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 12034              		.loc 1 4701 6 view .LVU4387
 12035 0200 039A     		ldr	r2, [sp, #12]
 12036 0202 52F8043B 		ldr	r3, [r2], #4
 12037              	.LVL1353:
4725:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12038              		.loc 1 4725 24 view .LVU4388
 12039 0206 0392     		str	r2, [sp, #12]
 12040              	.LVL1354:
4726:source\fatfs/ff.c **** 			v = 0 - v;
 12041              		.loc 1 4726 3 is_stmt 1 view .LVU4389
4719:source\fatfs/ff.c **** 		default:					/* Unknown type (pass-through) */
 12042              		.loc 1 4719 6 is_stmt 0 view .LVU4390
 12043 0208 1022     		movs	r2, #16
 12044 020a A6E7     		b	.L1095
 12045              	.LVL1355:
 12046              	.L1084:
4714:source\fatfs/ff.c **** 		case 'D' :					/* Signed decimal */
 12047              		.loc 1 4714 4 is_stmt 1 view .LVU4391
4714:source\fatfs/ff.c **** 		case 'D' :					/* Signed decimal */
 12048              		.loc 1 4714 11 view .LVU4392
4725:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12049              		.loc 1 4725 3 view .LVU4393
4725:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12050              		.loc 1 4725 42 is_stmt 0 view .LVU4394
 12051 020c 6307     		lsls	r3, r4, #29
 12052 020e 1FD5     		bpl	.L1116
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 12053              		.loc 1 4701 6 view .LVU4395
 12054 0210 039A     		ldr	r2, [sp, #12]
 12055 0212 52F8043B 		ldr	r3, [r2], #4
4725:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12056              		.loc 1 4725 24 view .LVU4396
 12057 0216 0392     		str	r2, [sp, #12]
 12058              	.LVL1356:
4726:source\fatfs/ff.c **** 			v = 0 - v;
 12059              		.loc 1 4726 3 is_stmt 1 view .LVU4397
4714:source\fatfs/ff.c **** 		case 'D' :					/* Signed decimal */
 12060              		.loc 1 4714 6 is_stmt 0 view .LVU4398
 12061 0218 0822     		movs	r2, #8
 12062 021a 9EE7     		b	.L1095
 12063              	.LVL1357:
 12064              	.L1078:
4717:source\fatfs/ff.c **** 		case 'X' :					/* Hexdecimal */
 12065              		.loc 1 4717 4 is_stmt 1 view .LVU4399
4717:source\fatfs/ff.c **** 		case 'X' :					/* Hexdecimal */
 12066              		.loc 1 4717 12 view .LVU4400
4725:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12067              		.loc 1 4725 3 view .LVU4401
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 12068              		.loc 1 4701 6 is_stmt 0 view .LVU4402
 12069 021c 039A     		ldr	r2, [sp, #12]
4725:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12070              		.loc 1 4725 88 view .LVU4403
 12071 021e 52F8043B 		ldr	r3, [r2], #4
 12072              	.LVL1358:
4725:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12073              		.loc 1 4725 24 view .LVU4404
 12074 0222 0392     		str	r2, [sp, #12]
4726:source\fatfs/ff.c **** 			v = 0 - v;
 12075              		.loc 1 4726 16 view .LVU4405
 12076 0224 002B     		cmp	r3, #0
 12077 0226 09DA     		bge	.L1118
4727:source\fatfs/ff.c **** 			f |= 8;
 12078              		.loc 1 4727 4 is_stmt 1 view .LVU4406
4727:source\fatfs/ff.c **** 			f |= 8;
 12079              		.loc 1 4727 6 is_stmt 0 view .LVU4407
 12080 0228 5B42     		rsbs	r3, r3, #0
 12081              	.LVL1359:
4728:source\fatfs/ff.c **** 		}
 12082              		.loc 1 4728 4 is_stmt 1 view .LVU4408
4728:source\fatfs/ff.c **** 		}
 12083              		.loc 1 4728 6 is_stmt 0 view .LVU4409
 12084 022a 44F00804 		orr	r4, r4, #8
 12085              	.LVL1360:
4728:source\fatfs/ff.c **** 		}
 12086              		.loc 1 4728 6 view .LVU4410
 12087 022e 05E0     		b	.L1118
 12088              	.LVL1361:
 12089              	.L1082:
4717:source\fatfs/ff.c **** 		case 'X' :					/* Hexdecimal */
 12090              		.loc 1 4717 4 is_stmt 1 view .LVU4411
4717:source\fatfs/ff.c **** 		case 'X' :					/* Hexdecimal */
 12091              		.loc 1 4717 12 view .LVU4412
4725:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12092              		.loc 1 4725 3 view .LVU4413
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 12093              		.loc 1 4701 6 is_stmt 0 view .LVU4414
 12094 0230 039A     		ldr	r2, [sp, #12]
4725:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12095              		.loc 1 4725 42 view .LVU4415
 12096 0232 6007     		lsls	r0, r4, #29
4701:source\fatfs/ff.c **** 			for (j = 0; p[j]; j++) ;
 12097              		.loc 1 4701 6 view .LVU4416
 12098 0234 52F8043B 		ldr	r3, [r2], #4
 12099              	.LVL1362:
4725:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12100              		.loc 1 4725 42 view .LVU4417
 12101 0238 0CD5     		bpl	.L1117
4725:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12102              		.loc 1 4725 24 view .LVU4418
 12103 023a 0392     		str	r2, [sp, #12]
 12104              	.LVL1363:
4726:source\fatfs/ff.c **** 			v = 0 - v;
 12105              		.loc 1 4726 3 is_stmt 1 view .LVU4419
 12106              	.L1118:
4717:source\fatfs/ff.c **** 		case 'X' :					/* Hexdecimal */
 12107              		.loc 1 4717 6 is_stmt 0 view .LVU4420
 12108 023c 0A22     		movs	r2, #10
 12109 023e 8CE7     		b	.L1095
 12110              	.LVL1364:
 12111              	.L1114:
4712:source\fatfs/ff.c **** 		case 'O' :					/* Octal */
 12112              		.loc 1 4712 6 view .LVU4421
 12113 0240 0222     		movs	r2, #2
 12114              	.LVL1365:
 12115              	.L1094:
4725:source\fatfs/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12116              		.loc 1 4725 88 view .LVU4422
 12117 0242 039B     		ldr	r3, [sp, #12]
 12118 0244 181D     		adds	r0, r3, #4
 12119 0246 0390     		str	r0, [sp, #12]
 12120 0248 1B68     		ldr	r3, [r3]
 12121 024a 86E7     		b	.L1095
 12122              	.LVL1366:
 12123              	.L1115:
4719:source\fatfs/ff.c **** 		default:					/* Unknown type (pass-through) */
 12124              		.loc 1 4719 6 view .LVU4423
 12125 024c 1022     		movs	r2, #16
 12126 024e F8E7     		b	.L1094
 12127              	.LVL1367:
 12128              	.L1116:
4714:source\fatfs/ff.c **** 		case 'D' :					/* Signed decimal */
 12129              		.loc 1 4714 6 view .LVU4424
 12130 0250 0822     		movs	r2, #8
 12131 0252 F6E7     		b	.L1094
 12132              	.LVL1368:
 12133              	.L1117:
4717:source\fatfs/ff.c **** 		case 'X' :					/* Hexdecimal */
 12134              		.loc 1 4717 6 view .LVU4425
 12135 0254 0A22     		movs	r2, #10
 12136 0256 F4E7     		b	.L1094
 12137              	.LVL1369:
 12138              	.L1119:
4734:source\fatfs/ff.c **** 		} while (v && i < sizeof s / sizeof s[0]);
 12139              		.loc 1 4734 7 view .LVU4426
 12140 0258 4846     		mov	r0, r9
 12141 025a 88E7     		b	.L1100
 12142              	.LVL1370:
 12143              	.L1105:
4738:source\fatfs/ff.c **** 		do putc_bfd(&pb, s[--i]); while (i);
 12144              		.loc 1 4738 31 discriminator 3 view .LVU4427
 12145 025c 5146     		mov	r1, r10
 12146 025e 09A8     		add	r0, sp, #36
 12147 0260 0193     		str	r3, [sp, #4]
4738:source\fatfs/ff.c **** 		do putc_bfd(&pb, s[--i]); while (i);
 12148              		.loc 1 4738 31 is_stmt 1 discriminator 3 view .LVU4428
 12149 0262 FFF7FEFF 		bl	putc_bfd
 12150              	.LVL1371:
4738:source\fatfs/ff.c **** 		do putc_bfd(&pb, s[--i]); while (i);
 12151              		.loc 1 4738 23 is_stmt 0 discriminator 3 view .LVU4429
 12152 0266 019B     		ldr	r3, [sp, #4]
 12153 0268 9B46     		mov	fp, r3
 12154 026a AEE7     		b	.L1103
 12155              	.LVL1372:
 12156              	.L1065:
4741:source\fatfs/ff.c **** 	}
4742:source\fatfs/ff.c **** 
4743:source\fatfs/ff.c **** 	va_end(arp);
 12157              		.loc 1 4743 2 is_stmt 1 view .LVU4430
4744:source\fatfs/ff.c **** 
4745:source\fatfs/ff.c **** 	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 12158              		.loc 1 4745 2 view .LVU4431
 12159              		.loc 1 4745 11 is_stmt 0 view .LVU4432
 12160 026c 0A9A     		ldr	r2, [sp, #40]
 12161              		.loc 1 4745 5 view .LVU4433
 12162 026e 002A     		cmp	r2, #0
 12163 0270 06DA     		bge	.L1109
 12164              	.LVL1373:
 12165              	.L1111:
4746:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
4747:source\fatfs/ff.c **** 		&& (UINT)pb.idx == nw) return pb.nchr;
4748:source\fatfs/ff.c **** 	return EOF;
 12166              		.loc 1 4748 9 view .LVU4434
 12167 0272 4FF0FF30 		mov	r0, #-1
 12168              	.L1063:
4749:source\fatfs/ff.c **** }
 12169              		.loc 1 4749 1 view .LVU4435
 12170 0276 1CB0     		add	sp, sp, #112
 12171              		.cfi_remember_state
 12172              		.cfi_def_cfa_offset 48
 12173              		@ sp needed
 12174 0278 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 12175              		.cfi_restore 14
 12176              		.cfi_restore 11
 12177              		.cfi_restore 10
 12178              		.cfi_restore 9
 12179              		.cfi_restore 8
 12180              		.cfi_restore 7
 12181              		.cfi_restore 6
 12182              		.cfi_restore 5
 12183              		.cfi_restore 4
 12184              		.cfi_def_cfa_offset 12
 12185 027c 03B0     		add	sp, sp, #12
 12186              		.cfi_restore 3
 12187              		.cfi_restore 2
 12188              		.cfi_restore 1
 12189              		.cfi_def_cfa_offset 0
 12190 027e 7047     		bx	lr
 12191              	.LVL1374:
 12192              	.L1109:
 12193              		.cfi_restore_state
4746:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 12194              		.loc 1 4746 6 view .LVU4436
 12195 0280 0998     		ldr	r0, [sp, #36]
 12196 0282 04AB     		add	r3, sp, #16
 12197 0284 0CA9     		add	r1, sp, #48
 12198              	.LVL1375:
4746:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 12199              		.loc 1 4746 6 view .LVU4437
 12200 0286 FFF7FEFF 		bl	f_write
 12201              	.LVL1376:
4746:source\fatfs/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 12202              		.loc 1 4746 3 view .LVU4438
 12203 028a 0028     		cmp	r0, #0
 12204 028c F1D1     		bne	.L1111
4747:source\fatfs/ff.c **** 	return EOF;
 12205              		.loc 1 4747 3 view .LVU4439
 12206 028e 0A9A     		ldr	r2, [sp, #40]
 12207 0290 049B     		ldr	r3, [sp, #16]
 12208 0292 9A42     		cmp	r2, r3
 12209 0294 EDD1     		bne	.L1111
4747:source\fatfs/ff.c **** 	return EOF;
 12210              		.loc 1 4747 26 is_stmt 1 discriminator 1 view .LVU4440
4747:source\fatfs/ff.c **** 	return EOF;
 12211              		.loc 1 4747 35 is_stmt 0 discriminator 1 view .LVU4441
 12212 0296 0B98     		ldr	r0, [sp, #44]
 12213 0298 EDE7     		b	.L1063
 12214              		.cfi_endproc
 12215              	.LFE185:
 12217 029a 00BF     		.section	.rodata.cst.0,"a"
 12218              		.align	1
 12221              	cst.0:
 12222 0000 0080     		.short	-32768
 12223 0002 0040     		.short	16384
 12224 0004 0020     		.short	8192
 12225 0006 0010     		.short	4096
 12226 0008 0008     		.short	2048
 12227 000a 0040     		.short	16384
 12228 000c 0020     		.short	8192
 12229 000e 0010     		.short	4096
 12230 0010 0008     		.short	2048
 12231 0012 0004     		.short	1024
 12232 0014 0002     		.short	512
 12233              		.section	.rodata.vst.1,"a"
 12234              		.align	1
 12237              	vst.1:
 12238 0000 0004     		.short	1024
 12239 0002 0002     		.short	512
 12240 0004 0001     		.short	256
 12241 0006 8000     		.short	128
 12242 0008 4000     		.short	64
 12243 000a 2000     		.short	32
 12244 000c 1000     		.short	16
 12245 000e 0800     		.short	8
 12246 0010 0400     		.short	4
 12247 0012 0200     		.short	2
 12248 0014 0000     		.short	0
 12249              		.section	.rodata.LfnOfs,"a"
 12252              	LfnOfs:
 12253 0000 01030507 		.ascii	"\001\003\005\007\011\016\020\022\024\026\030\034\036"
 12253      090E1012 
 12253      1416181C 
 12253      1E
 12254              		.section	.bss.Files,"aw",%nobits
 12255              		.align	2
 12258              	Files:
 12259 0000 00000000 		.space	24
 12259      00000000 
 12259      00000000 
 12259      00000000 
 12259      00000000 
 12260              		.section	.bss.Fsid,"aw",%nobits
 12261              		.align	1
 12264              	Fsid:
 12265 0000 0000     		.space	2
 12266              		.section	.bss.FatFs,"aw",%nobits
 12267              		.align	2
 12270              	FatFs:
 12271 0000 00000000 		.space	12
 12271      00000000 
 12271      00000000 
 12272              		.text
 12273              	.Letext0:
 12274              		.file 2 "source\\fatfs\\integer.h"
 12275              		.file 3 "source\\fatfs\\ff.h"
 12276              		.file 4 "source\\fatfs\\diskio.h"
 12277              		.file 5 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 mpacbti-rel1\\lib\\gcc\\ar
 12278              		.file 6 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:21     .text.mem_cpy:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:26     .text.mem_cpy:00000000 mem_cpy
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:61     .text.mem_set:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:66     .text.mem_set:00000000 mem_set
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:95     .text.chk_lock:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:100    .text.chk_lock:00000000 chk_lock
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:279    .text.chk_lock:00000098 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:12258  .bss.Files:00000000 Files
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:284    .text.inc_lock:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:289    .text.inc_lock:00000000 inc_lock
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:447    .text.inc_lock:00000094 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:452    .text.dec_lock:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:457    .text.dec_lock:00000000 dec_lock
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:538    .text.dec_lock:0000003c $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:543    .text.clear_lock:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:548    .text.clear_lock:00000000 clear_lock
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:590    .text.clear_lock:00000018 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:595    .text.clmt_clust:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:600    .text.clmt_clust:00000000 clmt_clust
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:665    .text.sum_sfn:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:670    .text.sum_sfn:00000000 sum_sfn
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:712    .text.get_ldnumber:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:717    .text.get_ldnumber:00000000 get_ldnumber
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:804    .text.sync_window:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:809    .text.sync_window:00000000 sync_window
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:909    .text.validate:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:914    .text.validate:00000000 validate
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:961    .text.get_fileinfo:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:966    .text.get_fileinfo:00000000 get_fileinfo
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:1249   .text.move_window:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:1254   .text.move_window:00000000 move_window
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:1331   .text.check_fs:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:1336   .text.check_fs:00000000 check_fs
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:1414   .text.check_fs:0000004c $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:1419   .text.find_volume:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:1424   .text.find_volume:00000000 find_volume
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:1961   .text.find_volume:00000218 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:12270  .bss.FatFs:00000000 FatFs
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:12264  .bss.Fsid:00000000 Fsid
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:1968   .text.sync_fs:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:1973   .text.sync_fs:00000000 sync_fs
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:2093   .text.sync_fs:00000080 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:2098   .text.ld_clust.isra.0:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:2103   .text.ld_clust.isra.0:00000000 ld_clust.isra.0
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:2134   .text.clust2sect:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:2140   .text.clust2sect:00000000 clust2sect
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:2176   .text.get_fat:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:2182   .text.get_fat:00000000 get_fat
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:2386   .text.dir_sdi:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:2391   .text.dir_sdi:00000000 dir_sdi
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:2563   .text.put_fat:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:2569   .text.put_fat:00000000 put_fat
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:2813   .text.create_chain:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:2818   .text.create_chain:00000000 create_chain
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:3021   .text.dir_next:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:3026   .text.dir_next:00000000 dir_next
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:3281   .text.dir_find:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:3286   .text.dir_find:00000000 dir_find
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:3629   .text.dir_find:00000134 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:12252  .rodata.LfnOfs:00000000 LfnOfs
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:3642   .text.follow_path:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:3647   .text.follow_path:00000000 follow_path
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:4397   .text.follow_path:000002c8 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:4405   .text.dir_register:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:4410   .text.dir_register:00000000 dir_register
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:5072   .text.dir_register:00000280 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:5078   .text.dir_remove:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:5083   .text.dir_remove:00000000 dir_remove
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:5185   .text.dir_read.constprop.0:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:5190   .text.dir_read.constprop.0:00000000 dir_read.constprop.0
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:5476   .text.dir_read.constprop.0:000000fc $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:5481   .text.remove_chain:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:5486   .text.remove_chain:00000000 remove_chain
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:5601   .text.f_mount:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:5607   .text.f_mount:00000000 f_mount
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:5717   .text.f_mount:00000054 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:5722   .text.f_open:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:5728   .text.f_open:00000000 f_open
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:6187   .text.f_open:000001f0 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:6192   .text.f_read:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:6198   .text.f_read:00000000 f_read
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:6556   .text.f_write:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:6562   .text.f_write:00000000 f_write
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:6973   .text.putc_bfd:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:6978   .text.putc_bfd:00000000 putc_bfd
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:7068   .text.f_sync:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:7074   .text.f_sync:00000000 f_sync
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:7262   .text.f_close:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:7268   .text.f_close:00000000 f_close
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:7322   .text.f_lseek:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:7328   .text.f_lseek:00000000 f_lseek
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:7914   .text.f_opendir:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:7920   .text.f_opendir:00000000 f_opendir
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:8111   .text.f_closedir:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:8117   .text.f_closedir:00000000 f_closedir
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:8176   .text.f_readdir:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:8182   .text.f_readdir:00000000 f_readdir
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:8335   .text.f_stat:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:8341   .text.f_stat:00000000 f_stat
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:8450   .text.f_getfree:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:8456   .text.f_getfree:00000000 f_getfree
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:8703   .text.f_truncate:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:8709   .text.f_truncate:00000000 f_truncate
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:8886   .text.f_unlink:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:8892   .text.f_unlink:00000000 f_unlink
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:9122   .text.f_mkdir:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:9128   .text.f_mkdir:00000000 f_mkdir
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:9564   .text.f_chmod:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:9570   .text.f_chmod:00000000 f_chmod
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:9706   .text.f_rename:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:9712   .text.f_rename:00000000 f_rename
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:10022  .text.f_utime:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:10028  .text.f_utime:00000000 f_utime
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:10171  .text.f_mkfs:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:10177  .text.f_mkfs:00000000 f_mkfs
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:10598  .text.f_mkfs:00000194 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:12237  .rodata.vst.1:00000000 vst.1
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:12221  .rodata.cst.0:00000000 cst.0
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:10604  .text.f_mkfs:000001a0 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:11278  .text.f_mkfs:00000558 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:11286  .text.f_gets:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:11292  .text.f_gets:00000000 f_gets
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:11385  .text.f_putc:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:11391  .text.f_putc:00000000 f_putc
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:11463  .text.f_puts:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:11469  .text.f_puts:00000000 f_puts
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:11552  .text.f_printf:00000000 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:11558  .text.f_printf:00000000 f_printf
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:11766  .text.f_printf:000000b8 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:11776  .text.f_printf:000000e0 $t
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:12218  .rodata.cst.0:00000000 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:12234  .rodata.vst.1:00000000 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:12255  .bss.Files:00000000 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:12261  .bss.Fsid:00000000 $d
C:\Users\37593\AppData\Local\Temp\cce9LsTC.s:12267  .bss.FatFs:00000000 $d

UNDEFINED SYMBOLS
disk_write
disk_status
ff_convert
disk_read
disk_initialize
disk_ioctl
ff_wtoupper
ff_memalloc
ff_memfree
get_fattime
strlen
